// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: res.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "res.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace conf {

namespace {

const ::google::protobuf::Descriptor* ResDes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResDes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Role_reflection_ = NULL;
const ::google::protobuf::Descriptor* Roles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Roles_reflection_ = NULL;
const ::google::protobuf::Descriptor* Award_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Award_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLevels_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLevels_reflection_ = NULL;
const ::google::protobuf::Descriptor* CopyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CopyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CopyInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CopyInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleLevels_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleLevels_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerBirth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerBirth_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerBirths_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerBirths_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_res_2eproto() {
  protobuf_AddDesc_res_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "res.proto");
  GOOGLE_CHECK(file != NULL);
  ResDes_descriptor_ = file->message_type(0);
  static const int ResDes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResDes, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResDes, resnum_),
  };
  ResDes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResDes_descriptor_,
      ResDes::default_instance_,
      ResDes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResDes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResDes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResDes));
  Role_descriptor_ = file->message_type(1);
  static const int Role_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, defense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, silverplus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, buymaterial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, upgradematerial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, bulleteffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, hpfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, atfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, defactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, hpgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, atgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, degrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, star1itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, star1itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, star2itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, star2itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, star3itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, star3itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, moverange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, type_),
  };
  Role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Role_descriptor_,
      Role::default_instance_,
      Role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Role));
  Roles_descriptor_ = file->message_type(2);
  static const int Roles_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roles, list_),
  };
  Roles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Roles_descriptor_,
      Roles::default_instance_,
      Roles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Roles));
  Award_descriptor_ = file->message_type(3);
  static const int Award_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Award, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Award, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Award, weight_),
  };
  Award_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Award_descriptor_,
      Award::default_instance_,
      Award_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Award, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Award, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Award));
  PlayerLevel_descriptor_ = file->message_type(4);
  static const int PlayerLevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevel, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevel, exp_),
  };
  PlayerLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLevel_descriptor_,
      PlayerLevel::default_instance_,
      PlayerLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLevel));
  PlayerLevels_descriptor_ = file->message_type(5);
  static const int PlayerLevels_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevels, list_),
  };
  PlayerLevels_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLevels_descriptor_,
      PlayerLevels::default_instance_,
      PlayerLevels_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevels, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLevels, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLevels));
  CopyInfo_descriptor_ = file->message_type(6);
  static const int CopyInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, chaptername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, missionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, missiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, missiondesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, playerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, premission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, roleidlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, tasklimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, silveraward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, expaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, awardlist_),
  };
  CopyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CopyInfo_descriptor_,
      CopyInfo::default_instance_,
      CopyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CopyInfo));
  CopyInfos_descriptor_ = file->message_type(7);
  static const int CopyInfos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfos, list_),
  };
  CopyInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CopyInfos_descriptor_,
      CopyInfos::default_instance_,
      CopyInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CopyInfos));
  RoleLevel_descriptor_ = file->message_type(8);
  static const int RoleLevel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLevel, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLevel, silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLevel, gold_),
  };
  RoleLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleLevel_descriptor_,
      RoleLevel::default_instance_,
      RoleLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleLevel));
  RoleLevels_descriptor_ = file->message_type(9);
  static const int RoleLevels_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLevels, list_),
  };
  RoleLevels_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleLevels_descriptor_,
      RoleLevels::default_instance_,
      RoleLevels_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLevels, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLevels, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleLevels));
  PlayerBirth_descriptor_ = file->message_type(10);
  static const int PlayerBirth_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBirth, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBirth, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBirth, passid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBirth, res_),
  };
  PlayerBirth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerBirth_descriptor_,
      PlayerBirth::default_instance_,
      PlayerBirth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBirth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBirth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerBirth));
  PlayerBirths_descriptor_ = file->message_type(11);
  static const int PlayerBirths_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBirths, list_),
  };
  PlayerBirths_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerBirths_descriptor_,
      PlayerBirths::default_instance_,
      PlayerBirths_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBirths, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBirths, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerBirths));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_res_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResDes_descriptor_, &ResDes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Role_descriptor_, &Role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Roles_descriptor_, &Roles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Award_descriptor_, &Award::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLevel_descriptor_, &PlayerLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLevels_descriptor_, &PlayerLevels::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CopyInfo_descriptor_, &CopyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CopyInfos_descriptor_, &CopyInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleLevel_descriptor_, &RoleLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleLevels_descriptor_, &RoleLevels::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerBirth_descriptor_, &PlayerBirth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerBirths_descriptor_, &PlayerBirths::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_res_2eproto() {
  delete ResDes::default_instance_;
  delete ResDes_reflection_;
  delete Role::default_instance_;
  delete Role_reflection_;
  delete Roles::default_instance_;
  delete Roles_reflection_;
  delete Award::default_instance_;
  delete Award_reflection_;
  delete PlayerLevel::default_instance_;
  delete PlayerLevel_reflection_;
  delete PlayerLevels::default_instance_;
  delete PlayerLevels_reflection_;
  delete CopyInfo::default_instance_;
  delete CopyInfo_reflection_;
  delete CopyInfos::default_instance_;
  delete CopyInfos_reflection_;
  delete RoleLevel::default_instance_;
  delete RoleLevel_reflection_;
  delete RoleLevels::default_instance_;
  delete RoleLevels_reflection_;
  delete PlayerBirth::default_instance_;
  delete PlayerBirth_reflection_;
  delete PlayerBirths::default_instance_;
  delete PlayerBirths_reflection_;
}

void protobuf_AddDesc_res_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tres.proto\022\004conf\"\'\n\006ResDes\022\r\n\005resID\030\001 \002"
    "(\021\022\016\n\006resNum\030\002 \002(\021\"\250\004\n\004Role\022\n\n\002id\030\001 \002(\021\022"
    "\014\n\004name\030\002 \002(\t\022\014\n\004icon\030\003 \002(\021\022\016\n\006starLv\030\004 "
    "\002(\021\022\013\n\003job\030\005 \002(\021\022\r\n\005level\030\006 \002(\021\022\016\n\006attac"
    "k\030\007 \002(\021\022\017\n\007defense\030\010 \002(\021\022\n\n\002hp\030\t \002(\021\022\022\n\n"
    "silverPlus\030\n \002(\021\022\016\n\006unlock\030\013 \002(\021\022\023\n\013buyM"
    "aterial\030\014 \002(\021\022\027\n\017upgradeMaterial\030\r \002(\021\022\024"
    "\n\014bulletEffect\030\016 \001(\021\022\r\n\005skill\030\017 \002(\021\022\r\n\005m"
    "odel\030\020 \002(\021\022\020\n\010hpFactor\030\021 \002(\021\022\020\n\010atFactor"
    "\030\022 \002(\021\022\020\n\010deFactor\030\023 \002(\021\022\016\n\006hpGrow\030\024 \002(\021"
    "\022\016\n\006atGrow\030\025 \002(\021\022\016\n\006deGrow\030\026 \002(\021\022\023\n\013star"
    "1ItemID\030\027 \002(\021\022\024\n\014star1ItemNum\030\030 \002(\021\022\023\n\013s"
    "tar2ItemID\030\031 \002(\021\022\024\n\014star2ItemNum\030\032 \002(\021\022\023"
    "\n\013star3ItemID\030\033 \002(\021\022\024\n\014star3ItemNum\030\034 \002("
    "\021\022\021\n\tmoveSpeed\030\035 \002(\021\022\021\n\tmoveRange\030\036 \002(\021\022"
    "\014\n\004type\030\037 \002(\021\"!\n\005Roles\022\030\n\004list\030\001 \003(\0132\n.c"
    "onf.Role\"6\n\005Award\022\016\n\006itemID\030\001 \002(\021\022\r\n\005cou"
    "nt\030\002 \002(\021\022\016\n\006weight\030\003 \002(\021\"&\n\013PlayerLevel\022"
    "\n\n\002id\030\001 \002(\021\022\013\n\003exp\030\002 \002(\021\"/\n\014PlayerLevels"
    "\022\037\n\004list\030\001 \003(\0132\021.conf.PlayerLevel\"\225\002\n\010Co"
    "pyInfo\022\n\n\002id\030\001 \002(\021\022\021\n\tchapterID\030\002 \002(\021\022\023\n"
    "\013chapterName\030\003 \002(\t\022\023\n\013missionName\030\004 \002(\t\022"
    "\023\n\013missionType\030\005 \002(\021\022\023\n\013missionDesc\030\006 \002("
    "\t\022\023\n\013playerLevel\030\007 \002(\021\022\022\n\npreMission\030\010 \002"
    "(\021\022\023\n\013roleIDLimit\030\t \002(\021\022\021\n\ttaskLimit\030\n \002"
    "(\021\022\023\n\013silverAward\030\013 \002(\021\022\020\n\010expAward\030\014 \002("
    "\021\022\036\n\tawardList\030\r \003(\0132\013.conf.Award\")\n\tCop"
    "yInfos\022\034\n\004list\030\001 \003(\0132\016.conf.CopyInfo\"5\n\t"
    "RoleLevel\022\n\n\002id\030\001 \002(\021\022\016\n\006silver\030\002 \002(\021\022\014\n"
    "\004gold\030\003 \002(\021\"+\n\nRoleLevels\022\035\n\004list\030\001 \003(\0132"
    "\017.conf.RoleLevel\"T\n\013PlayerBirth\022\n\n\002id\030\001 "
    "\002(\021\022\016\n\006roleID\030\002 \002(\021\022\016\n\006passID\030\003 \002(\021\022\031\n\003r"
    "es\030\004 \003(\0132\014.conf.ResDes\"/\n\014PlayerBirths\022\037"
    "\n\004list\030\001 \003(\0132\021.conf.PlayerBirth", 1351);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "res.proto", &protobuf_RegisterTypes);
  ResDes::default_instance_ = new ResDes();
  Role::default_instance_ = new Role();
  Roles::default_instance_ = new Roles();
  Award::default_instance_ = new Award();
  PlayerLevel::default_instance_ = new PlayerLevel();
  PlayerLevels::default_instance_ = new PlayerLevels();
  CopyInfo::default_instance_ = new CopyInfo();
  CopyInfos::default_instance_ = new CopyInfos();
  RoleLevel::default_instance_ = new RoleLevel();
  RoleLevels::default_instance_ = new RoleLevels();
  PlayerBirth::default_instance_ = new PlayerBirth();
  PlayerBirths::default_instance_ = new PlayerBirths();
  ResDes::default_instance_->InitAsDefaultInstance();
  Role::default_instance_->InitAsDefaultInstance();
  Roles::default_instance_->InitAsDefaultInstance();
  Award::default_instance_->InitAsDefaultInstance();
  PlayerLevel::default_instance_->InitAsDefaultInstance();
  PlayerLevels::default_instance_->InitAsDefaultInstance();
  CopyInfo::default_instance_->InitAsDefaultInstance();
  CopyInfos::default_instance_->InitAsDefaultInstance();
  RoleLevel::default_instance_->InitAsDefaultInstance();
  RoleLevels::default_instance_->InitAsDefaultInstance();
  PlayerBirth::default_instance_->InitAsDefaultInstance();
  PlayerBirths::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_res_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_res_2eproto {
  StaticDescriptorInitializer_res_2eproto() {
    protobuf_AddDesc_res_2eproto();
  }
} static_descriptor_initializer_res_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ResDes::kResIDFieldNumber;
const int ResDes::kResNumFieldNumber;
#endif  // !_MSC_VER

ResDes::ResDes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResDes::InitAsDefaultInstance() {
}

ResDes::ResDes(const ResDes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResDes::SharedCtor() {
  _cached_size_ = 0;
  resid_ = 0;
  resnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResDes::~ResDes() {
  SharedDtor();
}

void ResDes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResDes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResDes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResDes_descriptor_;
}

const ResDes& ResDes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_res_2eproto();
  return *default_instance_;
}

ResDes* ResDes::default_instance_ = NULL;

ResDes* ResDes::New() const {
  return new ResDes;
}

void ResDes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resid_ = 0;
    resnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResDes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 resID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &resid_)));
          set_has_resid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resNum;
        break;
      }

      // required sint32 resNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &resnum_)));
          set_has_resnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResDes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 resID = 1;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->resid(), output);
  }

  // required sint32 resNum = 2;
  if (has_resnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->resnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResDes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 resID = 1;
  if (has_resid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->resid(), target);
  }

  // required sint32 resNum = 2;
  if (has_resnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->resnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResDes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 resID = 1;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->resid());
    }

    // required sint32 resNum = 2;
    if (has_resnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->resnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResDes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResDes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResDes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResDes::MergeFrom(const ResDes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_resnum()) {
      set_resnum(from.resnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResDes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResDes::CopyFrom(const ResDes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResDes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResDes::Swap(ResDes* other) {
  if (other != this) {
    std::swap(resid_, other->resid_);
    std::swap(resnum_, other->resnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResDes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResDes_descriptor_;
  metadata.reflection = ResDes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Role::kIdFieldNumber;
const int Role::kNameFieldNumber;
const int Role::kIconFieldNumber;
const int Role::kStarLvFieldNumber;
const int Role::kJobFieldNumber;
const int Role::kLevelFieldNumber;
const int Role::kAttackFieldNumber;
const int Role::kDefenseFieldNumber;
const int Role::kHpFieldNumber;
const int Role::kSilverPlusFieldNumber;
const int Role::kUnlockFieldNumber;
const int Role::kBuyMaterialFieldNumber;
const int Role::kUpgradeMaterialFieldNumber;
const int Role::kBulletEffectFieldNumber;
const int Role::kSkillFieldNumber;
const int Role::kModelFieldNumber;
const int Role::kHpFactorFieldNumber;
const int Role::kAtFactorFieldNumber;
const int Role::kDeFactorFieldNumber;
const int Role::kHpGrowFieldNumber;
const int Role::kAtGrowFieldNumber;
const int Role::kDeGrowFieldNumber;
const int Role::kStar1ItemIDFieldNumber;
const int Role::kStar1ItemNumFieldNumber;
const int Role::kStar2ItemIDFieldNumber;
const int Role::kStar2ItemNumFieldNumber;
const int Role::kStar3ItemIDFieldNumber;
const int Role::kStar3ItemNumFieldNumber;
const int Role::kMoveSpeedFieldNumber;
const int Role::kMoveRangeFieldNumber;
const int Role::kTypeFieldNumber;
#endif  // !_MSC_VER

Role::Role()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Role::InitAsDefaultInstance() {
}

Role::Role(const Role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Role::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = 0;
  starlv_ = 0;
  job_ = 0;
  level_ = 0;
  attack_ = 0;
  defense_ = 0;
  hp_ = 0;
  silverplus_ = 0;
  unlock_ = 0;
  buymaterial_ = 0;
  upgradematerial_ = 0;
  bulleteffect_ = 0;
  skill_ = 0;
  model_ = 0;
  hpfactor_ = 0;
  atfactor_ = 0;
  defactor_ = 0;
  hpgrow_ = 0;
  atgrow_ = 0;
  degrow_ = 0;
  star1itemid_ = 0;
  star1itemnum_ = 0;
  star2itemid_ = 0;
  star2itemnum_ = 0;
  star3itemid_ = 0;
  star3itemnum_ = 0;
  movespeed_ = 0;
  moverange_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Role::~Role() {
  SharedDtor();
}

void Role::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role_descriptor_;
}

const Role& Role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_res_2eproto();
  return *default_instance_;
}

Role* Role::default_instance_ = NULL;

Role* Role::New() const {
  return new Role;
}

void Role::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    icon_ = 0;
    starlv_ = 0;
    job_ = 0;
    level_ = 0;
    attack_ = 0;
    defense_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hp_ = 0;
    silverplus_ = 0;
    unlock_ = 0;
    buymaterial_ = 0;
    upgradematerial_ = 0;
    bulleteffect_ = 0;
    skill_ = 0;
    model_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    hpfactor_ = 0;
    atfactor_ = 0;
    defactor_ = 0;
    hpgrow_ = 0;
    atgrow_ = 0;
    degrow_ = 0;
    star1itemid_ = 0;
    star1itemnum_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    star2itemid_ = 0;
    star2itemnum_ = 0;
    star3itemid_ = 0;
    star3itemnum_ = 0;
    movespeed_ = 0;
    moverange_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_icon;
        break;
      }

      // required sint32 icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_starLv;
        break;
      }

      // required sint32 starLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }

      // required sint32 job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required sint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attack;
        break;
      }

      // required sint32 attack = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_defense;
        break;
      }

      // required sint32 defense = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &defense_)));
          set_has_defense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hp;
        break;
      }

      // required sint32 hp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_silverPlus;
        break;
      }

      // required sint32 silverPlus = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silverPlus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &silverplus_)));
          set_has_silverplus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_unlock;
        break;
      }

      // required sint32 unlock = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_buyMaterial;
        break;
      }

      // required sint32 buyMaterial = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyMaterial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &buymaterial_)));
          set_has_buymaterial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_upgradeMaterial;
        break;
      }

      // required sint32 upgradeMaterial = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradeMaterial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &upgradematerial_)));
          set_has_upgradematerial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_bulletEffect;
        break;
      }

      // optional sint32 bulletEffect = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulletEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bulleteffect_)));
          set_has_bulleteffect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_skill;
        break;
      }

      // required sint32 skill = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_model;
        break;
      }

      // required sint32 model = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &model_)));
          set_has_model();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_hpFactor;
        break;
      }

      // required sint32 hpFactor = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &hpfactor_)));
          set_has_hpfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_atFactor;
        break;
      }

      // required sint32 atFactor = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &atfactor_)));
          set_has_atfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_deFactor;
        break;
      }

      // required sint32 deFactor = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &defactor_)));
          set_has_defactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_hpGrow;
        break;
      }

      // required sint32 hpGrow = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &hpgrow_)));
          set_has_hpgrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_atGrow;
        break;
      }

      // required sint32 atGrow = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &atgrow_)));
          set_has_atgrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_deGrow;
        break;
      }

      // required sint32 deGrow = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &degrow_)));
          set_has_degrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_star1ItemID;
        break;
      }

      // required sint32 star1ItemID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star1ItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &star1itemid_)));
          set_has_star1itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_star1ItemNum;
        break;
      }

      // required sint32 star1ItemNum = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star1ItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &star1itemnum_)));
          set_has_star1itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_star2ItemID;
        break;
      }

      // required sint32 star2ItemID = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star2ItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &star2itemid_)));
          set_has_star2itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_star2ItemNum;
        break;
      }

      // required sint32 star2ItemNum = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star2ItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &star2itemnum_)));
          set_has_star2itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_star3ItemID;
        break;
      }

      // required sint32 star3ItemID = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star3ItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &star3itemid_)));
          set_has_star3itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_star3ItemNum;
        break;
      }

      // required sint32 star3ItemNum = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star3ItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &star3itemnum_)));
          set_has_star3itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_moveSpeed;
        break;
      }

      // required sint32 moveSpeed = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_moveRange;
        break;
      }

      // required sint32 moveRange = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &moverange_)));
          set_has_moverange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_type;
        break;
      }

      // required sint32 type = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required sint32 icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->icon(), output);
  }

  // required sint32 starLv = 4;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->starlv(), output);
  }

  // required sint32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->job(), output);
  }

  // required sint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->level(), output);
  }

  // required sint32 attack = 7;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->attack(), output);
  }

  // required sint32 defense = 8;
  if (has_defense()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->defense(), output);
  }

  // required sint32 hp = 9;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->hp(), output);
  }

  // required sint32 silverPlus = 10;
  if (has_silverplus()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->silverplus(), output);
  }

  // required sint32 unlock = 11;
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->unlock(), output);
  }

  // required sint32 buyMaterial = 12;
  if (has_buymaterial()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->buymaterial(), output);
  }

  // required sint32 upgradeMaterial = 13;
  if (has_upgradematerial()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->upgradematerial(), output);
  }

  // optional sint32 bulletEffect = 14;
  if (has_bulleteffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->bulleteffect(), output);
  }

  // required sint32 skill = 15;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(15, this->skill(), output);
  }

  // required sint32 model = 16;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(16, this->model(), output);
  }

  // required sint32 hpFactor = 17;
  if (has_hpfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->hpfactor(), output);
  }

  // required sint32 atFactor = 18;
  if (has_atfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(18, this->atfactor(), output);
  }

  // required sint32 deFactor = 19;
  if (has_defactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(19, this->defactor(), output);
  }

  // required sint32 hpGrow = 20;
  if (has_hpgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(20, this->hpgrow(), output);
  }

  // required sint32 atGrow = 21;
  if (has_atgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(21, this->atgrow(), output);
  }

  // required sint32 deGrow = 22;
  if (has_degrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(22, this->degrow(), output);
  }

  // required sint32 star1ItemID = 23;
  if (has_star1itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(23, this->star1itemid(), output);
  }

  // required sint32 star1ItemNum = 24;
  if (has_star1itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(24, this->star1itemnum(), output);
  }

  // required sint32 star2ItemID = 25;
  if (has_star2itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(25, this->star2itemid(), output);
  }

  // required sint32 star2ItemNum = 26;
  if (has_star2itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(26, this->star2itemnum(), output);
  }

  // required sint32 star3ItemID = 27;
  if (has_star3itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(27, this->star3itemid(), output);
  }

  // required sint32 star3ItemNum = 28;
  if (has_star3itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(28, this->star3itemnum(), output);
  }

  // required sint32 moveSpeed = 29;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(29, this->movespeed(), output);
  }

  // required sint32 moveRange = 30;
  if (has_moverange()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(30, this->moverange(), output);
  }

  // required sint32 type = 31;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(31, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required sint32 icon = 3;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->icon(), target);
  }

  // required sint32 starLv = 4;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->starlv(), target);
  }

  // required sint32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->job(), target);
  }

  // required sint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->level(), target);
  }

  // required sint32 attack = 7;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->attack(), target);
  }

  // required sint32 defense = 8;
  if (has_defense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->defense(), target);
  }

  // required sint32 hp = 9;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->hp(), target);
  }

  // required sint32 silverPlus = 10;
  if (has_silverplus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->silverplus(), target);
  }

  // required sint32 unlock = 11;
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->unlock(), target);
  }

  // required sint32 buyMaterial = 12;
  if (has_buymaterial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->buymaterial(), target);
  }

  // required sint32 upgradeMaterial = 13;
  if (has_upgradematerial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->upgradematerial(), target);
  }

  // optional sint32 bulletEffect = 14;
  if (has_bulleteffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->bulleteffect(), target);
  }

  // required sint32 skill = 15;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(15, this->skill(), target);
  }

  // required sint32 model = 16;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(16, this->model(), target);
  }

  // required sint32 hpFactor = 17;
  if (has_hpfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->hpfactor(), target);
  }

  // required sint32 atFactor = 18;
  if (has_atfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(18, this->atfactor(), target);
  }

  // required sint32 deFactor = 19;
  if (has_defactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(19, this->defactor(), target);
  }

  // required sint32 hpGrow = 20;
  if (has_hpgrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(20, this->hpgrow(), target);
  }

  // required sint32 atGrow = 21;
  if (has_atgrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(21, this->atgrow(), target);
  }

  // required sint32 deGrow = 22;
  if (has_degrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(22, this->degrow(), target);
  }

  // required sint32 star1ItemID = 23;
  if (has_star1itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(23, this->star1itemid(), target);
  }

  // required sint32 star1ItemNum = 24;
  if (has_star1itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(24, this->star1itemnum(), target);
  }

  // required sint32 star2ItemID = 25;
  if (has_star2itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(25, this->star2itemid(), target);
  }

  // required sint32 star2ItemNum = 26;
  if (has_star2itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(26, this->star2itemnum(), target);
  }

  // required sint32 star3ItemID = 27;
  if (has_star3itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(27, this->star3itemid(), target);
  }

  // required sint32 star3ItemNum = 28;
  if (has_star3itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(28, this->star3itemnum(), target);
  }

  // required sint32 moveSpeed = 29;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(29, this->movespeed(), target);
  }

  // required sint32 moveRange = 30;
  if (has_moverange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(30, this->moverange(), target);
  }

  // required sint32 type = 31;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(31, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required sint32 icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->icon());
    }

    // required sint32 starLv = 4;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->starlv());
    }

    // required sint32 job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->job());
    }

    // required sint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level());
    }

    // required sint32 attack = 7;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->attack());
    }

    // required sint32 defense = 8;
    if (has_defense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->defense());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required sint32 hp = 9;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->hp());
    }

    // required sint32 silverPlus = 10;
    if (has_silverplus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->silverplus());
    }

    // required sint32 unlock = 11;
    if (has_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->unlock());
    }

    // required sint32 buyMaterial = 12;
    if (has_buymaterial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->buymaterial());
    }

    // required sint32 upgradeMaterial = 13;
    if (has_upgradematerial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->upgradematerial());
    }

    // optional sint32 bulletEffect = 14;
    if (has_bulleteffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bulleteffect());
    }

    // required sint32 skill = 15;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skill());
    }

    // required sint32 model = 16;
    if (has_model()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->model());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required sint32 hpFactor = 17;
    if (has_hpfactor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->hpfactor());
    }

    // required sint32 atFactor = 18;
    if (has_atfactor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->atfactor());
    }

    // required sint32 deFactor = 19;
    if (has_defactor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->defactor());
    }

    // required sint32 hpGrow = 20;
    if (has_hpgrow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->hpgrow());
    }

    // required sint32 atGrow = 21;
    if (has_atgrow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->atgrow());
    }

    // required sint32 deGrow = 22;
    if (has_degrow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->degrow());
    }

    // required sint32 star1ItemID = 23;
    if (has_star1itemid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->star1itemid());
    }

    // required sint32 star1ItemNum = 24;
    if (has_star1itemnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->star1itemnum());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required sint32 star2ItemID = 25;
    if (has_star2itemid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->star2itemid());
    }

    // required sint32 star2ItemNum = 26;
    if (has_star2itemnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->star2itemnum());
    }

    // required sint32 star3ItemID = 27;
    if (has_star3itemid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->star3itemid());
    }

    // required sint32 star3ItemNum = 28;
    if (has_star3itemnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->star3itemnum());
    }

    // required sint32 moveSpeed = 29;
    if (has_movespeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->movespeed());
    }

    // required sint32 moveRange = 30;
    if (has_moverange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->moverange());
    }

    // required sint32 type = 31;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Role::MergeFrom(const Role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_defense()) {
      set_defense(from.defense());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_silverplus()) {
      set_silverplus(from.silverplus());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
    if (from.has_buymaterial()) {
      set_buymaterial(from.buymaterial());
    }
    if (from.has_upgradematerial()) {
      set_upgradematerial(from.upgradematerial());
    }
    if (from.has_bulleteffect()) {
      set_bulleteffect(from.bulleteffect());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hpfactor()) {
      set_hpfactor(from.hpfactor());
    }
    if (from.has_atfactor()) {
      set_atfactor(from.atfactor());
    }
    if (from.has_defactor()) {
      set_defactor(from.defactor());
    }
    if (from.has_hpgrow()) {
      set_hpgrow(from.hpgrow());
    }
    if (from.has_atgrow()) {
      set_atgrow(from.atgrow());
    }
    if (from.has_degrow()) {
      set_degrow(from.degrow());
    }
    if (from.has_star1itemid()) {
      set_star1itemid(from.star1itemid());
    }
    if (from.has_star1itemnum()) {
      set_star1itemnum(from.star1itemnum());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_star2itemid()) {
      set_star2itemid(from.star2itemid());
    }
    if (from.has_star2itemnum()) {
      set_star2itemnum(from.star2itemnum());
    }
    if (from.has_star3itemid()) {
      set_star3itemid(from.star3itemid());
    }
    if (from.has_star3itemnum()) {
      set_star3itemnum(from.star3itemnum());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_moverange()) {
      set_moverange(from.moverange());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role::CopyFrom(const Role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {
  if ((_has_bits_[0] & 0x7fffdfff) != 0x7fffdfff) return false;

  return true;
}

void Role::Swap(Role* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(starlv_, other->starlv_);
    std::swap(job_, other->job_);
    std::swap(level_, other->level_);
    std::swap(attack_, other->attack_);
    std::swap(defense_, other->defense_);
    std::swap(hp_, other->hp_);
    std::swap(silverplus_, other->silverplus_);
    std::swap(unlock_, other->unlock_);
    std::swap(buymaterial_, other->buymaterial_);
    std::swap(upgradematerial_, other->upgradematerial_);
    std::swap(bulleteffect_, other->bulleteffect_);
    std::swap(skill_, other->skill_);
    std::swap(model_, other->model_);
    std::swap(hpfactor_, other->hpfactor_);
    std::swap(atfactor_, other->atfactor_);
    std::swap(defactor_, other->defactor_);
    std::swap(hpgrow_, other->hpgrow_);
    std::swap(atgrow_, other->atgrow_);
    std::swap(degrow_, other->degrow_);
    std::swap(star1itemid_, other->star1itemid_);
    std::swap(star1itemnum_, other->star1itemnum_);
    std::swap(star2itemid_, other->star2itemid_);
    std::swap(star2itemnum_, other->star2itemnum_);
    std::swap(star3itemid_, other->star3itemid_);
    std::swap(star3itemnum_, other->star3itemnum_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(moverange_, other->moverange_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Role_descriptor_;
  metadata.reflection = Role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Roles::kListFieldNumber;
#endif  // !_MSC_VER

Roles::Roles()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Roles::InitAsDefaultInstance() {
}

Roles::Roles(const Roles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Roles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Roles::~Roles() {
  SharedDtor();
}

void Roles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Roles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Roles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Roles_descriptor_;
}

const Roles& Roles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_res_2eproto();
  return *default_instance_;
}

Roles* Roles::default_instance_ = NULL;

Roles* Roles::New() const {
  return new Roles;
}

void Roles::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Roles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .conf.Role list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Roles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .conf.Role list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Roles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .conf.Role list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Roles::ByteSize() const {
  int total_size = 0;

  // repeated .conf.Role list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Roles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Roles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Roles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Roles::MergeFrom(const Roles& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Roles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roles::CopyFrom(const Roles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roles::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void Roles::Swap(Roles* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Roles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Roles_descriptor_;
  metadata.reflection = Roles_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Award::kItemIDFieldNumber;
const int Award::kCountFieldNumber;
const int Award::kWeightFieldNumber;
#endif  // !_MSC_VER

Award::Award()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Award::InitAsDefaultInstance() {
}

Award::Award(const Award& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Award::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  count_ = 0;
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Award::~Award() {
  SharedDtor();
}

void Award::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Award::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Award::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Award_descriptor_;
}

const Award& Award::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_res_2eproto();
  return *default_instance_;
}

Award* Award::default_instance_ = NULL;

Award* Award::New() const {
  return new Award;
}

void Award::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    count_ = 0;
    weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Award::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required sint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weight;
        break;
      }

      // required sint32 weight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Award::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->itemid(), output);
  }

  // required sint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->count(), output);
  }

  // required sint32 weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Award::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->itemid(), target);
  }

  // required sint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->count(), target);
  }

  // required sint32 weight = 3;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Award::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->itemid());
    }

    // required sint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->count());
    }

    // required sint32 weight = 3;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->weight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Award::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Award* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Award*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Award::MergeFrom(const Award& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Award::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Award::CopyFrom(const Award& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Award::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Award::Swap(Award* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Award::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Award_descriptor_;
  metadata.reflection = Award_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLevel::kIdFieldNumber;
const int PlayerLevel::kExpFieldNumber;
#endif  // !_MSC_VER

PlayerLevel::PlayerLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLevel::InitAsDefaultInstance() {
}

PlayerLevel::PlayerLevel(const PlayerLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLevel::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLevel::~PlayerLevel() {
  SharedDtor();
}

void PlayerLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLevel_descriptor_;
}

const PlayerLevel& PlayerLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_res_2eproto();
  return *default_instance_;
}

PlayerLevel* PlayerLevel::default_instance_ = NULL;

PlayerLevel* PlayerLevel::New() const {
  return new PlayerLevel;
}

void PlayerLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // required sint32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // required sint32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // required sint32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // required sint32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLevel::MergeFrom(const PlayerLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLevel::CopyFrom(const PlayerLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlayerLevel::Swap(PlayerLevel* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLevel_descriptor_;
  metadata.reflection = PlayerLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLevels::kListFieldNumber;
#endif  // !_MSC_VER

PlayerLevels::PlayerLevels()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLevels::InitAsDefaultInstance() {
}

PlayerLevels::PlayerLevels(const PlayerLevels& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLevels::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLevels::~PlayerLevels() {
  SharedDtor();
}

void PlayerLevels::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLevels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLevels::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLevels_descriptor_;
}

const PlayerLevels& PlayerLevels::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_res_2eproto();
  return *default_instance_;
}

PlayerLevels* PlayerLevels::default_instance_ = NULL;

PlayerLevels* PlayerLevels::New() const {
  return new PlayerLevels;
}

void PlayerLevels::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLevels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .conf.PlayerLevel list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLevels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .conf.PlayerLevel list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLevels::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .conf.PlayerLevel list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLevels::ByteSize() const {
  int total_size = 0;

  // repeated .conf.PlayerLevel list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLevels::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLevels* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLevels*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLevels::MergeFrom(const PlayerLevels& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLevels::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLevels::CopyFrom(const PlayerLevels& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLevels::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerLevels::Swap(PlayerLevels* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLevels::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLevels_descriptor_;
  metadata.reflection = PlayerLevels_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CopyInfo::kIdFieldNumber;
const int CopyInfo::kChapterIDFieldNumber;
const int CopyInfo::kChapterNameFieldNumber;
const int CopyInfo::kMissionNameFieldNumber;
const int CopyInfo::kMissionTypeFieldNumber;
const int CopyInfo::kMissionDescFieldNumber;
const int CopyInfo::kPlayerLevelFieldNumber;
const int CopyInfo::kPreMissionFieldNumber;
const int CopyInfo::kRoleIDLimitFieldNumber;
const int CopyInfo::kTaskLimitFieldNumber;
const int CopyInfo::kSilverAwardFieldNumber;
const int CopyInfo::kExpAwardFieldNumber;
const int CopyInfo::kAwardListFieldNumber;
#endif  // !_MSC_VER

CopyInfo::CopyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CopyInfo::InitAsDefaultInstance() {
}

CopyInfo::CopyInfo(const CopyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CopyInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  chapterid_ = 0;
  chaptername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  missionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  missiontype_ = 0;
  missiondesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerlevel_ = 0;
  premission_ = 0;
  roleidlimit_ = 0;
  tasklimit_ = 0;
  silveraward_ = 0;
  expaward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CopyInfo::~CopyInfo() {
  SharedDtor();
}

void CopyInfo::SharedDtor() {
  if (chaptername_ != &::google::protobuf::internal::kEmptyString) {
    delete chaptername_;
  }
  if (missionname_ != &::google::protobuf::internal::kEmptyString) {
    delete missionname_;
  }
  if (missiondesc_ != &::google::protobuf::internal::kEmptyString) {
    delete missiondesc_;
  }
  if (this != default_instance_) {
  }
}

void CopyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CopyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CopyInfo_descriptor_;
}

const CopyInfo& CopyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_res_2eproto();
  return *default_instance_;
}

CopyInfo* CopyInfo::default_instance_ = NULL;

CopyInfo* CopyInfo::New() const {
  return new CopyInfo;
}

void CopyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    chapterid_ = 0;
    if (has_chaptername()) {
      if (chaptername_ != &::google::protobuf::internal::kEmptyString) {
        chaptername_->clear();
      }
    }
    if (has_missionname()) {
      if (missionname_ != &::google::protobuf::internal::kEmptyString) {
        missionname_->clear();
      }
    }
    missiontype_ = 0;
    if (has_missiondesc()) {
      if (missiondesc_ != &::google::protobuf::internal::kEmptyString) {
        missiondesc_->clear();
      }
    }
    playerlevel_ = 0;
    premission_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    roleidlimit_ = 0;
    tasklimit_ = 0;
    silveraward_ = 0;
    expaward_ = 0;
  }
  awardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CopyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chapterID;
        break;
      }

      // required sint32 chapterID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chapterName;
        break;
      }

      // required string chapterName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chapterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chaptername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chaptername().data(), this->chaptername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_missionName;
        break;
      }

      // required string missionName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_missionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->missionname().data(), this->missionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_missionType;
        break;
      }

      // required sint32 missionType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &missiontype_)));
          set_has_missiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_missionDesc;
        break;
      }

      // required string missionDesc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missionDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_missiondesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->missiondesc().data(), this->missiondesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_playerLevel;
        break;
      }

      // required sint32 playerLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerlevel_)));
          set_has_playerlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_preMission;
        break;
      }

      // required sint32 preMission = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preMission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &premission_)));
          set_has_premission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_roleIDLimit;
        break;
      }

      // required sint32 roleIDLimit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleIDLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &roleidlimit_)));
          set_has_roleidlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_taskLimit;
        break;
      }

      // required sint32 taskLimit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tasklimit_)));
          set_has_tasklimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_silverAward;
        break;
      }

      // required sint32 silverAward = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silverAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &silveraward_)));
          set_has_silveraward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_expAward;
        break;
      }

      // required sint32 expAward = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &expaward_)));
          set_has_expaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_awardList;
        break;
      }

      // repeated .conf.Award awardList = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_awardList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CopyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // required sint32 chapterID = 2;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->chapterid(), output);
  }

  // required string chapterName = 3;
  if (has_chaptername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chaptername().data(), this->chaptername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->chaptername(), output);
  }

  // required string missionName = 4;
  if (has_missionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->missionname().data(), this->missionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->missionname(), output);
  }

  // required sint32 missionType = 5;
  if (has_missiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->missiontype(), output);
  }

  // required string missionDesc = 6;
  if (has_missiondesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->missiondesc().data(), this->missiondesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->missiondesc(), output);
  }

  // required sint32 playerLevel = 7;
  if (has_playerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->playerlevel(), output);
  }

  // required sint32 preMission = 8;
  if (has_premission()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->premission(), output);
  }

  // required sint32 roleIDLimit = 9;
  if (has_roleidlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->roleidlimit(), output);
  }

  // required sint32 taskLimit = 10;
  if (has_tasklimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->tasklimit(), output);
  }

  // required sint32 silverAward = 11;
  if (has_silveraward()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->silveraward(), output);
  }

  // required sint32 expAward = 12;
  if (has_expaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->expaward(), output);
  }

  // repeated .conf.Award awardList = 13;
  for (int i = 0; i < this->awardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->awardlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CopyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // required sint32 chapterID = 2;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->chapterid(), target);
  }

  // required string chapterName = 3;
  if (has_chaptername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chaptername().data(), this->chaptername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chaptername(), target);
  }

  // required string missionName = 4;
  if (has_missionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->missionname().data(), this->missionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->missionname(), target);
  }

  // required sint32 missionType = 5;
  if (has_missiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->missiontype(), target);
  }

  // required string missionDesc = 6;
  if (has_missiondesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->missiondesc().data(), this->missiondesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->missiondesc(), target);
  }

  // required sint32 playerLevel = 7;
  if (has_playerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->playerlevel(), target);
  }

  // required sint32 preMission = 8;
  if (has_premission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->premission(), target);
  }

  // required sint32 roleIDLimit = 9;
  if (has_roleidlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->roleidlimit(), target);
  }

  // required sint32 taskLimit = 10;
  if (has_tasklimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->tasklimit(), target);
  }

  // required sint32 silverAward = 11;
  if (has_silveraward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->silveraward(), target);
  }

  // required sint32 expAward = 12;
  if (has_expaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->expaward(), target);
  }

  // repeated .conf.Award awardList = 13;
  for (int i = 0; i < this->awardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->awardlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CopyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // required sint32 chapterID = 2;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->chapterid());
    }

    // required string chapterName = 3;
    if (has_chaptername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chaptername());
    }

    // required string missionName = 4;
    if (has_missionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->missionname());
    }

    // required sint32 missionType = 5;
    if (has_missiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->missiontype());
    }

    // required string missionDesc = 6;
    if (has_missiondesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->missiondesc());
    }

    // required sint32 playerLevel = 7;
    if (has_playerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerlevel());
    }

    // required sint32 preMission = 8;
    if (has_premission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->premission());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required sint32 roleIDLimit = 9;
    if (has_roleidlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->roleidlimit());
    }

    // required sint32 taskLimit = 10;
    if (has_tasklimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tasklimit());
    }

    // required sint32 silverAward = 11;
    if (has_silveraward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->silveraward());
    }

    // required sint32 expAward = 12;
    if (has_expaward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->expaward());
    }

  }
  // repeated .conf.Award awardList = 13;
  total_size += 1 * this->awardlist_size();
  for (int i = 0; i < this->awardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CopyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CopyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CopyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CopyInfo::MergeFrom(const CopyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardlist_.MergeFrom(from.awardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
    if (from.has_chaptername()) {
      set_chaptername(from.chaptername());
    }
    if (from.has_missionname()) {
      set_missionname(from.missionname());
    }
    if (from.has_missiontype()) {
      set_missiontype(from.missiontype());
    }
    if (from.has_missiondesc()) {
      set_missiondesc(from.missiondesc());
    }
    if (from.has_playerlevel()) {
      set_playerlevel(from.playerlevel());
    }
    if (from.has_premission()) {
      set_premission(from.premission());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roleidlimit()) {
      set_roleidlimit(from.roleidlimit());
    }
    if (from.has_tasklimit()) {
      set_tasklimit(from.tasklimit());
    }
    if (from.has_silveraward()) {
      set_silveraward(from.silveraward());
    }
    if (from.has_expaward()) {
      set_expaward(from.expaward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CopyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CopyInfo::CopyFrom(const CopyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  for (int i = 0; i < awardlist_size(); i++) {
    if (!this->awardlist(i).IsInitialized()) return false;
  }
  return true;
}

void CopyInfo::Swap(CopyInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(chapterid_, other->chapterid_);
    std::swap(chaptername_, other->chaptername_);
    std::swap(missionname_, other->missionname_);
    std::swap(missiontype_, other->missiontype_);
    std::swap(missiondesc_, other->missiondesc_);
    std::swap(playerlevel_, other->playerlevel_);
    std::swap(premission_, other->premission_);
    std::swap(roleidlimit_, other->roleidlimit_);
    std::swap(tasklimit_, other->tasklimit_);
    std::swap(silveraward_, other->silveraward_);
    std::swap(expaward_, other->expaward_);
    awardlist_.Swap(&other->awardlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CopyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CopyInfo_descriptor_;
  metadata.reflection = CopyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CopyInfos::kListFieldNumber;
#endif  // !_MSC_VER

CopyInfos::CopyInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CopyInfos::InitAsDefaultInstance() {
}

CopyInfos::CopyInfos(const CopyInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CopyInfos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CopyInfos::~CopyInfos() {
  SharedDtor();
}

void CopyInfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CopyInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CopyInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CopyInfos_descriptor_;
}

const CopyInfos& CopyInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_res_2eproto();
  return *default_instance_;
}

CopyInfos* CopyInfos::default_instance_ = NULL;

CopyInfos* CopyInfos::New() const {
  return new CopyInfos;
}

void CopyInfos::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CopyInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .conf.CopyInfo list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CopyInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .conf.CopyInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CopyInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .conf.CopyInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CopyInfos::ByteSize() const {
  int total_size = 0;

  // repeated .conf.CopyInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CopyInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CopyInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CopyInfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CopyInfos::MergeFrom(const CopyInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CopyInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CopyInfos::CopyFrom(const CopyInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyInfos::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void CopyInfos::Swap(CopyInfos* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CopyInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CopyInfos_descriptor_;
  metadata.reflection = CopyInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleLevel::kIdFieldNumber;
const int RoleLevel::kSilverFieldNumber;
const int RoleLevel::kGoldFieldNumber;
#endif  // !_MSC_VER

RoleLevel::RoleLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleLevel::InitAsDefaultInstance() {
}

RoleLevel::RoleLevel(const RoleLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleLevel::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  silver_ = 0;
  gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleLevel::~RoleLevel() {
  SharedDtor();
}

void RoleLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleLevel_descriptor_;
}

const RoleLevel& RoleLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_res_2eproto();
  return *default_instance_;
}

RoleLevel* RoleLevel::default_instance_ = NULL;

RoleLevel* RoleLevel::New() const {
  return new RoleLevel;
}

void RoleLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    silver_ = 0;
    gold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_silver;
        break;
      }

      // required sint32 silver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &silver_)));
          set_has_silver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // required sint32 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // required sint32 silver = 2;
  if (has_silver()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->silver(), output);
  }

  // required sint32 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // required sint32 silver = 2;
  if (has_silver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->silver(), target);
  }

  // required sint32 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // required sint32 silver = 2;
    if (has_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->silver());
    }

    // required sint32 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleLevel::MergeFrom(const RoleLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_silver()) {
      set_silver(from.silver());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleLevel::CopyFrom(const RoleLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RoleLevel::Swap(RoleLevel* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(silver_, other->silver_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleLevel_descriptor_;
  metadata.reflection = RoleLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleLevels::kListFieldNumber;
#endif  // !_MSC_VER

RoleLevels::RoleLevels()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleLevels::InitAsDefaultInstance() {
}

RoleLevels::RoleLevels(const RoleLevels& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleLevels::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleLevels::~RoleLevels() {
  SharedDtor();
}

void RoleLevels::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleLevels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleLevels::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleLevels_descriptor_;
}

const RoleLevels& RoleLevels::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_res_2eproto();
  return *default_instance_;
}

RoleLevels* RoleLevels::default_instance_ = NULL;

RoleLevels* RoleLevels::New() const {
  return new RoleLevels;
}

void RoleLevels::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleLevels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .conf.RoleLevel list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleLevels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .conf.RoleLevel list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleLevels::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .conf.RoleLevel list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleLevels::ByteSize() const {
  int total_size = 0;

  // repeated .conf.RoleLevel list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleLevels::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleLevels* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleLevels*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleLevels::MergeFrom(const RoleLevels& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleLevels::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleLevels::CopyFrom(const RoleLevels& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleLevels::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleLevels::Swap(RoleLevels* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleLevels::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleLevels_descriptor_;
  metadata.reflection = RoleLevels_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerBirth::kIdFieldNumber;
const int PlayerBirth::kRoleIDFieldNumber;
const int PlayerBirth::kPassIDFieldNumber;
const int PlayerBirth::kResFieldNumber;
#endif  // !_MSC_VER

PlayerBirth::PlayerBirth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerBirth::InitAsDefaultInstance() {
}

PlayerBirth::PlayerBirth(const PlayerBirth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerBirth::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  roleid_ = 0;
  passid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerBirth::~PlayerBirth() {
  SharedDtor();
}

void PlayerBirth::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerBirth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerBirth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerBirth_descriptor_;
}

const PlayerBirth& PlayerBirth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_res_2eproto();
  return *default_instance_;
}

PlayerBirth* PlayerBirth::default_instance_ = NULL;

PlayerBirth* PlayerBirth::New() const {
  return new PlayerBirth;
}

void PlayerBirth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    roleid_ = 0;
    passid_ = 0;
  }
  res_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerBirth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleID;
        break;
      }

      // required sint32 roleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_passID;
        break;
      }

      // required sint32 passID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &passid_)));
          set_has_passid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_res;
        break;
      }

      // repeated .conf.ResDes res = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_res;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerBirth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // required sint32 roleID = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->roleid(), output);
  }

  // required sint32 passID = 3;
  if (has_passid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->passid(), output);
  }

  // repeated .conf.ResDes res = 4;
  for (int i = 0; i < this->res_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->res(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerBirth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // required sint32 roleID = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->roleid(), target);
  }

  // required sint32 passID = 3;
  if (has_passid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->passid(), target);
  }

  // repeated .conf.ResDes res = 4;
  for (int i = 0; i < this->res_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->res(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerBirth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // required sint32 roleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->roleid());
    }

    // required sint32 passID = 3;
    if (has_passid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->passid());
    }

  }
  // repeated .conf.ResDes res = 4;
  total_size += 1 * this->res_size();
  for (int i = 0; i < this->res_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->res(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerBirth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerBirth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerBirth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerBirth::MergeFrom(const PlayerBirth& from) {
  GOOGLE_CHECK_NE(&from, this);
  res_.MergeFrom(from.res_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_passid()) {
      set_passid(from.passid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerBirth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBirth::CopyFrom(const PlayerBirth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBirth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < res_size(); i++) {
    if (!this->res(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerBirth::Swap(PlayerBirth* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(roleid_, other->roleid_);
    std::swap(passid_, other->passid_);
    res_.Swap(&other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerBirth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerBirth_descriptor_;
  metadata.reflection = PlayerBirth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerBirths::kListFieldNumber;
#endif  // !_MSC_VER

PlayerBirths::PlayerBirths()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerBirths::InitAsDefaultInstance() {
}

PlayerBirths::PlayerBirths(const PlayerBirths& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerBirths::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerBirths::~PlayerBirths() {
  SharedDtor();
}

void PlayerBirths::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerBirths::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerBirths::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerBirths_descriptor_;
}

const PlayerBirths& PlayerBirths::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_res_2eproto();
  return *default_instance_;
}

PlayerBirths* PlayerBirths::default_instance_ = NULL;

PlayerBirths* PlayerBirths::New() const {
  return new PlayerBirths;
}

void PlayerBirths::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerBirths::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .conf.PlayerBirth list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerBirths::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .conf.PlayerBirth list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerBirths::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .conf.PlayerBirth list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerBirths::ByteSize() const {
  int total_size = 0;

  // repeated .conf.PlayerBirth list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerBirths::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerBirths* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerBirths*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerBirths::MergeFrom(const PlayerBirths& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerBirths::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBirths::CopyFrom(const PlayerBirths& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBirths::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerBirths::Swap(PlayerBirths* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerBirths::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerBirths_descriptor_;
  metadata.reflection = PlayerBirths_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace conf

// @@protoc_insertion_point(global_scope)
