// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_msg_struct.proto

#ifndef PROTOBUF_base_5fmsg_5fstruct_2eproto__INCLUDED
#define PROTOBUF_base_5fmsg_5fstruct_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace net {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

class base_info;
class svr_info;

// ===================================================================

class base_info : public ::google::protobuf::Message {
 public:
  base_info();
  virtual ~base_info();

  base_info(const base_info& from);

  inline base_info& operator=(const base_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const base_info& default_instance();

  void Swap(base_info* other);

  // implements Message ----------------------------------------------

  base_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const base_info& from);
  void MergeFrom(const base_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional int64 coin = 5;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 5;
  inline ::google::protobuf::int64 coin() const;
  inline void set_coin(::google::protobuf::int64 value);

  // optional uint32 vip = 7;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 7;
  inline ::google::protobuf::uint32 vip() const;
  inline void set_vip(::google::protobuf::uint32 value);

  // optional uint32 clogin = 9;
  inline bool has_clogin() const;
  inline void clear_clogin();
  static const int kCloginFieldNumber = 9;
  inline ::google::protobuf::uint32 clogin() const;
  inline void set_clogin(::google::protobuf::uint32 value);

  // optional uint32 weeklogin = 10;
  inline bool has_weeklogin() const;
  inline void clear_weeklogin();
  static const int kWeekloginFieldNumber = 10;
  inline ::google::protobuf::uint32 weeklogin() const;
  inline void set_weeklogin(::google::protobuf::uint32 value);

  // optional uint32 login_ip = 14;
  inline bool has_login_ip() const;
  inline void clear_login_ip();
  static const int kLoginIpFieldNumber = 14;
  inline ::google::protobuf::uint32 login_ip() const;
  inline void set_login_ip(::google::protobuf::uint32 value);

  // optional uint32 all_login_days = 15;
  inline bool has_all_login_days() const;
  inline void clear_all_login_days();
  static const int kAllLoginDaysFieldNumber = 15;
  inline ::google::protobuf::uint32 all_login_days() const;
  inline void set_all_login_days(::google::protobuf::uint32 value);

  // optional uint32 offline_time = 16;
  inline bool has_offline_time() const;
  inline void clear_offline_time();
  static const int kOfflineTimeFieldNumber = 16;
  inline ::google::protobuf::uint32 offline_time() const;
  inline void set_offline_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.base_info)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_clogin();
  inline void clear_has_clogin();
  inline void set_has_weeklogin();
  inline void clear_has_weeklogin();
  inline void set_has_login_ip();
  inline void clear_has_login_ip();
  inline void set_has_all_login_days();
  inline void clear_has_all_login_days();
  inline void set_has_offline_time();
  inline void clear_has_offline_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::int64 coin_;
  ::google::protobuf::uint32 vip_;
  ::google::protobuf::uint32 clogin_;
  ::google::protobuf::uint32 weeklogin_;
  ::google::protobuf::uint32 login_ip_;
  ::google::protobuf::uint32 all_login_days_;
  ::google::protobuf::uint32 offline_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static base_info* default_instance_;
};
// -------------------------------------------------------------------

class svr_info : public ::google::protobuf::Message {
 public:
  svr_info();
  virtual ~svr_info();

  svr_info(const svr_info& from);

  inline svr_info& operator=(const svr_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const svr_info& default_instance();

  void Swap(svr_info* other);

  // implements Message ----------------------------------------------

  svr_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const svr_info& from);
  void MergeFrom(const svr_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrid = 1;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvridFieldNumber = 1;
  inline ::google::protobuf::uint32 svrid() const;
  inline void set_svrid(::google::protobuf::uint32 value);

  // optional uint32 svr_type = 2;
  inline bool has_svr_type() const;
  inline void clear_svr_type();
  static const int kSvrTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 svr_type() const;
  inline void set_svr_type(::google::protobuf::uint32 value);

  // optional uint32 game_type = 3;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 game_type() const;
  inline void set_game_type(::google::protobuf::uint32 value);

  // optional uint32 game_subtype = 4;
  inline bool has_game_subtype() const;
  inline void clear_game_subtype();
  static const int kGameSubtypeFieldNumber = 4;
  inline ::google::protobuf::uint32 game_subtype() const;
  inline void set_game_subtype(::google::protobuf::uint32 value);

  // optional bytes uuid = 5;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 5;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:net.svr_info)
 private:
  inline void set_has_svrid();
  inline void clear_has_svrid();
  inline void set_has_svr_type();
  inline void clear_has_svr_type();
  inline void set_has_game_type();
  inline void clear_has_game_type();
  inline void set_has_game_subtype();
  inline void clear_has_game_subtype();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svrid_;
  ::google::protobuf::uint32 svr_type_;
  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 game_subtype_;
  ::std::string* uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static svr_info* default_instance_;
};
// ===================================================================


// ===================================================================

// base_info

// optional uint32 uid = 1;
inline bool base_info::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void base_info::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void base_info::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void base_info::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 base_info::uid() const {
  return uid_;
}
inline void base_info::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional bytes name = 2;
inline bool base_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void base_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void base_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void base_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& base_info::name() const {
  return *name_;
}
inline void base_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void base_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void base_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* base_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* base_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void base_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sex = 3;
inline bool base_info::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void base_info::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void base_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void base_info::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 base_info::sex() const {
  return sex_;
}
inline void base_info::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int64 coin = 5;
inline bool base_info::has_coin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void base_info::set_has_coin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void base_info::clear_has_coin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void base_info::clear_coin() {
  coin_ = GOOGLE_LONGLONG(0);
  clear_has_coin();
}
inline ::google::protobuf::int64 base_info::coin() const {
  return coin_;
}
inline void base_info::set_coin(::google::protobuf::int64 value) {
  set_has_coin();
  coin_ = value;
}

// optional uint32 vip = 7;
inline bool base_info::has_vip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void base_info::set_has_vip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void base_info::clear_has_vip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void base_info::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
inline ::google::protobuf::uint32 base_info::vip() const {
  return vip_;
}
inline void base_info::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
}

// optional uint32 clogin = 9;
inline bool base_info::has_clogin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void base_info::set_has_clogin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void base_info::clear_has_clogin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void base_info::clear_clogin() {
  clogin_ = 0u;
  clear_has_clogin();
}
inline ::google::protobuf::uint32 base_info::clogin() const {
  return clogin_;
}
inline void base_info::set_clogin(::google::protobuf::uint32 value) {
  set_has_clogin();
  clogin_ = value;
}

// optional uint32 weeklogin = 10;
inline bool base_info::has_weeklogin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void base_info::set_has_weeklogin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void base_info::clear_has_weeklogin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void base_info::clear_weeklogin() {
  weeklogin_ = 0u;
  clear_has_weeklogin();
}
inline ::google::protobuf::uint32 base_info::weeklogin() const {
  return weeklogin_;
}
inline void base_info::set_weeklogin(::google::protobuf::uint32 value) {
  set_has_weeklogin();
  weeklogin_ = value;
}

// optional uint32 login_ip = 14;
inline bool base_info::has_login_ip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void base_info::set_has_login_ip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void base_info::clear_has_login_ip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void base_info::clear_login_ip() {
  login_ip_ = 0u;
  clear_has_login_ip();
}
inline ::google::protobuf::uint32 base_info::login_ip() const {
  return login_ip_;
}
inline void base_info::set_login_ip(::google::protobuf::uint32 value) {
  set_has_login_ip();
  login_ip_ = value;
}

// optional uint32 all_login_days = 15;
inline bool base_info::has_all_login_days() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void base_info::set_has_all_login_days() {
  _has_bits_[0] |= 0x00000100u;
}
inline void base_info::clear_has_all_login_days() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void base_info::clear_all_login_days() {
  all_login_days_ = 0u;
  clear_has_all_login_days();
}
inline ::google::protobuf::uint32 base_info::all_login_days() const {
  return all_login_days_;
}
inline void base_info::set_all_login_days(::google::protobuf::uint32 value) {
  set_has_all_login_days();
  all_login_days_ = value;
}

// optional uint32 offline_time = 16;
inline bool base_info::has_offline_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void base_info::set_has_offline_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void base_info::clear_has_offline_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void base_info::clear_offline_time() {
  offline_time_ = 0u;
  clear_has_offline_time();
}
inline ::google::protobuf::uint32 base_info::offline_time() const {
  return offline_time_;
}
inline void base_info::set_offline_time(::google::protobuf::uint32 value) {
  set_has_offline_time();
  offline_time_ = value;
}

// -------------------------------------------------------------------

// svr_info

// optional uint32 svrid = 1;
inline bool svr_info::has_svrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void svr_info::set_has_svrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void svr_info::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void svr_info::clear_svrid() {
  svrid_ = 0u;
  clear_has_svrid();
}
inline ::google::protobuf::uint32 svr_info::svrid() const {
  return svrid_;
}
inline void svr_info::set_svrid(::google::protobuf::uint32 value) {
  set_has_svrid();
  svrid_ = value;
}

// optional uint32 svr_type = 2;
inline bool svr_info::has_svr_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void svr_info::set_has_svr_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void svr_info::clear_has_svr_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void svr_info::clear_svr_type() {
  svr_type_ = 0u;
  clear_has_svr_type();
}
inline ::google::protobuf::uint32 svr_info::svr_type() const {
  return svr_type_;
}
inline void svr_info::set_svr_type(::google::protobuf::uint32 value) {
  set_has_svr_type();
  svr_type_ = value;
}

// optional uint32 game_type = 3;
inline bool svr_info::has_game_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void svr_info::set_has_game_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void svr_info::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void svr_info::clear_game_type() {
  game_type_ = 0u;
  clear_has_game_type();
}
inline ::google::protobuf::uint32 svr_info::game_type() const {
  return game_type_;
}
inline void svr_info::set_game_type(::google::protobuf::uint32 value) {
  set_has_game_type();
  game_type_ = value;
}

// optional uint32 game_subtype = 4;
inline bool svr_info::has_game_subtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void svr_info::set_has_game_subtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void svr_info::clear_has_game_subtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void svr_info::clear_game_subtype() {
  game_subtype_ = 0u;
  clear_has_game_subtype();
}
inline ::google::protobuf::uint32 svr_info::game_subtype() const {
  return game_subtype_;
}
inline void svr_info::set_game_subtype(::google::protobuf::uint32 value) {
  set_has_game_subtype();
  game_subtype_ = value;
}

// optional bytes uuid = 5;
inline bool svr_info::has_uuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void svr_info::set_has_uuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void svr_info::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void svr_info::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& svr_info::uuid() const {
  return *uuid_;
}
inline void svr_info::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void svr_info::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void svr_info::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* svr_info::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* svr_info::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void svr_info::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_5fmsg_5fstruct_2eproto__INCLUDED
