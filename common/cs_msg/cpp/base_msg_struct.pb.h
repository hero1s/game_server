// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_msg_struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_5fmsg_5fstruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_5fmsg_5fstruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_5fmsg_5fstruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_5fmsg_5fstruct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_5fmsg_5fstruct_2eproto;
namespace net {
class base_info;
class base_infoDefaultTypeInternal;
extern base_infoDefaultTypeInternal _base_info_default_instance_;
class svr_info;
class svr_infoDefaultTypeInternal;
extern svr_infoDefaultTypeInternal _svr_info_default_instance_;
}  // namespace net
PROTOBUF_NAMESPACE_OPEN
template<> ::net::base_info* Arena::CreateMaybeMessage<::net::base_info>(Arena*);
template<> ::net::svr_info* Arena::CreateMaybeMessage<::net::svr_info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace net {

// ===================================================================

class base_info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.base_info) */ {
 public:
  base_info();
  virtual ~base_info();

  base_info(const base_info& from);
  base_info(base_info&& from) noexcept
    : base_info() {
    *this = ::std::move(from);
  }

  inline base_info& operator=(const base_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline base_info& operator=(base_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const base_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const base_info* internal_default_instance() {
    return reinterpret_cast<const base_info*>(
               &_base_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(base_info& a, base_info& b) {
    a.Swap(&b);
  }
  inline void Swap(base_info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline base_info* New() const final {
    return CreateMaybeMessage<base_info>(nullptr);
  }

  base_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<base_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const base_info& from);
  void MergeFrom(const base_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(base_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.base_info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fmsg_5fstruct_2eproto);
    return ::descriptor_table_base_5fmsg_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUidFieldNumber = 1,
    kSexFieldNumber = 3,
    kCoinFieldNumber = 5,
    kVipFieldNumber = 7,
    kCloginFieldNumber = 9,
    kWeekloginFieldNumber = 10,
    kLoginIpFieldNumber = 14,
    kAllLoginDaysFieldNumber = 15,
    kOfflineTimeFieldNumber = 16,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sex = 3;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::uint32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 coin = 5;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::int64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 vip = 7;
  void clear_vip();
  ::PROTOBUF_NAMESPACE_ID::uint32 vip() const;
  void set_vip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vip() const;
  void _internal_set_vip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 clogin = 9;
  void clear_clogin();
  ::PROTOBUF_NAMESPACE_ID::uint32 clogin() const;
  void set_clogin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_clogin() const;
  void _internal_set_clogin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 weeklogin = 10;
  void clear_weeklogin();
  ::PROTOBUF_NAMESPACE_ID::uint32 weeklogin() const;
  void set_weeklogin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_weeklogin() const;
  void _internal_set_weeklogin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 login_ip = 14;
  void clear_login_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 login_ip() const;
  void set_login_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_login_ip() const;
  void _internal_set_login_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 all_login_days = 15;
  void clear_all_login_days();
  ::PROTOBUF_NAMESPACE_ID::uint32 all_login_days() const;
  void set_all_login_days(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_all_login_days() const;
  void _internal_set_all_login_days(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 offline_time = 16;
  void clear_offline_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 offline_time() const;
  void set_offline_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offline_time() const;
  void _internal_set_offline_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.base_info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sex_;
  ::PROTOBUF_NAMESPACE_ID::int64 coin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 clogin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 weeklogin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 login_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 all_login_days_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offline_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fmsg_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class svr_info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.svr_info) */ {
 public:
  svr_info();
  virtual ~svr_info();

  svr_info(const svr_info& from);
  svr_info(svr_info&& from) noexcept
    : svr_info() {
    *this = ::std::move(from);
  }

  inline svr_info& operator=(const svr_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline svr_info& operator=(svr_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const svr_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const svr_info* internal_default_instance() {
    return reinterpret_cast<const svr_info*>(
               &_svr_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(svr_info& a, svr_info& b) {
    a.Swap(&b);
  }
  inline void Swap(svr_info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline svr_info* New() const final {
    return CreateMaybeMessage<svr_info>(nullptr);
  }

  svr_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<svr_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const svr_info& from);
  void MergeFrom(const svr_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(svr_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.svr_info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fmsg_5fstruct_2eproto);
    return ::descriptor_table_base_5fmsg_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 5,
    kSvridFieldNumber = 1,
    kSvrTypeFieldNumber = 2,
    kGameTypeFieldNumber = 3,
    kGameSubtypeFieldNumber = 4,
  };
  // bytes uuid = 5;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // uint32 svrid = 1;
  void clear_svrid();
  ::PROTOBUF_NAMESPACE_ID::uint32 svrid() const;
  void set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_svrid() const;
  void _internal_set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 svr_type = 2;
  void clear_svr_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 svr_type() const;
  void set_svr_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_svr_type() const;
  void _internal_set_svr_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 game_type = 3;
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 game_subtype = 4;
  void clear_game_subtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_subtype() const;
  void set_game_subtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_subtype() const;
  void _internal_set_game_subtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.svr_info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 svrid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 svr_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_subtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fmsg_5fstruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// base_info

// uint32 uid = 1;
inline void base_info::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::uid() const {
  // @@protoc_insertion_point(field_get:net.base_info.uid)
  return _internal_uid();
}
inline void base_info::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void base_info::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.base_info.uid)
}

// bytes name = 2;
inline void base_info::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& base_info::name() const {
  // @@protoc_insertion_point(field_get:net.base_info.name)
  return _internal_name();
}
inline void base_info::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:net.base_info.name)
}
inline std::string* base_info::mutable_name() {
  // @@protoc_insertion_point(field_mutable:net.base_info.name)
  return _internal_mutable_name();
}
inline const std::string& base_info::_internal_name() const {
  return name_.GetNoArena();
}
inline void base_info::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void base_info::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.base_info.name)
}
inline void base_info::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.base_info.name)
}
inline void base_info::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.base_info.name)
}
inline std::string* base_info::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* base_info::release_name() {
  // @@protoc_insertion_point(field_release:net.base_info.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void base_info::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:net.base_info.name)
}

// uint32 sex = 3;
inline void base_info::clear_sex() {
  sex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::sex() const {
  // @@protoc_insertion_point(field_get:net.base_info.sex)
  return _internal_sex();
}
inline void base_info::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sex_ = value;
}
inline void base_info::set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:net.base_info.sex)
}

// int64 coin = 5;
inline void base_info::clear_coin() {
  coin_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 base_info::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 base_info::coin() const {
  // @@protoc_insertion_point(field_get:net.base_info.coin)
  return _internal_coin();
}
inline void base_info::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  coin_ = value;
}
inline void base_info::set_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:net.base_info.coin)
}

// uint32 vip = 7;
inline void base_info::clear_vip() {
  vip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::_internal_vip() const {
  return vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::vip() const {
  // @@protoc_insertion_point(field_get:net.base_info.vip)
  return _internal_vip();
}
inline void base_info::_internal_set_vip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vip_ = value;
}
inline void base_info::set_vip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:net.base_info.vip)
}

// uint32 clogin = 9;
inline void base_info::clear_clogin() {
  clogin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::_internal_clogin() const {
  return clogin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::clogin() const {
  // @@protoc_insertion_point(field_get:net.base_info.clogin)
  return _internal_clogin();
}
inline void base_info::_internal_set_clogin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  clogin_ = value;
}
inline void base_info::set_clogin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_clogin(value);
  // @@protoc_insertion_point(field_set:net.base_info.clogin)
}

// uint32 weeklogin = 10;
inline void base_info::clear_weeklogin() {
  weeklogin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::_internal_weeklogin() const {
  return weeklogin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::weeklogin() const {
  // @@protoc_insertion_point(field_get:net.base_info.weeklogin)
  return _internal_weeklogin();
}
inline void base_info::_internal_set_weeklogin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  weeklogin_ = value;
}
inline void base_info::set_weeklogin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_weeklogin(value);
  // @@protoc_insertion_point(field_set:net.base_info.weeklogin)
}

// uint32 login_ip = 14;
inline void base_info::clear_login_ip() {
  login_ip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::_internal_login_ip() const {
  return login_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::login_ip() const {
  // @@protoc_insertion_point(field_get:net.base_info.login_ip)
  return _internal_login_ip();
}
inline void base_info::_internal_set_login_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  login_ip_ = value;
}
inline void base_info::set_login_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_login_ip(value);
  // @@protoc_insertion_point(field_set:net.base_info.login_ip)
}

// uint32 all_login_days = 15;
inline void base_info::clear_all_login_days() {
  all_login_days_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::_internal_all_login_days() const {
  return all_login_days_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::all_login_days() const {
  // @@protoc_insertion_point(field_get:net.base_info.all_login_days)
  return _internal_all_login_days();
}
inline void base_info::_internal_set_all_login_days(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  all_login_days_ = value;
}
inline void base_info::set_all_login_days(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_all_login_days(value);
  // @@protoc_insertion_point(field_set:net.base_info.all_login_days)
}

// uint32 offline_time = 16;
inline void base_info::clear_offline_time() {
  offline_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::_internal_offline_time() const {
  return offline_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 base_info::offline_time() const {
  // @@protoc_insertion_point(field_get:net.base_info.offline_time)
  return _internal_offline_time();
}
inline void base_info::_internal_set_offline_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  offline_time_ = value;
}
inline void base_info::set_offline_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offline_time(value);
  // @@protoc_insertion_point(field_set:net.base_info.offline_time)
}

// -------------------------------------------------------------------

// svr_info

// uint32 svrid = 1;
inline void svr_info::clear_svrid() {
  svrid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::_internal_svrid() const {
  return svrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::svrid() const {
  // @@protoc_insertion_point(field_get:net.svr_info.svrid)
  return _internal_svrid();
}
inline void svr_info::_internal_set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  svrid_ = value;
}
inline void svr_info::set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_svrid(value);
  // @@protoc_insertion_point(field_set:net.svr_info.svrid)
}

// uint32 svr_type = 2;
inline void svr_info::clear_svr_type() {
  svr_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::_internal_svr_type() const {
  return svr_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::svr_type() const {
  // @@protoc_insertion_point(field_get:net.svr_info.svr_type)
  return _internal_svr_type();
}
inline void svr_info::_internal_set_svr_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  svr_type_ = value;
}
inline void svr_info::set_svr_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_svr_type(value);
  // @@protoc_insertion_point(field_set:net.svr_info.svr_type)
}

// uint32 game_type = 3;
inline void svr_info::clear_game_type() {
  game_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::game_type() const {
  // @@protoc_insertion_point(field_get:net.svr_info.game_type)
  return _internal_game_type();
}
inline void svr_info::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  game_type_ = value;
}
inline void svr_info::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:net.svr_info.game_type)
}

// uint32 game_subtype = 4;
inline void svr_info::clear_game_subtype() {
  game_subtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::_internal_game_subtype() const {
  return game_subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svr_info::game_subtype() const {
  // @@protoc_insertion_point(field_get:net.svr_info.game_subtype)
  return _internal_game_subtype();
}
inline void svr_info::_internal_set_game_subtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  game_subtype_ = value;
}
inline void svr_info::set_game_subtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_subtype(value);
  // @@protoc_insertion_point(field_set:net.svr_info.game_subtype)
}

// bytes uuid = 5;
inline void svr_info::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& svr_info::uuid() const {
  // @@protoc_insertion_point(field_get:net.svr_info.uuid)
  return _internal_uuid();
}
inline void svr_info::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:net.svr_info.uuid)
}
inline std::string* svr_info::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:net.svr_info.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& svr_info::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void svr_info::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void svr_info::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.svr_info.uuid)
}
inline void svr_info::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.svr_info.uuid)
}
inline void svr_info::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.svr_info.uuid)
}
inline std::string* svr_info::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* svr_info::release_uuid() {
  // @@protoc_insertion_point(field_release:net.svr_info.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void svr_info::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:net.svr_info.uuid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_5fmsg_5fstruct_2eproto
