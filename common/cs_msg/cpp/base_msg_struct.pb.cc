// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_msg_struct.proto

#include "base_msg_struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace net {
class base_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<base_info> _instance;
} _base_info_default_instance_;
class svr_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<svr_info> _instance;
} _svr_info_default_instance_;
}  // namespace net
static void InitDefaultsscc_info_base_info_base_5fmsg_5fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_base_info_default_instance_;
    new (ptr) ::net::base_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::base_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_base_info_base_5fmsg_5fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_base_info_base_5fmsg_5fstruct_2eproto}, {}};

static void InitDefaultsscc_info_svr_info_base_5fmsg_5fstruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::_svr_info_default_instance_;
    new (ptr) ::net::svr_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::svr_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_svr_info_base_5fmsg_5fstruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_svr_info_base_5fmsg_5fstruct_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_base_5fmsg_5fstruct_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_base_5fmsg_5fstruct_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_base_5fmsg_5fstruct_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_base_5fmsg_5fstruct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::base_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::base_info, uid_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, name_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, sex_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, coin_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, vip_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, clogin_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, weeklogin_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, login_ip_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, all_login_days_),
  PROTOBUF_FIELD_OFFSET(::net::base_info, offline_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::svr_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::svr_info, svrid_),
  PROTOBUF_FIELD_OFFSET(::net::svr_info, svr_type_),
  PROTOBUF_FIELD_OFFSET(::net::svr_info, game_type_),
  PROTOBUF_FIELD_OFFSET(::net::svr_info, game_subtype_),
  PROTOBUF_FIELD_OFFSET(::net::svr_info, uuid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::net::base_info)},
  { 15, -1, sizeof(::net::svr_info)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_base_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::_svr_info_default_instance_),
};

const char descriptor_table_protodef_base_5fmsg_5fstruct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025base_msg_struct.proto\022\003net\"\261\001\n\tbase_in"
  "fo\022\013\n\003uid\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\013\n\003sex\030\003 \001"
  "(\r\022\014\n\004coin\030\005 \001(\003\022\013\n\003vip\030\007 \001(\r\022\016\n\006clogin\030"
  "\t \001(\r\022\021\n\tweeklogin\030\n \001(\r\022\020\n\010login_ip\030\016 \001"
  "(\r\022\026\n\016all_login_days\030\017 \001(\r\022\024\n\014offline_ti"
  "me\030\020 \001(\r\"b\n\010svr_info\022\r\n\005svrid\030\001 \001(\r\022\020\n\010s"
  "vr_type\030\002 \001(\r\022\021\n\tgame_type\030\003 \001(\r\022\024\n\014game"
  "_subtype\030\004 \001(\r\022\014\n\004uuid\030\005 \001(\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_base_5fmsg_5fstruct_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_base_5fmsg_5fstruct_2eproto_sccs[2] = {
  &scc_info_base_info_base_5fmsg_5fstruct_2eproto.base,
  &scc_info_svr_info_base_5fmsg_5fstruct_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_base_5fmsg_5fstruct_2eproto_once;
static bool descriptor_table_base_5fmsg_5fstruct_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_5fmsg_5fstruct_2eproto = {
  &descriptor_table_base_5fmsg_5fstruct_2eproto_initialized, descriptor_table_protodef_base_5fmsg_5fstruct_2eproto, "base_msg_struct.proto", 316,
  &descriptor_table_base_5fmsg_5fstruct_2eproto_once, descriptor_table_base_5fmsg_5fstruct_2eproto_sccs, descriptor_table_base_5fmsg_5fstruct_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_base_5fmsg_5fstruct_2eproto::offsets,
  file_level_metadata_base_5fmsg_5fstruct_2eproto, 2, file_level_enum_descriptors_base_5fmsg_5fstruct_2eproto, file_level_service_descriptors_base_5fmsg_5fstruct_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_base_5fmsg_5fstruct_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_base_5fmsg_5fstruct_2eproto), true);
namespace net {

// ===================================================================

void base_info::InitAsDefaultInstance() {
}
class base_info::_Internal {
 public:
};

base_info::base_info()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.base_info)
}
base_info::base_info(const base_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&offline_time_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(offline_time_));
  // @@protoc_insertion_point(copy_constructor:net.base_info)
}

void base_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_base_info_base_5fmsg_5fstruct_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offline_time_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(offline_time_));
}

base_info::~base_info() {
  // @@protoc_insertion_point(destructor:net.base_info)
  SharedDtor();
}

void base_info::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void base_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const base_info& base_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_base_info_base_5fmsg_5fstruct_2eproto.base);
  return *internal_default_instance();
}


void base_info::Clear() {
// @@protoc_insertion_point(message_clear_start:net.base_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offline_time_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(offline_time_));
  _internal_metadata_.Clear();
}

const char* base_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 coin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 vip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 clogin = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          clogin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 weeklogin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          weeklogin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 login_ip = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          login_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 all_login_days = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          all_login_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 offline_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          offline_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* base_info::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.base_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 sex = 3;
  if (this->sex() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sex(), target);
  }

  // int64 coin = 5;
  if (this->coin() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_coin(), target);
  }

  // uint32 vip = 7;
  if (this->vip() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_vip(), target);
  }

  // uint32 clogin = 9;
  if (this->clogin() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_clogin(), target);
  }

  // uint32 weeklogin = 10;
  if (this->weeklogin() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_weeklogin(), target);
  }

  // uint32 login_ip = 14;
  if (this->login_ip() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_login_ip(), target);
  }

  // uint32 all_login_days = 15;
  if (this->all_login_days() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_all_login_days(), target);
  }

  // uint32 offline_time = 16;
  if (this->offline_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_offline_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.base_info)
  return target;
}

size_t base_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.base_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 sex = 3;
  if (this->sex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sex());
  }

  // int64 coin = 5;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_coin());
  }

  // uint32 vip = 7;
  if (this->vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vip());
  }

  // uint32 clogin = 9;
  if (this->clogin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_clogin());
  }

  // uint32 weeklogin = 10;
  if (this->weeklogin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_weeklogin());
  }

  // uint32 login_ip = 14;
  if (this->login_ip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_login_ip());
  }

  // uint32 all_login_days = 15;
  if (this->all_login_days() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_all_login_days());
  }

  // uint32 offline_time = 16;
  if (this->offline_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_offline_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void base_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.base_info)
  GOOGLE_DCHECK_NE(&from, this);
  const base_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<base_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.base_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.base_info)
    MergeFrom(*source);
  }
}

void base_info::MergeFrom(const base_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.base_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
  if (from.clogin() != 0) {
    _internal_set_clogin(from._internal_clogin());
  }
  if (from.weeklogin() != 0) {
    _internal_set_weeklogin(from._internal_weeklogin());
  }
  if (from.login_ip() != 0) {
    _internal_set_login_ip(from._internal_login_ip());
  }
  if (from.all_login_days() != 0) {
    _internal_set_all_login_days(from._internal_all_login_days());
  }
  if (from.offline_time() != 0) {
    _internal_set_offline_time(from._internal_offline_time());
  }
}

void base_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.base_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void base_info::CopyFrom(const base_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.base_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool base_info::IsInitialized() const {
  return true;
}

void base_info::InternalSwap(base_info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(sex_, other->sex_);
  swap(coin_, other->coin_);
  swap(vip_, other->vip_);
  swap(clogin_, other->clogin_);
  swap(weeklogin_, other->weeklogin_);
  swap(login_ip_, other->login_ip_);
  swap(all_login_days_, other->all_login_days_);
  swap(offline_time_, other->offline_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata base_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void svr_info::InitAsDefaultInstance() {
}
class svr_info::_Internal {
 public:
};

svr_info::svr_info()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.svr_info)
}
svr_info::svr_info(const svr_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  ::memcpy(&svrid_, &from.svrid_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_subtype_) -
    reinterpret_cast<char*>(&svrid_)) + sizeof(game_subtype_));
  // @@protoc_insertion_point(copy_constructor:net.svr_info)
}

void svr_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_svr_info_base_5fmsg_5fstruct_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_subtype_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(game_subtype_));
}

svr_info::~svr_info() {
  // @@protoc_insertion_point(destructor:net.svr_info)
  SharedDtor();
}

void svr_info::SharedDtor() {
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void svr_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const svr_info& svr_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_svr_info_base_5fmsg_5fstruct_2eproto.base);
  return *internal_default_instance();
}


void svr_info::Clear() {
// @@protoc_insertion_point(message_clear_start:net.svr_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_subtype_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(game_subtype_));
  _internal_metadata_.Clear();
}

const char* svr_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 svrid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 svr_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          svr_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 game_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 game_subtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          game_subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_uuid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* svr_info::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.svr_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 svrid = 1;
  if (this->svrid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_svrid(), target);
  }

  // uint32 svr_type = 2;
  if (this->svr_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_svr_type(), target);
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_game_type(), target);
  }

  // uint32 game_subtype = 4;
  if (this->game_subtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_subtype(), target);
  }

  // bytes uuid = 5;
  if (this->uuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.svr_info)
  return target;
}

size_t svr_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.svr_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes uuid = 5;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uuid());
  }

  // uint32 svrid = 1;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_svrid());
  }

  // uint32 svr_type = 2;
  if (this->svr_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_svr_type());
  }

  // uint32 game_type = 3;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_type());
  }

  // uint32 game_subtype = 4;
  if (this->game_subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_subtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void svr_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.svr_info)
  GOOGLE_DCHECK_NE(&from, this);
  const svr_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<svr_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.svr_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.svr_info)
    MergeFrom(*source);
  }
}

void svr_info::MergeFrom(const svr_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.svr_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
  if (from.svr_type() != 0) {
    _internal_set_svr_type(from._internal_svr_type());
  }
  if (from.game_type() != 0) {
    _internal_set_game_type(from._internal_game_type());
  }
  if (from.game_subtype() != 0) {
    _internal_set_game_subtype(from._internal_game_subtype());
  }
}

void svr_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.svr_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void svr_info::CopyFrom(const svr_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.svr_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool svr_info::IsInitialized() const {
  return true;
}

void svr_info::InternalSwap(svr_info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(svrid_, other->svrid_);
  swap(svr_type_, other->svr_type_);
  swap(game_type_, other->game_type_);
  swap(game_subtype_, other->game_subtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata svr_info::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace net
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::net::base_info* Arena::CreateMaybeMessage< ::net::base_info >(Arena* arena) {
  return Arena::CreateInternal< ::net::base_info >(arena);
}
template<> PROTOBUF_NOINLINE ::net::svr_info* Arena::CreateMaybeMessage< ::net::svr_info >(Arena* arena) {
  return Arena::CreateInternal< ::net::svr_info >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
