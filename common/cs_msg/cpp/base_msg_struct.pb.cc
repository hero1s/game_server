// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_msg_struct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base_msg_struct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {

namespace {

const ::google::protobuf::Descriptor* base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  base_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* svr_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  svr_info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto() {
  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base_msg_struct.proto");
  GOOGLE_CHECK(file != NULL);
  base_info_descriptor_ = file->message_type(0);
  static const int base_info_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, clogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, weeklogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, login_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, all_login_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, offline_time_),
  };
  base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      base_info_descriptor_,
      base_info::default_instance_,
      base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(base_info));
  svr_info_descriptor_ = file->message_type(1);
  static const int svr_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(svr_info, svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(svr_info, svr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(svr_info, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(svr_info, game_subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(svr_info, uuid_),
  };
  svr_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      svr_info_descriptor_,
      svr_info::default_instance_,
      svr_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(svr_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(svr_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(svr_info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    base_info_descriptor_, &base_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    svr_info_descriptor_, &svr_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto() {
  delete base_info::default_instance_;
  delete base_info_reflection_;
  delete svr_info::default_instance_;
  delete svr_info_reflection_;
}

void protobuf_AddDesc_base_5fmsg_5fstruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025base_msg_struct.proto\022\003net\"\261\001\n\tbase_in"
    "fo\022\013\n\003uid\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\013\n\003sex\030\003 \001"
    "(\r\022\014\n\004coin\030\005 \001(\003\022\013\n\003vip\030\007 \001(\r\022\016\n\006clogin\030"
    "\t \001(\r\022\021\n\tweeklogin\030\n \001(\r\022\020\n\010login_ip\030\016 \001"
    "(\r\022\026\n\016all_login_days\030\017 \001(\r\022\024\n\014offline_ti"
    "me\030\020 \001(\r\"b\n\010svr_info\022\r\n\005svrid\030\001 \001(\r\022\020\n\010s"
    "vr_type\030\002 \001(\r\022\021\n\tgame_type\030\003 \001(\r\022\024\n\014game"
    "_subtype\030\004 \001(\r\022\014\n\004uuid\030\005 \001(\014", 308);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base_msg_struct.proto", &protobuf_RegisterTypes);
  base_info::default_instance_ = new base_info();
  svr_info::default_instance_ = new svr_info();
  base_info::default_instance_->InitAsDefaultInstance();
  svr_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_5fmsg_5fstruct_2eproto {
  StaticDescriptorInitializer_base_5fmsg_5fstruct_2eproto() {
    protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  }
} static_descriptor_initializer_base_5fmsg_5fstruct_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int base_info::kUidFieldNumber;
const int base_info::kNameFieldNumber;
const int base_info::kSexFieldNumber;
const int base_info::kCoinFieldNumber;
const int base_info::kVipFieldNumber;
const int base_info::kCloginFieldNumber;
const int base_info::kWeekloginFieldNumber;
const int base_info::kLoginIpFieldNumber;
const int base_info::kAllLoginDaysFieldNumber;
const int base_info::kOfflineTimeFieldNumber;
#endif  // !_MSC_VER

base_info::base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void base_info::InitAsDefaultInstance() {
}

base_info::base_info(const base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void base_info::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  coin_ = GOOGLE_LONGLONG(0);
  vip_ = 0u;
  clogin_ = 0u;
  weeklogin_ = 0u;
  login_ip_ = 0u;
  all_login_days_ = 0u;
  offline_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

base_info::~base_info() {
  SharedDtor();
}

void base_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return base_info_descriptor_;
}

const base_info& base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

base_info* base_info::default_instance_ = NULL;

base_info* base_info::New() const {
  return new base_info;
}

void base_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0u;
    coin_ = GOOGLE_LONGLONG(0);
    vip_ = 0u;
    clogin_ = 0u;
    weeklogin_ = 0u;
    login_ip_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    all_login_days_ = 0u;
    offline_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_coin;
        break;
      }

      // optional int64 coin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip;
        break;
      }

      // optional uint32 vip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_clogin;
        break;
      }

      // optional uint32 clogin = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clogin_)));
          set_has_clogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_weeklogin;
        break;
      }

      // optional uint32 weeklogin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weeklogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weeklogin_)));
          set_has_weeklogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_login_ip;
        break;
      }

      // optional uint32 login_ip = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_ip_)));
          set_has_login_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_all_login_days;
        break;
      }

      // optional uint32 all_login_days = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_login_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &all_login_days_)));
          set_has_all_login_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_offline_time;
        break;
      }

      // optional uint32 offline_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offline_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offline_time_)));
          set_has_offline_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sex(), output);
  }

  // optional int64 coin = 5;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->coin(), output);
  }

  // optional uint32 vip = 7;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->vip(), output);
  }

  // optional uint32 clogin = 9;
  if (has_clogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->clogin(), output);
  }

  // optional uint32 weeklogin = 10;
  if (has_weeklogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->weeklogin(), output);
  }

  // optional uint32 login_ip = 14;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->login_ip(), output);
  }

  // optional uint32 all_login_days = 15;
  if (has_all_login_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->all_login_days(), output);
  }

  // optional uint32 offline_time = 16;
  if (has_offline_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->offline_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sex(), target);
  }

  // optional int64 coin = 5;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->coin(), target);
  }

  // optional uint32 vip = 7;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->vip(), target);
  }

  // optional uint32 clogin = 9;
  if (has_clogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->clogin(), target);
  }

  // optional uint32 weeklogin = 10;
  if (has_weeklogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->weeklogin(), target);
  }

  // optional uint32 login_ip = 14;
  if (has_login_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->login_ip(), target);
  }

  // optional uint32 all_login_days = 15;
  if (has_all_login_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->all_login_days(), target);
  }

  // optional uint32 offline_time = 16;
  if (has_offline_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->offline_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional int64 coin = 5;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coin());
    }

    // optional uint32 vip = 7;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // optional uint32 clogin = 9;
    if (has_clogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clogin());
    }

    // optional uint32 weeklogin = 10;
    if (has_weeklogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weeklogin());
    }

    // optional uint32 login_ip = 14;
    if (has_login_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_ip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 all_login_days = 15;
    if (has_all_login_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->all_login_days());
    }

    // optional uint32 offline_time = 16;
    if (has_offline_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offline_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void base_info::MergeFrom(const base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_clogin()) {
      set_clogin(from.clogin());
    }
    if (from.has_weeklogin()) {
      set_weeklogin(from.weeklogin());
    }
    if (from.has_login_ip()) {
      set_login_ip(from.login_ip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_all_login_days()) {
      set_all_login_days(from.all_login_days());
    }
    if (from.has_offline_time()) {
      set_offline_time(from.offline_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void base_info::CopyFrom(const base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool base_info::IsInitialized() const {

  return true;
}

void base_info::Swap(base_info* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(coin_, other->coin_);
    std::swap(vip_, other->vip_);
    std::swap(clogin_, other->clogin_);
    std::swap(weeklogin_, other->weeklogin_);
    std::swap(login_ip_, other->login_ip_);
    std::swap(all_login_days_, other->all_login_days_);
    std::swap(offline_time_, other->offline_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = base_info_descriptor_;
  metadata.reflection = base_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int svr_info::kSvridFieldNumber;
const int svr_info::kSvrTypeFieldNumber;
const int svr_info::kGameTypeFieldNumber;
const int svr_info::kGameSubtypeFieldNumber;
const int svr_info::kUuidFieldNumber;
#endif  // !_MSC_VER

svr_info::svr_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void svr_info::InitAsDefaultInstance() {
}

svr_info::svr_info(const svr_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void svr_info::SharedCtor() {
  _cached_size_ = 0;
  svrid_ = 0u;
  svr_type_ = 0u;
  game_type_ = 0u;
  game_subtype_ = 0u;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

svr_info::~svr_info() {
  SharedDtor();
}

void svr_info::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void svr_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* svr_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return svr_info_descriptor_;
}

const svr_info& svr_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

svr_info* svr_info::default_instance_ = NULL;

svr_info* svr_info::New() const {
  return new svr_info;
}

void svr_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrid_ = 0u;
    svr_type_ = 0u;
    game_type_ = 0u;
    game_subtype_ = 0u;
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool svr_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_svr_type;
        break;
      }

      // optional uint32 svr_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_type_)));
          set_has_svr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_type;
        break;
      }

      // optional uint32 game_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_subtype;
        break;
      }

      // optional uint32 game_subtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_subtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_subtype_)));
          set_has_game_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_uuid;
        break;
      }

      // optional bytes uuid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void svr_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrid(), output);
  }

  // optional uint32 svr_type = 2;
  if (has_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svr_type(), output);
  }

  // optional uint32 game_type = 3;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_type(), output);
  }

  // optional uint32 game_subtype = 4;
  if (has_game_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_subtype(), output);
  }

  // optional bytes uuid = 5;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* svr_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrid(), target);
  }

  // optional uint32 svr_type = 2;
  if (has_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svr_type(), target);
  }

  // optional uint32 game_type = 3;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_type(), target);
  }

  // optional uint32 game_subtype = 4;
  if (has_game_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_subtype(), target);
  }

  // optional bytes uuid = 5;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int svr_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrid = 1;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

    // optional uint32 svr_type = 2;
    if (has_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_type());
    }

    // optional uint32 game_type = 3;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

    // optional uint32 game_subtype = 4;
    if (has_game_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_subtype());
    }

    // optional bytes uuid = 5;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void svr_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const svr_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const svr_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void svr_info::MergeFrom(const svr_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
    if (from.has_svr_type()) {
      set_svr_type(from.svr_type());
    }
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_game_subtype()) {
      set_game_subtype(from.game_subtype());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void svr_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void svr_info::CopyFrom(const svr_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool svr_info::IsInitialized() const {

  return true;
}

void svr_info::Swap(svr_info* other) {
  if (other != this) {
    std::swap(svrid_, other->svrid_);
    std::swap(svr_type_, other->svr_type_);
    std::swap(game_type_, other->game_type_);
    std::swap(game_subtype_, other->game_subtype_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata svr_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = svr_info_descriptor_;
  metadata.reflection = svr_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
