// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_logic_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5flogic_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5flogic_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base_msg_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5flogic_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5flogic_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5flogic_5fmsg_2eproto;
namespace net {
namespace cli {
class msg_back_lobby_rep;
class msg_back_lobby_repDefaultTypeInternal;
extern msg_back_lobby_repDefaultTypeInternal _msg_back_lobby_rep_default_instance_;
class msg_back_lobby_req;
class msg_back_lobby_reqDefaultTypeInternal;
extern msg_back_lobby_reqDefaultTypeInternal _msg_back_lobby_req_default_instance_;
class msg_enter_game_rep;
class msg_enter_game_repDefaultTypeInternal;
extern msg_enter_game_repDefaultTypeInternal _msg_enter_game_rep_default_instance_;
class msg_enter_gamesvr_rep;
class msg_enter_gamesvr_repDefaultTypeInternal;
extern msg_enter_gamesvr_repDefaultTypeInternal _msg_enter_gamesvr_rep_default_instance_;
class msg_enter_gamesvr_req;
class msg_enter_gamesvr_reqDefaultTypeInternal;
extern msg_enter_gamesvr_reqDefaultTypeInternal _msg_enter_gamesvr_req_default_instance_;
class msg_heart_test;
class msg_heart_testDefaultTypeInternal;
extern msg_heart_testDefaultTypeInternal _msg_heart_test_default_instance_;
class msg_login_rep;
class msg_login_repDefaultTypeInternal;
extern msg_login_repDefaultTypeInternal _msg_login_rep_default_instance_;
class msg_login_req;
class msg_login_reqDefaultTypeInternal;
extern msg_login_reqDefaultTypeInternal _msg_login_req_default_instance_;
class msg_loginout_rep;
class msg_loginout_repDefaultTypeInternal;
extern msg_loginout_repDefaultTypeInternal _msg_loginout_rep_default_instance_;
class msg_player_data_rep;
class msg_player_data_repDefaultTypeInternal;
extern msg_player_data_repDefaultTypeInternal _msg_player_data_rep_default_instance_;
class msg_svrs_info_rep;
class msg_svrs_info_repDefaultTypeInternal;
extern msg_svrs_info_repDefaultTypeInternal _msg_svrs_info_rep_default_instance_;
class msg_svrs_info_req;
class msg_svrs_info_reqDefaultTypeInternal;
extern msg_svrs_info_reqDefaultTypeInternal _msg_svrs_info_req_default_instance_;
class msg_version_info_rep;
class msg_version_info_repDefaultTypeInternal;
extern msg_version_info_repDefaultTypeInternal _msg_version_info_rep_default_instance_;
}  // namespace cli
}  // namespace net
PROTOBUF_NAMESPACE_OPEN
template<> ::net::cli::msg_back_lobby_rep* Arena::CreateMaybeMessage<::net::cli::msg_back_lobby_rep>(Arena*);
template<> ::net::cli::msg_back_lobby_req* Arena::CreateMaybeMessage<::net::cli::msg_back_lobby_req>(Arena*);
template<> ::net::cli::msg_enter_game_rep* Arena::CreateMaybeMessage<::net::cli::msg_enter_game_rep>(Arena*);
template<> ::net::cli::msg_enter_gamesvr_rep* Arena::CreateMaybeMessage<::net::cli::msg_enter_gamesvr_rep>(Arena*);
template<> ::net::cli::msg_enter_gamesvr_req* Arena::CreateMaybeMessage<::net::cli::msg_enter_gamesvr_req>(Arena*);
template<> ::net::cli::msg_heart_test* Arena::CreateMaybeMessage<::net::cli::msg_heart_test>(Arena*);
template<> ::net::cli::msg_login_rep* Arena::CreateMaybeMessage<::net::cli::msg_login_rep>(Arena*);
template<> ::net::cli::msg_login_req* Arena::CreateMaybeMessage<::net::cli::msg_login_req>(Arena*);
template<> ::net::cli::msg_loginout_rep* Arena::CreateMaybeMessage<::net::cli::msg_loginout_rep>(Arena*);
template<> ::net::cli::msg_player_data_rep* Arena::CreateMaybeMessage<::net::cli::msg_player_data_rep>(Arena*);
template<> ::net::cli::msg_svrs_info_rep* Arena::CreateMaybeMessage<::net::cli::msg_svrs_info_rep>(Arena*);
template<> ::net::cli::msg_svrs_info_req* Arena::CreateMaybeMessage<::net::cli::msg_svrs_info_req>(Arena*);
template<> ::net::cli::msg_version_info_rep* Arena::CreateMaybeMessage<::net::cli::msg_version_info_rep>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace net {
namespace cli {

// ===================================================================

class msg_heart_test :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_heart_test) */ {
 public:
  msg_heart_test();
  virtual ~msg_heart_test();

  msg_heart_test(const msg_heart_test& from);
  msg_heart_test(msg_heart_test&& from) noexcept
    : msg_heart_test() {
    *this = ::std::move(from);
  }

  inline msg_heart_test& operator=(const msg_heart_test& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_heart_test& operator=(msg_heart_test&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_heart_test& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_heart_test* internal_default_instance() {
    return reinterpret_cast<const msg_heart_test*>(
               &_msg_heart_test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(msg_heart_test& a, msg_heart_test& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_heart_test* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_heart_test* New() const final {
    return CreateMaybeMessage<msg_heart_test>(nullptr);
  }

  msg_heart_test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_heart_test>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_heart_test& from);
  void MergeFrom(const msg_heart_test& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_heart_test* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_heart_test";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSvrTimeFieldNumber = 1,
  };
  // uint32 svr_time = 1;
  void clear_svr_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 svr_time() const;
  void set_svr_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_svr_time() const;
  void _internal_set_svr_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_heart_test)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 svr_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_login_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_login_req) */ {
 public:
  msg_login_req();
  virtual ~msg_login_req();

  msg_login_req(const msg_login_req& from);
  msg_login_req(msg_login_req&& from) noexcept
    : msg_login_req() {
    *this = ::std::move(from);
  }

  inline msg_login_req& operator=(const msg_login_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_login_req& operator=(msg_login_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_login_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_login_req* internal_default_instance() {
    return reinterpret_cast<const msg_login_req*>(
               &_msg_login_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(msg_login_req& a, msg_login_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_login_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_login_req* New() const final {
    return CreateMaybeMessage<msg_login_req>(nullptr);
  }

  msg_login_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_login_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_login_req& from);
  void MergeFrom(const msg_login_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_login_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_login_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kDeviceidFieldNumber = 3,
    kVersionidFieldNumber = 4,
    kUidFieldNumber = 1,
    kCheckTimeFieldNumber = 5,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes deviceid = 3;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const void* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // bytes versionid = 4;
  void clear_versionid();
  const std::string& versionid() const;
  void set_versionid(const std::string& value);
  void set_versionid(std::string&& value);
  void set_versionid(const char* value);
  void set_versionid(const void* value, size_t size);
  std::string* mutable_versionid();
  std::string* release_versionid();
  void set_allocated_versionid(std::string* versionid);
  private:
  const std::string& _internal_versionid() const;
  void _internal_set_versionid(const std::string& value);
  std::string* _internal_mutable_versionid();
  public:

  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 check_time = 5;
  void clear_check_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 check_time() const;
  void set_check_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_check_time() const;
  void _internal_set_check_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_login_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr versionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 check_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_login_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_login_rep) */ {
 public:
  msg_login_rep();
  virtual ~msg_login_rep();

  msg_login_rep(const msg_login_rep& from);
  msg_login_rep(msg_login_rep&& from) noexcept
    : msg_login_rep() {
    *this = ::std::move(from);
  }

  inline msg_login_rep& operator=(const msg_login_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_login_rep& operator=(msg_login_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_login_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_login_rep* internal_default_instance() {
    return reinterpret_cast<const msg_login_rep*>(
               &_msg_login_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(msg_login_rep& a, msg_login_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_login_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_login_rep* New() const final {
    return CreateMaybeMessage<msg_login_rep>(nullptr);
  }

  msg_login_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_login_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_login_rep& from);
  void MergeFrom(const msg_login_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_login_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_login_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kServerTimeFieldNumber = 2,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 server_time = 2;
  void clear_server_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_time() const;
  void set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_time() const;
  void _internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_login_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_loginout_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_loginout_rep) */ {
 public:
  msg_loginout_rep();
  virtual ~msg_loginout_rep();

  msg_loginout_rep(const msg_loginout_rep& from);
  msg_loginout_rep(msg_loginout_rep&& from) noexcept
    : msg_loginout_rep() {
    *this = ::std::move(from);
  }

  inline msg_loginout_rep& operator=(const msg_loginout_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_loginout_rep& operator=(msg_loginout_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_loginout_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_loginout_rep* internal_default_instance() {
    return reinterpret_cast<const msg_loginout_rep*>(
               &_msg_loginout_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(msg_loginout_rep& a, msg_loginout_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_loginout_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_loginout_rep* New() const final {
    return CreateMaybeMessage<msg_loginout_rep>(nullptr);
  }

  msg_loginout_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_loginout_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_loginout_rep& from);
  void MergeFrom(const msg_loginout_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_loginout_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_loginout_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceidFieldNumber = 2,
    kReasonFieldNumber = 1,
  };
  // bytes deviceid = 2;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const void* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // uint32 reason = 1;
  void clear_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reason() const;
  void _internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_loginout_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_version_info_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_version_info_rep) */ {
 public:
  msg_version_info_rep();
  virtual ~msg_version_info_rep();

  msg_version_info_rep(const msg_version_info_rep& from);
  msg_version_info_rep(msg_version_info_rep&& from) noexcept
    : msg_version_info_rep() {
    *this = ::std::move(from);
  }

  inline msg_version_info_rep& operator=(const msg_version_info_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_version_info_rep& operator=(msg_version_info_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_version_info_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_version_info_rep* internal_default_instance() {
    return reinterpret_cast<const msg_version_info_rep*>(
               &_msg_version_info_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(msg_version_info_rep& a, msg_version_info_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_version_info_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_version_info_rep* New() const final {
    return CreateMaybeMessage<msg_version_info_rep>(nullptr);
  }

  msg_version_info_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_version_info_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_version_info_rep& from);
  void MergeFrom(const msg_version_info_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_version_info_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_version_info_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // bytes version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_version_info_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_enter_game_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_enter_game_rep) */ {
 public:
  msg_enter_game_rep();
  virtual ~msg_enter_game_rep();

  msg_enter_game_rep(const msg_enter_game_rep& from);
  msg_enter_game_rep(msg_enter_game_rep&& from) noexcept
    : msg_enter_game_rep() {
    *this = ::std::move(from);
  }

  inline msg_enter_game_rep& operator=(const msg_enter_game_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_enter_game_rep& operator=(msg_enter_game_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_enter_game_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_enter_game_rep* internal_default_instance() {
    return reinterpret_cast<const msg_enter_game_rep*>(
               &_msg_enter_game_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(msg_enter_game_rep& a, msg_enter_game_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_enter_game_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_enter_game_rep* New() const final {
    return CreateMaybeMessage<msg_enter_game_rep>(nullptr);
  }

  msg_enter_game_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_enter_game_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_enter_game_rep& from);
  void MergeFrom(const msg_enter_game_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_enter_game_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_enter_game_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_enter_game_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_player_data_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_player_data_rep) */ {
 public:
  msg_player_data_rep();
  virtual ~msg_player_data_rep();

  msg_player_data_rep(const msg_player_data_rep& from);
  msg_player_data_rep(msg_player_data_rep&& from) noexcept
    : msg_player_data_rep() {
    *this = ::std::move(from);
  }

  inline msg_player_data_rep& operator=(const msg_player_data_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_player_data_rep& operator=(msg_player_data_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_player_data_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_player_data_rep* internal_default_instance() {
    return reinterpret_cast<const msg_player_data_rep*>(
               &_msg_player_data_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(msg_player_data_rep& a, msg_player_data_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_player_data_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_player_data_rep* New() const final {
    return CreateMaybeMessage<msg_player_data_rep>(nullptr);
  }

  msg_player_data_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_player_data_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_player_data_rep& from);
  void MergeFrom(const msg_player_data_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_player_data_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_player_data_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseDataFieldNumber = 1,
  };
  // .net.base_info base_data = 1;
  bool has_base_data() const;
  private:
  bool _internal_has_base_data() const;
  public:
  void clear_base_data();
  const ::net::base_info& base_data() const;
  ::net::base_info* release_base_data();
  ::net::base_info* mutable_base_data();
  void set_allocated_base_data(::net::base_info* base_data);
  private:
  const ::net::base_info& _internal_base_data() const;
  ::net::base_info* _internal_mutable_base_data();
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_player_data_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::net::base_info* base_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_svrs_info_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_svrs_info_req) */ {
 public:
  msg_svrs_info_req();
  virtual ~msg_svrs_info_req();

  msg_svrs_info_req(const msg_svrs_info_req& from);
  msg_svrs_info_req(msg_svrs_info_req&& from) noexcept
    : msg_svrs_info_req() {
    *this = ::std::move(from);
  }

  inline msg_svrs_info_req& operator=(const msg_svrs_info_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_svrs_info_req& operator=(msg_svrs_info_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_svrs_info_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_svrs_info_req* internal_default_instance() {
    return reinterpret_cast<const msg_svrs_info_req*>(
               &_msg_svrs_info_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(msg_svrs_info_req& a, msg_svrs_info_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_svrs_info_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_svrs_info_req* New() const final {
    return CreateMaybeMessage<msg_svrs_info_req>(nullptr);
  }

  msg_svrs_info_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_svrs_info_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_svrs_info_req& from);
  void MergeFrom(const msg_svrs_info_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_svrs_info_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_svrs_info_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameTypeFieldNumber = 1,
  };
  // uint32 game_type = 1;
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_svrs_info_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_svrs_info_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_svrs_info_rep) */ {
 public:
  msg_svrs_info_rep();
  virtual ~msg_svrs_info_rep();

  msg_svrs_info_rep(const msg_svrs_info_rep& from);
  msg_svrs_info_rep(msg_svrs_info_rep&& from) noexcept
    : msg_svrs_info_rep() {
    *this = ::std::move(from);
  }

  inline msg_svrs_info_rep& operator=(const msg_svrs_info_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_svrs_info_rep& operator=(msg_svrs_info_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_svrs_info_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_svrs_info_rep* internal_default_instance() {
    return reinterpret_cast<const msg_svrs_info_rep*>(
               &_msg_svrs_info_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(msg_svrs_info_rep& a, msg_svrs_info_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_svrs_info_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_svrs_info_rep* New() const final {
    return CreateMaybeMessage<msg_svrs_info_rep>(nullptr);
  }

  msg_svrs_info_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_svrs_info_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_svrs_info_rep& from);
  void MergeFrom(const msg_svrs_info_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_svrs_info_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_svrs_info_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSvrsFieldNumber = 1,
    kCurSvridFieldNumber = 2,
  };
  // repeated .net.svr_info svrs = 1;
  int svrs_size() const;
  private:
  int _internal_svrs_size() const;
  public:
  void clear_svrs();
  ::net::svr_info* mutable_svrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::svr_info >*
      mutable_svrs();
  private:
  const ::net::svr_info& _internal_svrs(int index) const;
  ::net::svr_info* _internal_add_svrs();
  public:
  const ::net::svr_info& svrs(int index) const;
  ::net::svr_info* add_svrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::svr_info >&
      svrs() const;

  // uint32 cur_svrid = 2;
  void clear_cur_svrid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_svrid() const;
  void set_cur_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cur_svrid() const;
  void _internal_set_cur_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_svrs_info_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::svr_info > svrs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_svrid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_enter_gamesvr_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_enter_gamesvr_req) */ {
 public:
  msg_enter_gamesvr_req();
  virtual ~msg_enter_gamesvr_req();

  msg_enter_gamesvr_req(const msg_enter_gamesvr_req& from);
  msg_enter_gamesvr_req(msg_enter_gamesvr_req&& from) noexcept
    : msg_enter_gamesvr_req() {
    *this = ::std::move(from);
  }

  inline msg_enter_gamesvr_req& operator=(const msg_enter_gamesvr_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_enter_gamesvr_req& operator=(msg_enter_gamesvr_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_enter_gamesvr_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_enter_gamesvr_req* internal_default_instance() {
    return reinterpret_cast<const msg_enter_gamesvr_req*>(
               &_msg_enter_gamesvr_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(msg_enter_gamesvr_req& a, msg_enter_gamesvr_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_enter_gamesvr_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_enter_gamesvr_req* New() const final {
    return CreateMaybeMessage<msg_enter_gamesvr_req>(nullptr);
  }

  msg_enter_gamesvr_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_enter_gamesvr_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_enter_gamesvr_req& from);
  void MergeFrom(const msg_enter_gamesvr_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_enter_gamesvr_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_enter_gamesvr_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSvridFieldNumber = 1,
  };
  // uint32 svrid = 1;
  void clear_svrid();
  ::PROTOBUF_NAMESPACE_ID::uint32 svrid() const;
  void set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_svrid() const;
  void _internal_set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_enter_gamesvr_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 svrid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_enter_gamesvr_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_enter_gamesvr_rep) */ {
 public:
  msg_enter_gamesvr_rep();
  virtual ~msg_enter_gamesvr_rep();

  msg_enter_gamesvr_rep(const msg_enter_gamesvr_rep& from);
  msg_enter_gamesvr_rep(msg_enter_gamesvr_rep&& from) noexcept
    : msg_enter_gamesvr_rep() {
    *this = ::std::move(from);
  }

  inline msg_enter_gamesvr_rep& operator=(const msg_enter_gamesvr_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_enter_gamesvr_rep& operator=(msg_enter_gamesvr_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_enter_gamesvr_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_enter_gamesvr_rep* internal_default_instance() {
    return reinterpret_cast<const msg_enter_gamesvr_rep*>(
               &_msg_enter_gamesvr_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(msg_enter_gamesvr_rep& a, msg_enter_gamesvr_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_enter_gamesvr_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_enter_gamesvr_rep* New() const final {
    return CreateMaybeMessage<msg_enter_gamesvr_rep>(nullptr);
  }

  msg_enter_gamesvr_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_enter_gamesvr_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_enter_gamesvr_rep& from);
  void MergeFrom(const msg_enter_gamesvr_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_enter_gamesvr_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_enter_gamesvr_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSvridFieldNumber = 2,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 svrid = 2;
  void clear_svrid();
  ::PROTOBUF_NAMESPACE_ID::uint32 svrid() const;
  void set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_svrid() const;
  void _internal_set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_enter_gamesvr_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 svrid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_back_lobby_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_back_lobby_req) */ {
 public:
  msg_back_lobby_req();
  virtual ~msg_back_lobby_req();

  msg_back_lobby_req(const msg_back_lobby_req& from);
  msg_back_lobby_req(msg_back_lobby_req&& from) noexcept
    : msg_back_lobby_req() {
    *this = ::std::move(from);
  }

  inline msg_back_lobby_req& operator=(const msg_back_lobby_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_back_lobby_req& operator=(msg_back_lobby_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_back_lobby_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_back_lobby_req* internal_default_instance() {
    return reinterpret_cast<const msg_back_lobby_req*>(
               &_msg_back_lobby_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(msg_back_lobby_req& a, msg_back_lobby_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_back_lobby_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_back_lobby_req* New() const final {
    return CreateMaybeMessage<msg_back_lobby_req>(nullptr);
  }

  msg_back_lobby_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_back_lobby_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_back_lobby_req& from);
  void MergeFrom(const msg_back_lobby_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_back_lobby_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_back_lobby_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kIsActionFieldNumber = 2,
  };
  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 is_action = 2;
  void clear_is_action();
  ::PROTOBUF_NAMESPACE_ID::uint32 is_action() const;
  void set_is_action(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_is_action() const;
  void _internal_set_is_action(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_back_lobby_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 is_action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_back_lobby_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.cli.msg_back_lobby_rep) */ {
 public:
  msg_back_lobby_rep();
  virtual ~msg_back_lobby_rep();

  msg_back_lobby_rep(const msg_back_lobby_rep& from);
  msg_back_lobby_rep(msg_back_lobby_rep&& from) noexcept
    : msg_back_lobby_rep() {
    *this = ::std::move(from);
  }

  inline msg_back_lobby_rep& operator=(const msg_back_lobby_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_back_lobby_rep& operator=(msg_back_lobby_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_back_lobby_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_back_lobby_rep* internal_default_instance() {
    return reinterpret_cast<const msg_back_lobby_rep*>(
               &_msg_back_lobby_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(msg_back_lobby_rep& a, msg_back_lobby_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_back_lobby_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_back_lobby_rep* New() const final {
    return CreateMaybeMessage<msg_back_lobby_rep>(nullptr);
  }

  msg_back_lobby_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_back_lobby_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_back_lobby_rep& from);
  void MergeFrom(const msg_back_lobby_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_back_lobby_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.cli.msg_back_lobby_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5flogic_5fmsg_2eproto);
    return ::descriptor_table_client_5flogic_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 reason = 2;
  void clear_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reason() const;
  void _internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.cli.msg_back_lobby_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5flogic_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// msg_heart_test

// uint32 svr_time = 1;
inline void msg_heart_test::clear_svr_time() {
  svr_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_heart_test::_internal_svr_time() const {
  return svr_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_heart_test::svr_time() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_heart_test.svr_time)
  return _internal_svr_time();
}
inline void msg_heart_test::_internal_set_svr_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  svr_time_ = value;
}
inline void msg_heart_test::set_svr_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_svr_time(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_heart_test.svr_time)
}

// -------------------------------------------------------------------

// msg_login_req

// uint32 uid = 1;
inline void msg_login_req::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_login_req::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_login_req::uid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_login_req.uid)
  return _internal_uid();
}
inline void msg_login_req::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void msg_login_req::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_login_req.uid)
}

// bytes key = 2;
inline void msg_login_req::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg_login_req::key() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_login_req.key)
  return _internal_key();
}
inline void msg_login_req::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_login_req.key)
}
inline std::string* msg_login_req::mutable_key() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_login_req.key)
  return _internal_mutable_key();
}
inline const std::string& msg_login_req::_internal_key() const {
  return key_.GetNoArena();
}
inline void msg_login_req::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg_login_req::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.cli.msg_login_req.key)
}
inline void msg_login_req::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.cli.msg_login_req.key)
}
inline void msg_login_req::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.cli.msg_login_req.key)
}
inline std::string* msg_login_req::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg_login_req::release_key() {
  // @@protoc_insertion_point(field_release:net.cli.msg_login_req.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg_login_req::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_login_req.key)
}

// bytes deviceid = 3;
inline void msg_login_req::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg_login_req::deviceid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_login_req.deviceid)
  return _internal_deviceid();
}
inline void msg_login_req::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_login_req.deviceid)
}
inline std::string* msg_login_req::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_login_req.deviceid)
  return _internal_mutable_deviceid();
}
inline const std::string& msg_login_req::_internal_deviceid() const {
  return deviceid_.GetNoArena();
}
inline void msg_login_req::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg_login_req::set_deviceid(std::string&& value) {
  
  deviceid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.cli.msg_login_req.deviceid)
}
inline void msg_login_req::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.cli.msg_login_req.deviceid)
}
inline void msg_login_req::set_deviceid(const void* value, size_t size) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.cli.msg_login_req.deviceid)
}
inline std::string* msg_login_req::_internal_mutable_deviceid() {
  
  return deviceid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg_login_req::release_deviceid() {
  // @@protoc_insertion_point(field_release:net.cli.msg_login_req.deviceid)
  
  return deviceid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg_login_req::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_login_req.deviceid)
}

// bytes versionid = 4;
inline void msg_login_req::clear_versionid() {
  versionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg_login_req::versionid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_login_req.versionid)
  return _internal_versionid();
}
inline void msg_login_req::set_versionid(const std::string& value) {
  _internal_set_versionid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_login_req.versionid)
}
inline std::string* msg_login_req::mutable_versionid() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_login_req.versionid)
  return _internal_mutable_versionid();
}
inline const std::string& msg_login_req::_internal_versionid() const {
  return versionid_.GetNoArena();
}
inline void msg_login_req::_internal_set_versionid(const std::string& value) {
  
  versionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg_login_req::set_versionid(std::string&& value) {
  
  versionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.cli.msg_login_req.versionid)
}
inline void msg_login_req::set_versionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  versionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.cli.msg_login_req.versionid)
}
inline void msg_login_req::set_versionid(const void* value, size_t size) {
  
  versionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.cli.msg_login_req.versionid)
}
inline std::string* msg_login_req::_internal_mutable_versionid() {
  
  return versionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg_login_req::release_versionid() {
  // @@protoc_insertion_point(field_release:net.cli.msg_login_req.versionid)
  
  return versionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg_login_req::set_allocated_versionid(std::string* versionid) {
  if (versionid != nullptr) {
    
  } else {
    
  }
  versionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), versionid);
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_login_req.versionid)
}

// uint32 check_time = 5;
inline void msg_login_req::clear_check_time() {
  check_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_login_req::_internal_check_time() const {
  return check_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_login_req::check_time() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_login_req.check_time)
  return _internal_check_time();
}
inline void msg_login_req::_internal_set_check_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  check_time_ = value;
}
inline void msg_login_req::set_check_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_check_time(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_login_req.check_time)
}

// -------------------------------------------------------------------

// msg_login_rep

// uint32 result = 1;
inline void msg_login_rep::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_login_rep::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_login_rep::result() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_login_rep.result)
  return _internal_result();
}
inline void msg_login_rep::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void msg_login_rep::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_login_rep.result)
}

// uint32 server_time = 2;
inline void msg_login_rep::clear_server_time() {
  server_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_login_rep::_internal_server_time() const {
  return server_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_login_rep::server_time() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_login_rep.server_time)
  return _internal_server_time();
}
inline void msg_login_rep::_internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_time_ = value;
}
inline void msg_login_rep::set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_time(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_login_rep.server_time)
}

// -------------------------------------------------------------------

// msg_loginout_rep

// uint32 reason = 1;
inline void msg_loginout_rep::clear_reason() {
  reason_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_loginout_rep::_internal_reason() const {
  return reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_loginout_rep::reason() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_loginout_rep.reason)
  return _internal_reason();
}
inline void msg_loginout_rep::_internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reason_ = value;
}
inline void msg_loginout_rep::set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_loginout_rep.reason)
}

// bytes deviceid = 2;
inline void msg_loginout_rep::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg_loginout_rep::deviceid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_loginout_rep.deviceid)
  return _internal_deviceid();
}
inline void msg_loginout_rep::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_loginout_rep.deviceid)
}
inline std::string* msg_loginout_rep::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_loginout_rep.deviceid)
  return _internal_mutable_deviceid();
}
inline const std::string& msg_loginout_rep::_internal_deviceid() const {
  return deviceid_.GetNoArena();
}
inline void msg_loginout_rep::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg_loginout_rep::set_deviceid(std::string&& value) {
  
  deviceid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.cli.msg_loginout_rep.deviceid)
}
inline void msg_loginout_rep::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.cli.msg_loginout_rep.deviceid)
}
inline void msg_loginout_rep::set_deviceid(const void* value, size_t size) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.cli.msg_loginout_rep.deviceid)
}
inline std::string* msg_loginout_rep::_internal_mutable_deviceid() {
  
  return deviceid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg_loginout_rep::release_deviceid() {
  // @@protoc_insertion_point(field_release:net.cli.msg_loginout_rep.deviceid)
  
  return deviceid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg_loginout_rep::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_loginout_rep.deviceid)
}

// -------------------------------------------------------------------

// msg_version_info_rep

// bytes version = 1;
inline void msg_version_info_rep::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg_version_info_rep::version() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_version_info_rep.version)
  return _internal_version();
}
inline void msg_version_info_rep::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_version_info_rep.version)
}
inline std::string* msg_version_info_rep::mutable_version() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_version_info_rep.version)
  return _internal_mutable_version();
}
inline const std::string& msg_version_info_rep::_internal_version() const {
  return version_.GetNoArena();
}
inline void msg_version_info_rep::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg_version_info_rep::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.cli.msg_version_info_rep.version)
}
inline void msg_version_info_rep::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.cli.msg_version_info_rep.version)
}
inline void msg_version_info_rep::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.cli.msg_version_info_rep.version)
}
inline std::string* msg_version_info_rep::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg_version_info_rep::release_version() {
  // @@protoc_insertion_point(field_release:net.cli.msg_version_info_rep.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg_version_info_rep::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_version_info_rep.version)
}

// -------------------------------------------------------------------

// msg_enter_game_rep

// uint32 result = 1;
inline void msg_enter_game_rep::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_game_rep::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_game_rep::result() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_enter_game_rep.result)
  return _internal_result();
}
inline void msg_enter_game_rep::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void msg_enter_game_rep::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_enter_game_rep.result)
}

// -------------------------------------------------------------------

// msg_player_data_rep

// .net.base_info base_data = 1;
inline bool msg_player_data_rep::_internal_has_base_data() const {
  return this != internal_default_instance() && base_data_ != nullptr;
}
inline bool msg_player_data_rep::has_base_data() const {
  return _internal_has_base_data();
}
inline const ::net::base_info& msg_player_data_rep::_internal_base_data() const {
  const ::net::base_info* p = base_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::net::base_info*>(
      &::net::_base_info_default_instance_);
}
inline const ::net::base_info& msg_player_data_rep::base_data() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_player_data_rep.base_data)
  return _internal_base_data();
}
inline ::net::base_info* msg_player_data_rep::release_base_data() {
  // @@protoc_insertion_point(field_release:net.cli.msg_player_data_rep.base_data)
  
  ::net::base_info* temp = base_data_;
  base_data_ = nullptr;
  return temp;
}
inline ::net::base_info* msg_player_data_rep::_internal_mutable_base_data() {
  
  if (base_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::net::base_info>(GetArenaNoVirtual());
    base_data_ = p;
  }
  return base_data_;
}
inline ::net::base_info* msg_player_data_rep::mutable_base_data() {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_player_data_rep.base_data)
  return _internal_mutable_base_data();
}
inline void msg_player_data_rep::set_allocated_base_data(::net::base_info* base_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_data_);
  }
  if (base_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_data, submessage_arena);
    }
    
  } else {
    
  }
  base_data_ = base_data;
  // @@protoc_insertion_point(field_set_allocated:net.cli.msg_player_data_rep.base_data)
}

// -------------------------------------------------------------------

// msg_svrs_info_req

// uint32 game_type = 1;
inline void msg_svrs_info_req::clear_game_type() {
  game_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_svrs_info_req::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_svrs_info_req::game_type() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_svrs_info_req.game_type)
  return _internal_game_type();
}
inline void msg_svrs_info_req::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  game_type_ = value;
}
inline void msg_svrs_info_req::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_svrs_info_req.game_type)
}

// -------------------------------------------------------------------

// msg_svrs_info_rep

// repeated .net.svr_info svrs = 1;
inline int msg_svrs_info_rep::_internal_svrs_size() const {
  return svrs_.size();
}
inline int msg_svrs_info_rep::svrs_size() const {
  return _internal_svrs_size();
}
inline ::net::svr_info* msg_svrs_info_rep::mutable_svrs(int index) {
  // @@protoc_insertion_point(field_mutable:net.cli.msg_svrs_info_rep.svrs)
  return svrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::svr_info >*
msg_svrs_info_rep::mutable_svrs() {
  // @@protoc_insertion_point(field_mutable_list:net.cli.msg_svrs_info_rep.svrs)
  return &svrs_;
}
inline const ::net::svr_info& msg_svrs_info_rep::_internal_svrs(int index) const {
  return svrs_.Get(index);
}
inline const ::net::svr_info& msg_svrs_info_rep::svrs(int index) const {
  // @@protoc_insertion_point(field_get:net.cli.msg_svrs_info_rep.svrs)
  return _internal_svrs(index);
}
inline ::net::svr_info* msg_svrs_info_rep::_internal_add_svrs() {
  return svrs_.Add();
}
inline ::net::svr_info* msg_svrs_info_rep::add_svrs() {
  // @@protoc_insertion_point(field_add:net.cli.msg_svrs_info_rep.svrs)
  return _internal_add_svrs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::svr_info >&
msg_svrs_info_rep::svrs() const {
  // @@protoc_insertion_point(field_list:net.cli.msg_svrs_info_rep.svrs)
  return svrs_;
}

// uint32 cur_svrid = 2;
inline void msg_svrs_info_rep::clear_cur_svrid() {
  cur_svrid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_svrs_info_rep::_internal_cur_svrid() const {
  return cur_svrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_svrs_info_rep::cur_svrid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_svrs_info_rep.cur_svrid)
  return _internal_cur_svrid();
}
inline void msg_svrs_info_rep::_internal_set_cur_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cur_svrid_ = value;
}
inline void msg_svrs_info_rep::set_cur_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cur_svrid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_svrs_info_rep.cur_svrid)
}

// -------------------------------------------------------------------

// msg_enter_gamesvr_req

// uint32 svrid = 1;
inline void msg_enter_gamesvr_req::clear_svrid() {
  svrid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_gamesvr_req::_internal_svrid() const {
  return svrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_gamesvr_req::svrid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_enter_gamesvr_req.svrid)
  return _internal_svrid();
}
inline void msg_enter_gamesvr_req::_internal_set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  svrid_ = value;
}
inline void msg_enter_gamesvr_req::set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_svrid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_enter_gamesvr_req.svrid)
}

// -------------------------------------------------------------------

// msg_enter_gamesvr_rep

// uint32 result = 1;
inline void msg_enter_gamesvr_rep::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_gamesvr_rep::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_gamesvr_rep::result() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_enter_gamesvr_rep.result)
  return _internal_result();
}
inline void msg_enter_gamesvr_rep::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void msg_enter_gamesvr_rep::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_enter_gamesvr_rep.result)
}

// uint32 svrid = 2;
inline void msg_enter_gamesvr_rep::clear_svrid() {
  svrid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_gamesvr_rep::_internal_svrid() const {
  return svrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_gamesvr_rep::svrid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_enter_gamesvr_rep.svrid)
  return _internal_svrid();
}
inline void msg_enter_gamesvr_rep::_internal_set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  svrid_ = value;
}
inline void msg_enter_gamesvr_rep::set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_svrid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_enter_gamesvr_rep.svrid)
}

// -------------------------------------------------------------------

// msg_back_lobby_req

// uint32 uid = 1;
inline void msg_back_lobby_req::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_back_lobby_req::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_back_lobby_req::uid() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_back_lobby_req.uid)
  return _internal_uid();
}
inline void msg_back_lobby_req::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void msg_back_lobby_req::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_back_lobby_req.uid)
}

// uint32 is_action = 2;
inline void msg_back_lobby_req::clear_is_action() {
  is_action_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_back_lobby_req::_internal_is_action() const {
  return is_action_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_back_lobby_req::is_action() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_back_lobby_req.is_action)
  return _internal_is_action();
}
inline void msg_back_lobby_req::_internal_set_is_action(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  is_action_ = value;
}
inline void msg_back_lobby_req::set_is_action(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_is_action(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_back_lobby_req.is_action)
}

// -------------------------------------------------------------------

// msg_back_lobby_rep

// uint32 result = 1;
inline void msg_back_lobby_rep::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_back_lobby_rep::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_back_lobby_rep::result() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_back_lobby_rep.result)
  return _internal_result();
}
inline void msg_back_lobby_rep::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void msg_back_lobby_rep::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_back_lobby_rep.result)
}

// uint32 reason = 2;
inline void msg_back_lobby_rep::clear_reason() {
  reason_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_back_lobby_rep::_internal_reason() const {
  return reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_back_lobby_rep::reason() const {
  // @@protoc_insertion_point(field_get:net.cli.msg_back_lobby_rep.reason)
  return _internal_reason();
}
inline void msg_back_lobby_rep::_internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reason_ = value;
}
inline void msg_back_lobby_rep::set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:net.cli.msg_back_lobby_rep.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cli
}  // namespace net

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5flogic_5fmsg_2eproto
