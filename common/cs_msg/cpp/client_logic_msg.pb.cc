// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_logic_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client_logic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {
namespace cli {

namespace {

const ::google::protobuf::Descriptor* msg_heart_test_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_heart_test_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_login_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_login_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_login_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_login_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_loginout_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_loginout_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_version_info_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_version_info_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_enter_game_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_enter_game_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_player_data_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_player_data_rep_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_5flogic_5fmsg_2eproto() {
  protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client_logic_msg.proto");
  GOOGLE_CHECK(file != NULL);
  msg_heart_test_descriptor_ = file->message_type(0);
  static const int msg_heart_test_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_heart_test, svr_time_),
  };
  msg_heart_test_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_heart_test_descriptor_,
      msg_heart_test::default_instance_,
      msg_heart_test_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_heart_test, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_heart_test, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_heart_test));
  msg_login_req_descriptor_ = file->message_type(1);
  static const int msg_login_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_req, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_req, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_req, versionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_req, check_time_),
  };
  msg_login_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_login_req_descriptor_,
      msg_login_req::default_instance_,
      msg_login_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_login_req));
  msg_login_rep_descriptor_ = file->message_type(2);
  static const int msg_login_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_rep, server_time_),
  };
  msg_login_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_login_rep_descriptor_,
      msg_login_rep::default_instance_,
      msg_login_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_login_rep));
  msg_loginout_rep_descriptor_ = file->message_type(3);
  static const int msg_loginout_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_loginout_rep, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_loginout_rep, deviceid_),
  };
  msg_loginout_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_loginout_rep_descriptor_,
      msg_loginout_rep::default_instance_,
      msg_loginout_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_loginout_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_loginout_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_loginout_rep));
  msg_version_info_rep_descriptor_ = file->message_type(4);
  static const int msg_version_info_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_version_info_rep, version_),
  };
  msg_version_info_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_version_info_rep_descriptor_,
      msg_version_info_rep::default_instance_,
      msg_version_info_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_version_info_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_version_info_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_version_info_rep));
  msg_enter_game_rep_descriptor_ = file->message_type(5);
  static const int msg_enter_game_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_game_rep, result_),
  };
  msg_enter_game_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_enter_game_rep_descriptor_,
      msg_enter_game_rep::default_instance_,
      msg_enter_game_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_game_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_game_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_enter_game_rep));
  msg_player_data_rep_descriptor_ = file->message_type(6);
  static const int msg_player_data_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_data_rep, base_data_),
  };
  msg_player_data_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_player_data_rep_descriptor_,
      msg_player_data_rep::default_instance_,
      msg_player_data_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_data_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_data_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_player_data_rep));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_5flogic_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_heart_test_descriptor_, &msg_heart_test::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_login_req_descriptor_, &msg_login_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_login_rep_descriptor_, &msg_login_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_loginout_rep_descriptor_, &msg_loginout_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_version_info_rep_descriptor_, &msg_version_info_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_enter_game_rep_descriptor_, &msg_enter_game_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_player_data_rep_descriptor_, &msg_player_data_rep::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_5flogic_5fmsg_2eproto() {
  delete msg_heart_test::default_instance_;
  delete msg_heart_test_reflection_;
  delete msg_login_req::default_instance_;
  delete msg_login_req_reflection_;
  delete msg_login_rep::default_instance_;
  delete msg_login_rep_reflection_;
  delete msg_loginout_rep::default_instance_;
  delete msg_loginout_rep_reflection_;
  delete msg_version_info_rep::default_instance_;
  delete msg_version_info_rep_reflection_;
  delete msg_enter_game_rep::default_instance_;
  delete msg_enter_game_rep_reflection_;
  delete msg_player_data_rep::default_instance_;
  delete msg_player_data_rep_reflection_;
}

void protobuf_AddDesc_client_5flogic_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::net::protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026client_logic_msg.proto\022\007net.cli\032\025base_"
    "msg_struct.proto\"\"\n\016msg_heart_test\022\020\n\010sv"
    "r_time\030\001 \001(\r\"b\n\rmsg_login_req\022\013\n\003uid\030\001 \001"
    "(\r\022\013\n\003key\030\002 \001(\014\022\020\n\010deviceid\030\003 \001(\014\022\021\n\tver"
    "sionid\030\004 \001(\014\022\022\n\ncheck_time\030\005 \001(\r\"4\n\rmsg_"
    "login_rep\022\016\n\006result\030\001 \001(\r\022\023\n\013server_time"
    "\030\002 \001(\r\"4\n\020msg_loginout_rep\022\016\n\006reason\030\001 \001"
    "(\r\022\020\n\010deviceid\030\002 \001(\014\"\'\n\024msg_version_info"
    "_rep\022\017\n\007version\030\001 \001(\014\"$\n\022msg_enter_game_"
    "rep\022\016\n\006result\030\001 \001(\r\"8\n\023msg_player_data_r"
    "ep\022!\n\tbase_data\030\001 \001(\0132\016.net.base_info", 437);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client_logic_msg.proto", &protobuf_RegisterTypes);
  msg_heart_test::default_instance_ = new msg_heart_test();
  msg_login_req::default_instance_ = new msg_login_req();
  msg_login_rep::default_instance_ = new msg_login_rep();
  msg_loginout_rep::default_instance_ = new msg_loginout_rep();
  msg_version_info_rep::default_instance_ = new msg_version_info_rep();
  msg_enter_game_rep::default_instance_ = new msg_enter_game_rep();
  msg_player_data_rep::default_instance_ = new msg_player_data_rep();
  msg_heart_test::default_instance_->InitAsDefaultInstance();
  msg_login_req::default_instance_->InitAsDefaultInstance();
  msg_login_rep::default_instance_->InitAsDefaultInstance();
  msg_loginout_rep::default_instance_->InitAsDefaultInstance();
  msg_version_info_rep::default_instance_->InitAsDefaultInstance();
  msg_enter_game_rep::default_instance_->InitAsDefaultInstance();
  msg_player_data_rep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_5flogic_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_5flogic_5fmsg_2eproto {
  StaticDescriptorInitializer_client_5flogic_5fmsg_2eproto() {
    protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  }
} static_descriptor_initializer_client_5flogic_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_heart_test::kSvrTimeFieldNumber;
#endif  // !_MSC_VER

msg_heart_test::msg_heart_test()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_heart_test::InitAsDefaultInstance() {
}

msg_heart_test::msg_heart_test(const msg_heart_test& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_heart_test::SharedCtor() {
  _cached_size_ = 0;
  svr_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_heart_test::~msg_heart_test() {
  SharedDtor();
}

void msg_heart_test::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_heart_test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_heart_test::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_heart_test_descriptor_;
}

const msg_heart_test& msg_heart_test::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_heart_test* msg_heart_test::default_instance_ = NULL;

msg_heart_test* msg_heart_test::New() const {
  return new msg_heart_test;
}

void msg_heart_test::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_heart_test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svr_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_time_)));
          set_has_svr_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_heart_test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svr_time = 1;
  if (has_svr_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svr_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_heart_test::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svr_time = 1;
  if (has_svr_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svr_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_heart_test::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svr_time = 1;
    if (has_svr_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_heart_test::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_heart_test* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_heart_test*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_heart_test::MergeFrom(const msg_heart_test& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_time()) {
      set_svr_time(from.svr_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_heart_test::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_heart_test::CopyFrom(const msg_heart_test& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_heart_test::IsInitialized() const {

  return true;
}

void msg_heart_test::Swap(msg_heart_test* other) {
  if (other != this) {
    std::swap(svr_time_, other->svr_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_heart_test::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_heart_test_descriptor_;
  metadata.reflection = msg_heart_test_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_login_req::kUidFieldNumber;
const int msg_login_req::kKeyFieldNumber;
const int msg_login_req::kDeviceidFieldNumber;
const int msg_login_req::kVersionidFieldNumber;
const int msg_login_req::kCheckTimeFieldNumber;
#endif  // !_MSC_VER

msg_login_req::msg_login_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_login_req::InitAsDefaultInstance() {
}

msg_login_req::msg_login_req(const msg_login_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_login_req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  versionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  check_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_login_req::~msg_login_req() {
  SharedDtor();
}

void msg_login_req::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (versionid_ != &::google::protobuf::internal::kEmptyString) {
    delete versionid_;
  }
  if (this != default_instance_) {
  }
}

void msg_login_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_login_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_login_req_descriptor_;
}

const msg_login_req& msg_login_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_login_req* msg_login_req::default_instance_ = NULL;

msg_login_req* msg_login_req::New() const {
  return new msg_login_req;
}

void msg_login_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    if (has_versionid()) {
      if (versionid_ != &::google::protobuf::internal::kEmptyString) {
        versionid_->clear();
      }
    }
    check_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_login_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deviceid;
        break;
      }

      // optional bytes deviceid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deviceid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_versionid;
        break;
      }

      // optional bytes versionid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_versionid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_versionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_check_time;
        break;
      }

      // optional uint32 check_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &check_time_)));
          set_has_check_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_login_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(), output);
  }

  // optional bytes deviceid = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->deviceid(), output);
  }

  // optional bytes versionid = 4;
  if (has_versionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->versionid(), output);
  }

  // optional uint32 check_time = 5;
  if (has_check_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->check_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_login_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes deviceid = 3;
  if (has_deviceid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->deviceid(), target);
  }

  // optional bytes versionid = 4;
  if (has_versionid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->versionid(), target);
  }

  // optional uint32 check_time = 5;
  if (has_check_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->check_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_login_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes deviceid = 3;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deviceid());
    }

    // optional bytes versionid = 4;
    if (has_versionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->versionid());
    }

    // optional uint32 check_time = 5;
    if (has_check_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->check_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_login_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_login_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_login_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_login_req::MergeFrom(const msg_login_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_versionid()) {
      set_versionid(from.versionid());
    }
    if (from.has_check_time()) {
      set_check_time(from.check_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_login_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_login_req::CopyFrom(const msg_login_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_login_req::IsInitialized() const {

  return true;
}

void msg_login_req::Swap(msg_login_req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(key_, other->key_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(versionid_, other->versionid_);
    std::swap(check_time_, other->check_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_login_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_login_req_descriptor_;
  metadata.reflection = msg_login_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_login_rep::kResultFieldNumber;
const int msg_login_rep::kServerTimeFieldNumber;
#endif  // !_MSC_VER

msg_login_rep::msg_login_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_login_rep::InitAsDefaultInstance() {
}

msg_login_rep::msg_login_rep(const msg_login_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_login_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  server_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_login_rep::~msg_login_rep() {
  SharedDtor();
}

void msg_login_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_login_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_login_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_login_rep_descriptor_;
}

const msg_login_rep& msg_login_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_login_rep* msg_login_rep::default_instance_ = NULL;

msg_login_rep* msg_login_rep::New() const {
  return new msg_login_rep;
}

void msg_login_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    server_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_login_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_time;
        break;
      }

      // optional uint32 server_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_login_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 server_time = 2;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_login_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 server_time = 2;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_login_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 server_time = 2;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_login_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_login_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_login_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_login_rep::MergeFrom(const msg_login_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_login_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_login_rep::CopyFrom(const msg_login_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_login_rep::IsInitialized() const {

  return true;
}

void msg_login_rep::Swap(msg_login_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(server_time_, other->server_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_login_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_login_rep_descriptor_;
  metadata.reflection = msg_login_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_loginout_rep::kReasonFieldNumber;
const int msg_loginout_rep::kDeviceidFieldNumber;
#endif  // !_MSC_VER

msg_loginout_rep::msg_loginout_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_loginout_rep::InitAsDefaultInstance() {
}

msg_loginout_rep::msg_loginout_rep(const msg_loginout_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_loginout_rep::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0u;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_loginout_rep::~msg_loginout_rep() {
  SharedDtor();
}

void msg_loginout_rep::SharedDtor() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void msg_loginout_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_loginout_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_loginout_rep_descriptor_;
}

const msg_loginout_rep& msg_loginout_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_loginout_rep* msg_loginout_rep::default_instance_ = NULL;

msg_loginout_rep* msg_loginout_rep::New() const {
  return new msg_loginout_rep;
}

void msg_loginout_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0u;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_loginout_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deviceid;
        break;
      }

      // optional bytes deviceid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deviceid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_loginout_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reason(), output);
  }

  // optional bytes deviceid = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->deviceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_loginout_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reason(), target);
  }

  // optional bytes deviceid = 2;
  if (has_deviceid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->deviceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_loginout_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

    // optional bytes deviceid = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deviceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_loginout_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_loginout_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_loginout_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_loginout_rep::MergeFrom(const msg_loginout_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_loginout_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_loginout_rep::CopyFrom(const msg_loginout_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_loginout_rep::IsInitialized() const {

  return true;
}

void msg_loginout_rep::Swap(msg_loginout_rep* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_loginout_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_loginout_rep_descriptor_;
  metadata.reflection = msg_loginout_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_version_info_rep::kVersionFieldNumber;
#endif  // !_MSC_VER

msg_version_info_rep::msg_version_info_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_version_info_rep::InitAsDefaultInstance() {
}

msg_version_info_rep::msg_version_info_rep(const msg_version_info_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_version_info_rep::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_version_info_rep::~msg_version_info_rep() {
  SharedDtor();
}

void msg_version_info_rep::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void msg_version_info_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_version_info_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_version_info_rep_descriptor_;
}

const msg_version_info_rep& msg_version_info_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_version_info_rep* msg_version_info_rep::default_instance_ = NULL;

msg_version_info_rep* msg_version_info_rep::New() const {
  return new msg_version_info_rep;
}

void msg_version_info_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_version_info_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_version_info_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_version_info_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes version = 1;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_version_info_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_version_info_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_version_info_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_version_info_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_version_info_rep::MergeFrom(const msg_version_info_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_version_info_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_version_info_rep::CopyFrom(const msg_version_info_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_version_info_rep::IsInitialized() const {

  return true;
}

void msg_version_info_rep::Swap(msg_version_info_rep* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_version_info_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_version_info_rep_descriptor_;
  metadata.reflection = msg_version_info_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_enter_game_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_enter_game_rep::msg_enter_game_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_enter_game_rep::InitAsDefaultInstance() {
}

msg_enter_game_rep::msg_enter_game_rep(const msg_enter_game_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_enter_game_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_enter_game_rep::~msg_enter_game_rep() {
  SharedDtor();
}

void msg_enter_game_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_enter_game_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_enter_game_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_enter_game_rep_descriptor_;
}

const msg_enter_game_rep& msg_enter_game_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_enter_game_rep* msg_enter_game_rep::default_instance_ = NULL;

msg_enter_game_rep* msg_enter_game_rep::New() const {
  return new msg_enter_game_rep;
}

void msg_enter_game_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_enter_game_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_enter_game_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_enter_game_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_enter_game_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_enter_game_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_enter_game_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_enter_game_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_enter_game_rep::MergeFrom(const msg_enter_game_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_enter_game_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_game_rep::CopyFrom(const msg_enter_game_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_game_rep::IsInitialized() const {

  return true;
}

void msg_enter_game_rep::Swap(msg_enter_game_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_enter_game_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_enter_game_rep_descriptor_;
  metadata.reflection = msg_enter_game_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_player_data_rep::kBaseDataFieldNumber;
#endif  // !_MSC_VER

msg_player_data_rep::msg_player_data_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_player_data_rep::InitAsDefaultInstance() {
  base_data_ = const_cast< ::net::base_info*>(&::net::base_info::default_instance());
}

msg_player_data_rep::msg_player_data_rep(const msg_player_data_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_player_data_rep::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_player_data_rep::~msg_player_data_rep() {
  SharedDtor();
}

void msg_player_data_rep::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void msg_player_data_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_player_data_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_player_data_rep_descriptor_;
}

const msg_player_data_rep& msg_player_data_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_player_data_rep* msg_player_data_rep::default_instance_ = NULL;

msg_player_data_rep* msg_player_data_rep::New() const {
  return new msg_player_data_rep;
}

void msg_player_data_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::net::base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_player_data_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .net.base_info base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_player_data_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .net.base_info base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_player_data_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .net.base_info base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_player_data_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .net.base_info base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_player_data_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_player_data_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_player_data_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_player_data_rep::MergeFrom(const msg_player_data_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::net::base_info::MergeFrom(from.base_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_player_data_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_data_rep::CopyFrom(const msg_player_data_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_data_rep::IsInitialized() const {

  return true;
}

void msg_player_data_rep::Swap(msg_player_data_rep* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_player_data_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_player_data_rep_descriptor_;
  metadata.reflection = msg_player_data_rep_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cli
}  // namespace net

// @@protoc_insertion_point(global_scope)
