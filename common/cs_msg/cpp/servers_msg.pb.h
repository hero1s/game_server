// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: servers_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_servers_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_servers_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_msg_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_servers_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_servers_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_servers_5fmsg_2eproto;
namespace net {
namespace svr {
class msg_async_exec_sql;
class msg_async_exec_sqlDefaultTypeInternal;
extern msg_async_exec_sqlDefaultTypeInternal _msg_async_exec_sql_default_instance_;
class msg_enter_into_game_svr;
class msg_enter_into_game_svrDefaultTypeInternal;
extern msg_enter_into_game_svrDefaultTypeInternal _msg_enter_into_game_svr_default_instance_;
class msg_leave_svr;
class msg_leave_svrDefaultTypeInternal;
extern msg_leave_svrDefaultTypeInternal _msg_leave_svr_default_instance_;
class msg_load_player_data;
class msg_load_player_dataDefaultTypeInternal;
extern msg_load_player_dataDefaultTypeInternal _msg_load_player_data_default_instance_;
class msg_load_player_data_rep;
class msg_load_player_data_repDefaultTypeInternal;
extern msg_load_player_data_repDefaultTypeInternal _msg_load_player_data_rep_default_instance_;
class msg_notify_net_state;
class msg_notify_net_stateDefaultTypeInternal;
extern msg_notify_net_stateDefaultTypeInternal _msg_notify_net_state_default_instance_;
class msg_notify_player_lobby_login;
class msg_notify_player_lobby_loginDefaultTypeInternal;
extern msg_notify_player_lobby_loginDefaultTypeInternal _msg_notify_player_lobby_login_default_instance_;
class msg_register_svr_rep;
class msg_register_svr_repDefaultTypeInternal;
extern msg_register_svr_repDefaultTypeInternal _msg_register_svr_rep_default_instance_;
class msg_register_svr_req;
class msg_register_svr_reqDefaultTypeInternal;
extern msg_register_svr_reqDefaultTypeInternal _msg_register_svr_req_default_instance_;
class msg_report_svr_info;
class msg_report_svr_infoDefaultTypeInternal;
extern msg_report_svr_infoDefaultTypeInternal _msg_report_svr_info_default_instance_;
class msg_save_player_data;
class msg_save_player_dataDefaultTypeInternal;
extern msg_save_player_dataDefaultTypeInternal _msg_save_player_data_default_instance_;
class msg_server_list_rep;
class msg_server_list_repDefaultTypeInternal;
extern msg_server_list_repDefaultTypeInternal _msg_server_list_rep_default_instance_;
class server_info;
class server_infoDefaultTypeInternal;
extern server_infoDefaultTypeInternal _server_info_default_instance_;
}  // namespace svr
}  // namespace net
PROTOBUF_NAMESPACE_OPEN
template<> ::net::svr::msg_async_exec_sql* Arena::CreateMaybeMessage<::net::svr::msg_async_exec_sql>(Arena*);
template<> ::net::svr::msg_enter_into_game_svr* Arena::CreateMaybeMessage<::net::svr::msg_enter_into_game_svr>(Arena*);
template<> ::net::svr::msg_leave_svr* Arena::CreateMaybeMessage<::net::svr::msg_leave_svr>(Arena*);
template<> ::net::svr::msg_load_player_data* Arena::CreateMaybeMessage<::net::svr::msg_load_player_data>(Arena*);
template<> ::net::svr::msg_load_player_data_rep* Arena::CreateMaybeMessage<::net::svr::msg_load_player_data_rep>(Arena*);
template<> ::net::svr::msg_notify_net_state* Arena::CreateMaybeMessage<::net::svr::msg_notify_net_state>(Arena*);
template<> ::net::svr::msg_notify_player_lobby_login* Arena::CreateMaybeMessage<::net::svr::msg_notify_player_lobby_login>(Arena*);
template<> ::net::svr::msg_register_svr_rep* Arena::CreateMaybeMessage<::net::svr::msg_register_svr_rep>(Arena*);
template<> ::net::svr::msg_register_svr_req* Arena::CreateMaybeMessage<::net::svr::msg_register_svr_req>(Arena*);
template<> ::net::svr::msg_report_svr_info* Arena::CreateMaybeMessage<::net::svr::msg_report_svr_info>(Arena*);
template<> ::net::svr::msg_save_player_data* Arena::CreateMaybeMessage<::net::svr::msg_save_player_data>(Arena*);
template<> ::net::svr::msg_server_list_rep* Arena::CreateMaybeMessage<::net::svr::msg_server_list_rep>(Arena*);
template<> ::net::svr::server_info* Arena::CreateMaybeMessage<::net::svr::server_info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace net {
namespace svr {

enum SERVER_MSG_ID : int {
  SERVER_MSG_ID_NULL = 0,
  S2S_MSG_REGISTER = 201,
  S2S_MSG_REGISTER_REP = 202,
  S2S_MSG_SERVER_LIST_REP = 203,
  S2DBA_MSG_ASYNC_EXEC_SQL = 310,
  S2DBA_LOAD_PLAYER_DATA = 311,
  DBA2S_LOAD_PLAYER_DATA_REP = 312,
  S2DBA_SAVE_PLAYER_DATA = 313,
  GS2L_MSG_REPORT = 503,
  GS2L_MSG_LEAVE_SVR = 504,
  L2GS_MSG_NOTIFY_NET_STATE = 505,
  L2GS_MSG_ENTER_INTO_SVR = 506,
  GS2L_MSG_NOTIFY_PLAYER_LOBBY_LOGIN = 507,
  SERVER_MSG_ID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SERVER_MSG_ID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SERVER_MSG_ID_IsValid(int value);
constexpr SERVER_MSG_ID SERVER_MSG_ID_MIN = SERVER_MSG_ID_NULL;
constexpr SERVER_MSG_ID SERVER_MSG_ID_MAX = GS2L_MSG_NOTIFY_PLAYER_LOBBY_LOGIN;
constexpr int SERVER_MSG_ID_ARRAYSIZE = SERVER_MSG_ID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SERVER_MSG_ID_descriptor();
template<typename T>
inline const std::string& SERVER_MSG_ID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SERVER_MSG_ID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SERVER_MSG_ID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SERVER_MSG_ID_descriptor(), enum_t_value);
}
inline bool SERVER_MSG_ID_Parse(
    const std::string& name, SERVER_MSG_ID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SERVER_MSG_ID>(
    SERVER_MSG_ID_descriptor(), name, value);
}
// ===================================================================

class server_info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.svr.server_info) */ {
 public:
  server_info();
  virtual ~server_info();

  server_info(const server_info& from);
  server_info(server_info&& from) noexcept
    : server_info() {
    *this = ::std::move(from);
  }

  inline server_info& operator=(const server_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline server_info& operator=(server_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const server_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const server_info* internal_default_instance() {
    return reinterpret_cast<const server_info*>(
               &_server_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(server_info& a, server_info& b) {
    a.Swap(&b);
  }
  inline void Swap(server_info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline server_info* New() const final {
    return CreateMaybeMessage<server_info>(nullptr);
  }

  server_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<server_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const server_info& from);
  void MergeFrom(const server_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(server_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.svr.server_info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_servers_5fmsg_2eproto);
    return ::descriptor_table_servers_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 5,
    kSvridFieldNumber = 1,
    kSvrTypeFieldNumber = 2,
    kGameTypeFieldNumber = 3,
    kGameSubtypeFieldNumber = 4,
  };
  // bytes uuid = 5;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // uint32 svrid = 1;
  void clear_svrid();
  ::PROTOBUF_NAMESPACE_ID::uint32 svrid() const;
  void set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_svrid() const;
  void _internal_set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 svr_type = 2;
  void clear_svr_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 svr_type() const;
  void set_svr_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_svr_type() const;
  void _internal_set_svr_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 game_type = 3;
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 game_subtype = 4;
  void clear_game_subtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_subtype() const;
  void set_game_subtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_subtype() const;
  void _internal_set_game_subtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.svr.server_info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 svrid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 svr_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_subtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_servers_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_register_svr_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.svr.msg_register_svr_req) */ {
 public:
  msg_register_svr_req();
  virtual ~msg_register_svr_req();

  msg_register_svr_req(const msg_register_svr_req& from);
  msg_register_svr_req(msg_register_svr_req&& from) noexcept
    : msg_register_svr_req() {
    *this = ::std::move(from);
  }

  inline msg_register_svr_req& operator=(const msg_register_svr_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_register_svr_req& operator=(msg_register_svr_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_register_svr_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_register_svr_req* internal_default_instance() {
    return reinterpret_cast<const msg_register_svr_req*>(
               &_msg_register_svr_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(msg_register_svr_req& a, msg_register_svr_req& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_register_svr_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_register_svr_req* New() const final {
    return CreateMaybeMessage<msg_register_svr_req>(nullptr);
  }

  msg_register_svr_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_register_svr_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_register_svr_req& from);
  void MergeFrom(const msg_register_svr_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_register_svr_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.svr.msg_register_svr_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_servers_5fmsg_2eproto);
    return ::descriptor_table_servers_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .net.svr.server_info info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::net::svr::server_info& info() const;
  ::net::svr::server_info* release_info();
  ::net::svr::server_info* mutable_info();
  void set_allocated_info(::net::svr::server_info* info);
  private:
  const ::net::svr::server_info& _internal_info() const;
  ::net::svr::server_info* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:net.svr.msg_register_svr_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::net::svr::server_info* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_servers_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_register_svr_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.svr.msg_register_svr_rep) */ {
 public:
  msg_register_svr_rep();
  virtual ~msg_register_svr_rep();

  msg_register_svr_rep(const msg_register_svr_rep& from);
  msg_register_svr_rep(msg_register_svr_rep&& from) noexcept
    : msg_register_svr_rep() {
    *this = ::std::move(from);
  }

  inline msg_register_svr_rep& operator=(const msg_register_svr_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_register_svr_rep& operator=(msg_register_svr_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_register_svr_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_register_svr_rep* internal_default_instance() {
    return reinterpret_cast<const msg_register_svr_rep*>(
               &_msg_register_svr_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(msg_register_svr_rep& a, msg_register_svr_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_register_svr_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_register_svr_rep* New() const final {
    return CreateMaybeMessage<msg_register_svr_rep>(nullptr);
  }

  msg_register_svr_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_register_svr_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_register_svr_rep& from);
  void MergeFrom(const msg_register_svr_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_register_svr_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.svr.msg_register_svr_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_servers_5fmsg_2eproto);
    return ::descriptor_table_servers_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.svr.msg_register_svr_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_servers_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_server_list_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.svr.msg_server_list_rep) */ {
 public:
  msg_server_list_rep();
  virtual ~msg_server_list_rep();

  msg_server_list_rep(const msg_server_list_rep& from);
  msg_server_list_rep(msg_server_list_rep&& from) noexcept
    : msg_server_list_rep() {
    *this = ::std::move(from);
  }

  inline msg_server_list_rep& operator=(const msg_server_list_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_server_list_rep& operator=(msg_server_list_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_server_list_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_server_list_rep* internal_default_instance() {
    return reinterpret_cast<const msg_server_list_rep*>(
               &_msg_server_list_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(msg_server_list_rep& a, msg_server_list_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_server_list_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_server_list_rep* New() const final {
    return CreateMaybeMessage<msg_server_list_rep>(nullptr);
  }

  msg_server_list_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_server_list_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_server_list_rep& from);
  void MergeFrom(const msg_server_list_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_server_list_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.svr.msg_server_list_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_servers_5fmsg_2eproto);
    return ::descriptor_table_servers_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerListFieldNumber = 1,
  };
  // repeated .net.svr.server_info server_list = 1;
  int server_list_size() const;
  private:
  int _internal_server_list_size() const;
  public:
  void clear_server_list();
  ::net::svr::server_info* mutable_server_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::svr::server_info >*
      mutable_server_list();
  private:
  const ::net::svr::server_info& _internal_server_list(int index) const;
  ::net::svr::server_info* _internal_add_server_list();
  public:
  const ::net::svr::server_info& server_list(int index) const;
  ::net::svr::server_info* add_server_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::svr::server_info >&
      server_list() const;

  // @@protoc_insertion_point(class_scope:net.svr.msg_server_list_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::svr::server_info > server_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_servers_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_async_exec_sql :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.svr.msg_async_exec_sql) */ {
 public:
  msg_async_exec_sql();
  virtual ~msg_async_exec_sql();

  msg_async_exec_sql(const msg_async_exec_sql& from);
  msg_async_exec_sql(msg_async_exec_sql&& from) noexcept
    : msg_async_exec_sql() {
    *this = ::std::move(from);
  }

  inline msg_async_exec_sql& operator=(const msg_async_exec_sql& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_async_exec_sql& operator=(msg_async_exec_sql&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_async_exec_sql& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_async_exec_sql* internal_default_instance() {
    return reinterpret_cast<const msg_async_exec_sql*>(
               &_msg_async_exec_sql_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(msg_async_exec_sql& a, msg_async_exec_sql& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_async_exec_sql* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_async_exec_sql* New() const final {
    return CreateMaybeMessage<msg_async_exec_sql>(nullptr);
  }

  msg_async_exec_sql* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_async_exec_sql>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_async_exec_sql& from);
  void MergeFrom(const msg_async_exec_sql& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_async_exec_sql* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.svr.msg_async_exec_sql";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_servers_5fmsg_2eproto);
    return ::descriptor_table_servers_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSqlStrFieldNumber = 2,
    kDbTypeFieldNumber = 1,
    kIsCompressFieldNumber = 3,
  };
  // bytes sql_str = 2;
  void clear_sql_str();
  const std::string& sql_str() const;
  void set_sql_str(const std::string& value);
  void set_sql_str(std::string&& value);
  void set_sql_str(const char* value);
  void set_sql_str(const void* value, size_t size);
  std::string* mutable_sql_str();
  std::string* release_sql_str();
  void set_allocated_sql_str(std::string* sql_str);
  private:
  const std::string& _internal_sql_str() const;
  void _internal_set_sql_str(const std::string& value);
  std::string* _internal_mutable_sql_str();
  public:

  // uint32 db_type = 1;
  void clear_db_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 db_type() const;
  void set_db_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_db_type() const;
  void _internal_set_db_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 is_compress = 3;
  void clear_is_compress();
  ::PROTOBUF_NAMESPACE_ID::uint32 is_compress() const;
  void set_is_compress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_is_compress() const;
  void _internal_set_is_compress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.svr.msg_async_exec_sql)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_str_;
  ::PROTOBUF_NAMESPACE_ID::uint32 db_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 is_compress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_servers_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_load_player_data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.svr.msg_load_player_data) */ {
 public:
  msg_load_player_data();
  virtual ~msg_load_player_data();

  msg_load_player_data(const msg_load_player_data& from);
  msg_load_player_data(msg_load_player_data&& from) noexcept
    : msg_load_player_data() {
    *this = ::std::move(from);
  }

  inline msg_load_player_data& operator=(const msg_load_player_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_load_player_data& operator=(msg_load_player_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_load_player_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_load_player_data* internal_default_instance() {
    return reinterpret_cast<const msg_load_player_data*>(
               &_msg_load_player_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(msg_load_player_data& a, msg_load_player_data& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_load_player_data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_load_player_data* New() const final {
    return CreateMaybeMessage<msg_load_player_data>(nullptr);
  }

  msg_load_player_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_load_player_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_load_player_data& from);
  void MergeFrom(const msg_load_player_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_load_player_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.svr.msg_load_player_data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_servers_5fmsg_2eproto);
    return ::descriptor_table_servers_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kDataTypeFieldNumber = 2,
  };
  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 data_type = 2;
  void clear_data_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_type() const;
  void set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_type() const;
  void _internal_set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.svr.msg_load_player_data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_servers_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_load_player_data_rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.svr.msg_load_player_data_rep) */ {
 public:
  msg_load_player_data_rep();
  virtual ~msg_load_player_data_rep();

  msg_load_player_data_rep(const msg_load_player_data_rep& from);
  msg_load_player_data_rep(msg_load_player_data_rep&& from) noexcept
    : msg_load_player_data_rep() {
    *this = ::std::move(from);
  }

  inline msg_load_player_data_rep& operator=(const msg_load_player_data_rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_load_player_data_rep& operator=(msg_load_player_data_rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_load_player_data_rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_load_player_data_rep* internal_default_instance() {
    return reinterpret_cast<const msg_load_player_data_rep*>(
               &_msg_load_player_data_rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(msg_load_player_data_rep& a, msg_load_player_data_rep& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_load_player_data_rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_load_player_data_rep* New() const final {
    return CreateMaybeMessage<msg_load_player_data_rep>(nullptr);
  }

  msg_load_player_data_rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_load_player_data_rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_load_player_data_rep& from);
  void MergeFrom(const msg_load_player_data_rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_load_player_data_rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.svr.msg_load_player_data_rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_servers_5fmsg_2eproto);
    return ::descriptor_table_servers_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadDataFieldNumber = 3,
    kUidFieldNumber = 1,
    kDataTypeFieldNumber = 2,
  };
  // bytes load_data = 3;
  void clear_load_data();
  const std::string& load_data() const;
  void set_load_data(const std::string& value);
  void set_load_data(std::string&& value);
  void set_load_data(const char* value);
  void set_load_data(const void* value, size_t size);
  std::string* mutable_load_data();
  std::string* release_load_data();
  void set_allocated_load_data(std::string* load_data);
  private:
  const std::string& _internal_load_data() const;
  void _internal_set_load_data(const std::string& value);
  std::string* _internal_mutable_load_data();
  public:

  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 data_type = 2;
  void clear_data_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_type() const;
  void set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_type() const;
  void _internal_set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.svr.msg_load_player_data_rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_servers_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_save_player_data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.svr.msg_save_player_data) */ {
 public:
  msg_save_player_data();
  virtual ~msg_save_player_data();

  msg_save_player_data(const msg_save_player_data& from);
  msg_save_player_data(msg_save_player_data&& from) noexcept
    : msg_save_player_data() {
    *this = ::std::move(from);
  }

  inline msg_save_player_data& operator=(const msg_save_player_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_save_player_data& operator=(msg_save_player_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_save_player_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_save_player_data* internal_default_instance() {
    return reinterpret_cast<const msg_save_player_data*>(
               &_msg_save_player_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(msg_save_player_data& a, msg_save_player_data& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_save_player_data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_save_player_data* New() const final {
    return CreateMaybeMessage<msg_save_player_data>(nullptr);
  }

  msg_save_player_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_save_player_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_save_player_data& from);
  void MergeFrom(const msg_save_player_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_save_player_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.svr.msg_save_player_data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_servers_5fmsg_2eproto);
    return ::descriptor_table_servers_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaveDataFieldNumber = 3,
    kUidFieldNumber = 1,
    kDataTypeFieldNumber = 2,
  };
  // bytes save_data = 3;
  void clear_save_data();
  const std::string& save_data() const;
  void set_save_data(const std::string& value);
  void set_save_data(std::string&& value);
  void set_save_data(const char* value);
  void set_save_data(const void* value, size_t size);
  std::string* mutable_save_data();
  std::string* release_save_data();
  void set_allocated_save_data(std::string* save_data);
  private:
  const std::string& _internal_save_data() const;
  void _internal_set_save_data(const std::string& value);
  std::string* _internal_mutable_save_data();
  public:

  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 data_type = 2;
  void clear_data_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_type() const;
  void set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_type() const;
  void _internal_set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.svr.msg_save_player_data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr save_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_servers_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_report_svr_info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.svr.msg_report_svr_info) */ {
 public:
  msg_report_svr_info();
  virtual ~msg_report_svr_info();

  msg_report_svr_info(const msg_report_svr_info& from);
  msg_report_svr_info(msg_report_svr_info&& from) noexcept
    : msg_report_svr_info() {
    *this = ::std::move(from);
  }

  inline msg_report_svr_info& operator=(const msg_report_svr_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_report_svr_info& operator=(msg_report_svr_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_report_svr_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_report_svr_info* internal_default_instance() {
    return reinterpret_cast<const msg_report_svr_info*>(
               &_msg_report_svr_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(msg_report_svr_info& a, msg_report_svr_info& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_report_svr_info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_report_svr_info* New() const final {
    return CreateMaybeMessage<msg_report_svr_info>(nullptr);
  }

  msg_report_svr_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_report_svr_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_report_svr_info& from);
  void MergeFrom(const msg_report_svr_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_report_svr_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.svr.msg_report_svr_info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_servers_5fmsg_2eproto);
    return ::descriptor_table_servers_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnlinesFieldNumber = 1,
  };
  // uint32 onlines = 1;
  void clear_onlines();
  ::PROTOBUF_NAMESPACE_ID::uint32 onlines() const;
  void set_onlines(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_onlines() const;
  void _internal_set_onlines(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.svr.msg_report_svr_info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 onlines_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_servers_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_leave_svr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.svr.msg_leave_svr) */ {
 public:
  msg_leave_svr();
  virtual ~msg_leave_svr();

  msg_leave_svr(const msg_leave_svr& from);
  msg_leave_svr(msg_leave_svr&& from) noexcept
    : msg_leave_svr() {
    *this = ::std::move(from);
  }

  inline msg_leave_svr& operator=(const msg_leave_svr& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_leave_svr& operator=(msg_leave_svr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_leave_svr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_leave_svr* internal_default_instance() {
    return reinterpret_cast<const msg_leave_svr*>(
               &_msg_leave_svr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(msg_leave_svr& a, msg_leave_svr& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_leave_svr* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_leave_svr* New() const final {
    return CreateMaybeMessage<msg_leave_svr>(nullptr);
  }

  msg_leave_svr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_leave_svr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_leave_svr& from);
  void MergeFrom(const msg_leave_svr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_leave_svr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.svr.msg_leave_svr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_servers_5fmsg_2eproto);
    return ::descriptor_table_servers_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.svr.msg_leave_svr)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_servers_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_notify_net_state :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.svr.msg_notify_net_state) */ {
 public:
  msg_notify_net_state();
  virtual ~msg_notify_net_state();

  msg_notify_net_state(const msg_notify_net_state& from);
  msg_notify_net_state(msg_notify_net_state&& from) noexcept
    : msg_notify_net_state() {
    *this = ::std::move(from);
  }

  inline msg_notify_net_state& operator=(const msg_notify_net_state& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_notify_net_state& operator=(msg_notify_net_state&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_notify_net_state& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_notify_net_state* internal_default_instance() {
    return reinterpret_cast<const msg_notify_net_state*>(
               &_msg_notify_net_state_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(msg_notify_net_state& a, msg_notify_net_state& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_notify_net_state* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_notify_net_state* New() const final {
    return CreateMaybeMessage<msg_notify_net_state>(nullptr);
  }

  msg_notify_net_state* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_notify_net_state>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_notify_net_state& from);
  void MergeFrom(const msg_notify_net_state& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_notify_net_state* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.svr.msg_notify_net_state";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_servers_5fmsg_2eproto);
    return ::descriptor_table_servers_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kStateFieldNumber = 2,
    kNewipFieldNumber = 3,
    kNoPlayerFieldNumber = 4,
  };
  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 newip = 3;
  void clear_newip();
  ::PROTOBUF_NAMESPACE_ID::uint32 newip() const;
  void set_newip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_newip() const;
  void _internal_set_newip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 no_player = 4;
  void clear_no_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 no_player() const;
  void set_no_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_no_player() const;
  void _internal_set_no_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.svr.msg_notify_net_state)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 newip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 no_player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_servers_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_enter_into_game_svr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.svr.msg_enter_into_game_svr) */ {
 public:
  msg_enter_into_game_svr();
  virtual ~msg_enter_into_game_svr();

  msg_enter_into_game_svr(const msg_enter_into_game_svr& from);
  msg_enter_into_game_svr(msg_enter_into_game_svr&& from) noexcept
    : msg_enter_into_game_svr() {
    *this = ::std::move(from);
  }

  inline msg_enter_into_game_svr& operator=(const msg_enter_into_game_svr& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_enter_into_game_svr& operator=(msg_enter_into_game_svr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_enter_into_game_svr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_enter_into_game_svr* internal_default_instance() {
    return reinterpret_cast<const msg_enter_into_game_svr*>(
               &_msg_enter_into_game_svr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(msg_enter_into_game_svr& a, msg_enter_into_game_svr& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_enter_into_game_svr* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_enter_into_game_svr* New() const final {
    return CreateMaybeMessage<msg_enter_into_game_svr>(nullptr);
  }

  msg_enter_into_game_svr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_enter_into_game_svr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_enter_into_game_svr& from);
  void MergeFrom(const msg_enter_into_game_svr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_enter_into_game_svr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.svr.msg_enter_into_game_svr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_servers_5fmsg_2eproto);
    return ::descriptor_table_servers_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseDataFieldNumber = 2,
    kPlayerTypeFieldNumber = 1,
    kPlayTypeFieldNumber = 3,
  };
  // .net.base_info base_data = 2;
  bool has_base_data() const;
  private:
  bool _internal_has_base_data() const;
  public:
  void clear_base_data();
  const ::net::base_info& base_data() const;
  ::net::base_info* release_base_data();
  ::net::base_info* mutable_base_data();
  void set_allocated_base_data(::net::base_info* base_data);
  private:
  const ::net::base_info& _internal_base_data() const;
  ::net::base_info* _internal_mutable_base_data();
  public:

  // uint32 player_type = 1;
  void clear_player_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_type() const;
  void set_player_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_type() const;
  void _internal_set_player_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 play_type = 3;
  void clear_play_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 play_type() const;
  void set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_play_type() const;
  void _internal_set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.svr.msg_enter_into_game_svr)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::net::base_info* base_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 play_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_servers_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class msg_notify_player_lobby_login :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.svr.msg_notify_player_lobby_login) */ {
 public:
  msg_notify_player_lobby_login();
  virtual ~msg_notify_player_lobby_login();

  msg_notify_player_lobby_login(const msg_notify_player_lobby_login& from);
  msg_notify_player_lobby_login(msg_notify_player_lobby_login&& from) noexcept
    : msg_notify_player_lobby_login() {
    *this = ::std::move(from);
  }

  inline msg_notify_player_lobby_login& operator=(const msg_notify_player_lobby_login& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_notify_player_lobby_login& operator=(msg_notify_player_lobby_login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg_notify_player_lobby_login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_notify_player_lobby_login* internal_default_instance() {
    return reinterpret_cast<const msg_notify_player_lobby_login*>(
               &_msg_notify_player_lobby_login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(msg_notify_player_lobby_login& a, msg_notify_player_lobby_login& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_notify_player_lobby_login* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg_notify_player_lobby_login* New() const final {
    return CreateMaybeMessage<msg_notify_player_lobby_login>(nullptr);
  }

  msg_notify_player_lobby_login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg_notify_player_lobby_login>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg_notify_player_lobby_login& from);
  void MergeFrom(const msg_notify_player_lobby_login& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_notify_player_lobby_login* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.svr.msg_notify_player_lobby_login";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_servers_5fmsg_2eproto);
    return ::descriptor_table_servers_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbyIdFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // uint32 lobby_id = 1;
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.svr.msg_notify_player_lobby_login)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_servers_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// server_info

// uint32 svrid = 1;
inline void server_info::clear_svrid() {
  svrid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 server_info::_internal_svrid() const {
  return svrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 server_info::svrid() const {
  // @@protoc_insertion_point(field_get:net.svr.server_info.svrid)
  return _internal_svrid();
}
inline void server_info::_internal_set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  svrid_ = value;
}
inline void server_info::set_svrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_svrid(value);
  // @@protoc_insertion_point(field_set:net.svr.server_info.svrid)
}

// uint32 svr_type = 2;
inline void server_info::clear_svr_type() {
  svr_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 server_info::_internal_svr_type() const {
  return svr_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 server_info::svr_type() const {
  // @@protoc_insertion_point(field_get:net.svr.server_info.svr_type)
  return _internal_svr_type();
}
inline void server_info::_internal_set_svr_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  svr_type_ = value;
}
inline void server_info::set_svr_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_svr_type(value);
  // @@protoc_insertion_point(field_set:net.svr.server_info.svr_type)
}

// uint32 game_type = 3;
inline void server_info::clear_game_type() {
  game_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 server_info::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 server_info::game_type() const {
  // @@protoc_insertion_point(field_get:net.svr.server_info.game_type)
  return _internal_game_type();
}
inline void server_info::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  game_type_ = value;
}
inline void server_info::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:net.svr.server_info.game_type)
}

// uint32 game_subtype = 4;
inline void server_info::clear_game_subtype() {
  game_subtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 server_info::_internal_game_subtype() const {
  return game_subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 server_info::game_subtype() const {
  // @@protoc_insertion_point(field_get:net.svr.server_info.game_subtype)
  return _internal_game_subtype();
}
inline void server_info::_internal_set_game_subtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  game_subtype_ = value;
}
inline void server_info::set_game_subtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_subtype(value);
  // @@protoc_insertion_point(field_set:net.svr.server_info.game_subtype)
}

// bytes uuid = 5;
inline void server_info::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& server_info::uuid() const {
  // @@protoc_insertion_point(field_get:net.svr.server_info.uuid)
  return _internal_uuid();
}
inline void server_info::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:net.svr.server_info.uuid)
}
inline std::string* server_info::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:net.svr.server_info.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& server_info::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void server_info::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void server_info::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.svr.server_info.uuid)
}
inline void server_info::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.svr.server_info.uuid)
}
inline void server_info::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.svr.server_info.uuid)
}
inline std::string* server_info::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* server_info::release_uuid() {
  // @@protoc_insertion_point(field_release:net.svr.server_info.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void server_info::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:net.svr.server_info.uuid)
}

// -------------------------------------------------------------------

// msg_register_svr_req

// .net.svr.server_info info = 1;
inline bool msg_register_svr_req::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool msg_register_svr_req::has_info() const {
  return _internal_has_info();
}
inline void msg_register_svr_req::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::net::svr::server_info& msg_register_svr_req::_internal_info() const {
  const ::net::svr::server_info* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::net::svr::server_info*>(
      &::net::svr::_server_info_default_instance_);
}
inline const ::net::svr::server_info& msg_register_svr_req::info() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_register_svr_req.info)
  return _internal_info();
}
inline ::net::svr::server_info* msg_register_svr_req::release_info() {
  // @@protoc_insertion_point(field_release:net.svr.msg_register_svr_req.info)
  
  ::net::svr::server_info* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::net::svr::server_info* msg_register_svr_req::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::net::svr::server_info>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::net::svr::server_info* msg_register_svr_req::mutable_info() {
  // @@protoc_insertion_point(field_mutable:net.svr.msg_register_svr_req.info)
  return _internal_mutable_info();
}
inline void msg_register_svr_req::set_allocated_info(::net::svr::server_info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:net.svr.msg_register_svr_req.info)
}

// -------------------------------------------------------------------

// msg_register_svr_rep

// uint32 result = 1;
inline void msg_register_svr_rep::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_register_svr_rep::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_register_svr_rep::result() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_register_svr_rep.result)
  return _internal_result();
}
inline void msg_register_svr_rep::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void msg_register_svr_rep::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_register_svr_rep.result)
}

// -------------------------------------------------------------------

// msg_server_list_rep

// repeated .net.svr.server_info server_list = 1;
inline int msg_server_list_rep::_internal_server_list_size() const {
  return server_list_.size();
}
inline int msg_server_list_rep::server_list_size() const {
  return _internal_server_list_size();
}
inline void msg_server_list_rep::clear_server_list() {
  server_list_.Clear();
}
inline ::net::svr::server_info* msg_server_list_rep::mutable_server_list(int index) {
  // @@protoc_insertion_point(field_mutable:net.svr.msg_server_list_rep.server_list)
  return server_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::svr::server_info >*
msg_server_list_rep::mutable_server_list() {
  // @@protoc_insertion_point(field_mutable_list:net.svr.msg_server_list_rep.server_list)
  return &server_list_;
}
inline const ::net::svr::server_info& msg_server_list_rep::_internal_server_list(int index) const {
  return server_list_.Get(index);
}
inline const ::net::svr::server_info& msg_server_list_rep::server_list(int index) const {
  // @@protoc_insertion_point(field_get:net.svr.msg_server_list_rep.server_list)
  return _internal_server_list(index);
}
inline ::net::svr::server_info* msg_server_list_rep::_internal_add_server_list() {
  return server_list_.Add();
}
inline ::net::svr::server_info* msg_server_list_rep::add_server_list() {
  // @@protoc_insertion_point(field_add:net.svr.msg_server_list_rep.server_list)
  return _internal_add_server_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::net::svr::server_info >&
msg_server_list_rep::server_list() const {
  // @@protoc_insertion_point(field_list:net.svr.msg_server_list_rep.server_list)
  return server_list_;
}

// -------------------------------------------------------------------

// msg_async_exec_sql

// uint32 db_type = 1;
inline void msg_async_exec_sql::clear_db_type() {
  db_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_async_exec_sql::_internal_db_type() const {
  return db_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_async_exec_sql::db_type() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_async_exec_sql.db_type)
  return _internal_db_type();
}
inline void msg_async_exec_sql::_internal_set_db_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  db_type_ = value;
}
inline void msg_async_exec_sql::set_db_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_db_type(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_async_exec_sql.db_type)
}

// bytes sql_str = 2;
inline void msg_async_exec_sql::clear_sql_str() {
  sql_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg_async_exec_sql::sql_str() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_async_exec_sql.sql_str)
  return _internal_sql_str();
}
inline void msg_async_exec_sql::set_sql_str(const std::string& value) {
  _internal_set_sql_str(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_async_exec_sql.sql_str)
}
inline std::string* msg_async_exec_sql::mutable_sql_str() {
  // @@protoc_insertion_point(field_mutable:net.svr.msg_async_exec_sql.sql_str)
  return _internal_mutable_sql_str();
}
inline const std::string& msg_async_exec_sql::_internal_sql_str() const {
  return sql_str_.GetNoArena();
}
inline void msg_async_exec_sql::_internal_set_sql_str(const std::string& value) {
  
  sql_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg_async_exec_sql::set_sql_str(std::string&& value) {
  
  sql_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.svr.msg_async_exec_sql.sql_str)
}
inline void msg_async_exec_sql::set_sql_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sql_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.svr.msg_async_exec_sql.sql_str)
}
inline void msg_async_exec_sql::set_sql_str(const void* value, size_t size) {
  
  sql_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.svr.msg_async_exec_sql.sql_str)
}
inline std::string* msg_async_exec_sql::_internal_mutable_sql_str() {
  
  return sql_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg_async_exec_sql::release_sql_str() {
  // @@protoc_insertion_point(field_release:net.svr.msg_async_exec_sql.sql_str)
  
  return sql_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg_async_exec_sql::set_allocated_sql_str(std::string* sql_str) {
  if (sql_str != nullptr) {
    
  } else {
    
  }
  sql_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sql_str);
  // @@protoc_insertion_point(field_set_allocated:net.svr.msg_async_exec_sql.sql_str)
}

// uint32 is_compress = 3;
inline void msg_async_exec_sql::clear_is_compress() {
  is_compress_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_async_exec_sql::_internal_is_compress() const {
  return is_compress_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_async_exec_sql::is_compress() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_async_exec_sql.is_compress)
  return _internal_is_compress();
}
inline void msg_async_exec_sql::_internal_set_is_compress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  is_compress_ = value;
}
inline void msg_async_exec_sql::set_is_compress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_is_compress(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_async_exec_sql.is_compress)
}

// -------------------------------------------------------------------

// msg_load_player_data

// uint32 uid = 1;
inline void msg_load_player_data::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_load_player_data::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_load_player_data::uid() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_load_player_data.uid)
  return _internal_uid();
}
inline void msg_load_player_data::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void msg_load_player_data::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_load_player_data.uid)
}

// uint32 data_type = 2;
inline void msg_load_player_data::clear_data_type() {
  data_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_load_player_data::_internal_data_type() const {
  return data_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_load_player_data::data_type() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_load_player_data.data_type)
  return _internal_data_type();
}
inline void msg_load_player_data::_internal_set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  data_type_ = value;
}
inline void msg_load_player_data::set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_load_player_data.data_type)
}

// -------------------------------------------------------------------

// msg_load_player_data_rep

// uint32 uid = 1;
inline void msg_load_player_data_rep::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_load_player_data_rep::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_load_player_data_rep::uid() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_load_player_data_rep.uid)
  return _internal_uid();
}
inline void msg_load_player_data_rep::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void msg_load_player_data_rep::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_load_player_data_rep.uid)
}

// uint32 data_type = 2;
inline void msg_load_player_data_rep::clear_data_type() {
  data_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_load_player_data_rep::_internal_data_type() const {
  return data_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_load_player_data_rep::data_type() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_load_player_data_rep.data_type)
  return _internal_data_type();
}
inline void msg_load_player_data_rep::_internal_set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  data_type_ = value;
}
inline void msg_load_player_data_rep::set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_load_player_data_rep.data_type)
}

// bytes load_data = 3;
inline void msg_load_player_data_rep::clear_load_data() {
  load_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg_load_player_data_rep::load_data() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_load_player_data_rep.load_data)
  return _internal_load_data();
}
inline void msg_load_player_data_rep::set_load_data(const std::string& value) {
  _internal_set_load_data(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_load_player_data_rep.load_data)
}
inline std::string* msg_load_player_data_rep::mutable_load_data() {
  // @@protoc_insertion_point(field_mutable:net.svr.msg_load_player_data_rep.load_data)
  return _internal_mutable_load_data();
}
inline const std::string& msg_load_player_data_rep::_internal_load_data() const {
  return load_data_.GetNoArena();
}
inline void msg_load_player_data_rep::_internal_set_load_data(const std::string& value) {
  
  load_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg_load_player_data_rep::set_load_data(std::string&& value) {
  
  load_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.svr.msg_load_player_data_rep.load_data)
}
inline void msg_load_player_data_rep::set_load_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  load_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.svr.msg_load_player_data_rep.load_data)
}
inline void msg_load_player_data_rep::set_load_data(const void* value, size_t size) {
  
  load_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.svr.msg_load_player_data_rep.load_data)
}
inline std::string* msg_load_player_data_rep::_internal_mutable_load_data() {
  
  return load_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg_load_player_data_rep::release_load_data() {
  // @@protoc_insertion_point(field_release:net.svr.msg_load_player_data_rep.load_data)
  
  return load_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg_load_player_data_rep::set_allocated_load_data(std::string* load_data) {
  if (load_data != nullptr) {
    
  } else {
    
  }
  load_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), load_data);
  // @@protoc_insertion_point(field_set_allocated:net.svr.msg_load_player_data_rep.load_data)
}

// -------------------------------------------------------------------

// msg_save_player_data

// uint32 uid = 1;
inline void msg_save_player_data::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_save_player_data::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_save_player_data::uid() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_save_player_data.uid)
  return _internal_uid();
}
inline void msg_save_player_data::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void msg_save_player_data::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_save_player_data.uid)
}

// uint32 data_type = 2;
inline void msg_save_player_data::clear_data_type() {
  data_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_save_player_data::_internal_data_type() const {
  return data_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_save_player_data::data_type() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_save_player_data.data_type)
  return _internal_data_type();
}
inline void msg_save_player_data::_internal_set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  data_type_ = value;
}
inline void msg_save_player_data::set_data_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_save_player_data.data_type)
}

// bytes save_data = 3;
inline void msg_save_player_data::clear_save_data() {
  save_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg_save_player_data::save_data() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_save_player_data.save_data)
  return _internal_save_data();
}
inline void msg_save_player_data::set_save_data(const std::string& value) {
  _internal_set_save_data(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_save_player_data.save_data)
}
inline std::string* msg_save_player_data::mutable_save_data() {
  // @@protoc_insertion_point(field_mutable:net.svr.msg_save_player_data.save_data)
  return _internal_mutable_save_data();
}
inline const std::string& msg_save_player_data::_internal_save_data() const {
  return save_data_.GetNoArena();
}
inline void msg_save_player_data::_internal_set_save_data(const std::string& value) {
  
  save_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg_save_player_data::set_save_data(std::string&& value) {
  
  save_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.svr.msg_save_player_data.save_data)
}
inline void msg_save_player_data::set_save_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  save_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.svr.msg_save_player_data.save_data)
}
inline void msg_save_player_data::set_save_data(const void* value, size_t size) {
  
  save_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.svr.msg_save_player_data.save_data)
}
inline std::string* msg_save_player_data::_internal_mutable_save_data() {
  
  return save_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg_save_player_data::release_save_data() {
  // @@protoc_insertion_point(field_release:net.svr.msg_save_player_data.save_data)
  
  return save_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg_save_player_data::set_allocated_save_data(std::string* save_data) {
  if (save_data != nullptr) {
    
  } else {
    
  }
  save_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), save_data);
  // @@protoc_insertion_point(field_set_allocated:net.svr.msg_save_player_data.save_data)
}

// -------------------------------------------------------------------

// msg_report_svr_info

// uint32 onlines = 1;
inline void msg_report_svr_info::clear_onlines() {
  onlines_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_report_svr_info::_internal_onlines() const {
  return onlines_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_report_svr_info::onlines() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_report_svr_info.onlines)
  return _internal_onlines();
}
inline void msg_report_svr_info::_internal_set_onlines(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  onlines_ = value;
}
inline void msg_report_svr_info::set_onlines(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_onlines(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_report_svr_info.onlines)
}

// -------------------------------------------------------------------

// msg_leave_svr

// uint32 uid = 1;
inline void msg_leave_svr::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_leave_svr::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_leave_svr::uid() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_leave_svr.uid)
  return _internal_uid();
}
inline void msg_leave_svr::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void msg_leave_svr::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_leave_svr.uid)
}

// -------------------------------------------------------------------

// msg_notify_net_state

// uint32 uid = 1;
inline void msg_notify_net_state::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_notify_net_state::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_notify_net_state::uid() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_notify_net_state.uid)
  return _internal_uid();
}
inline void msg_notify_net_state::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void msg_notify_net_state::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_notify_net_state.uid)
}

// uint32 state = 2;
inline void msg_notify_net_state::clear_state() {
  state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_notify_net_state::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_notify_net_state::state() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_notify_net_state.state)
  return _internal_state();
}
inline void msg_notify_net_state::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_ = value;
}
inline void msg_notify_net_state::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_notify_net_state.state)
}

// uint32 newip = 3;
inline void msg_notify_net_state::clear_newip() {
  newip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_notify_net_state::_internal_newip() const {
  return newip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_notify_net_state::newip() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_notify_net_state.newip)
  return _internal_newip();
}
inline void msg_notify_net_state::_internal_set_newip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  newip_ = value;
}
inline void msg_notify_net_state::set_newip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_newip(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_notify_net_state.newip)
}

// uint32 no_player = 4;
inline void msg_notify_net_state::clear_no_player() {
  no_player_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_notify_net_state::_internal_no_player() const {
  return no_player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_notify_net_state::no_player() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_notify_net_state.no_player)
  return _internal_no_player();
}
inline void msg_notify_net_state::_internal_set_no_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  no_player_ = value;
}
inline void msg_notify_net_state::set_no_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_no_player(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_notify_net_state.no_player)
}

// -------------------------------------------------------------------

// msg_enter_into_game_svr

// uint32 player_type = 1;
inline void msg_enter_into_game_svr::clear_player_type() {
  player_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_into_game_svr::_internal_player_type() const {
  return player_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_into_game_svr::player_type() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_enter_into_game_svr.player_type)
  return _internal_player_type();
}
inline void msg_enter_into_game_svr::_internal_set_player_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_type_ = value;
}
inline void msg_enter_into_game_svr::set_player_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_type(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_enter_into_game_svr.player_type)
}

// .net.base_info base_data = 2;
inline bool msg_enter_into_game_svr::_internal_has_base_data() const {
  return this != internal_default_instance() && base_data_ != nullptr;
}
inline bool msg_enter_into_game_svr::has_base_data() const {
  return _internal_has_base_data();
}
inline const ::net::base_info& msg_enter_into_game_svr::_internal_base_data() const {
  const ::net::base_info* p = base_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::net::base_info*>(
      &::net::_base_info_default_instance_);
}
inline const ::net::base_info& msg_enter_into_game_svr::base_data() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_enter_into_game_svr.base_data)
  return _internal_base_data();
}
inline ::net::base_info* msg_enter_into_game_svr::release_base_data() {
  // @@protoc_insertion_point(field_release:net.svr.msg_enter_into_game_svr.base_data)
  
  ::net::base_info* temp = base_data_;
  base_data_ = nullptr;
  return temp;
}
inline ::net::base_info* msg_enter_into_game_svr::_internal_mutable_base_data() {
  
  if (base_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::net::base_info>(GetArenaNoVirtual());
    base_data_ = p;
  }
  return base_data_;
}
inline ::net::base_info* msg_enter_into_game_svr::mutable_base_data() {
  // @@protoc_insertion_point(field_mutable:net.svr.msg_enter_into_game_svr.base_data)
  return _internal_mutable_base_data();
}
inline void msg_enter_into_game_svr::set_allocated_base_data(::net::base_info* base_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_data_);
  }
  if (base_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_data, submessage_arena);
    }
    
  } else {
    
  }
  base_data_ = base_data;
  // @@protoc_insertion_point(field_set_allocated:net.svr.msg_enter_into_game_svr.base_data)
}

// uint32 play_type = 3;
inline void msg_enter_into_game_svr::clear_play_type() {
  play_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_into_game_svr::_internal_play_type() const {
  return play_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_enter_into_game_svr::play_type() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_enter_into_game_svr.play_type)
  return _internal_play_type();
}
inline void msg_enter_into_game_svr::_internal_set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  play_type_ = value;
}
inline void msg_enter_into_game_svr::set_play_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_play_type(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_enter_into_game_svr.play_type)
}

// -------------------------------------------------------------------

// msg_notify_player_lobby_login

// uint32 lobby_id = 1;
inline void msg_notify_player_lobby_login::clear_lobby_id() {
  lobby_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_notify_player_lobby_login::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_notify_player_lobby_login::lobby_id() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_notify_player_lobby_login.lobby_id)
  return _internal_lobby_id();
}
inline void msg_notify_player_lobby_login::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lobby_id_ = value;
}
inline void msg_notify_player_lobby_login::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_notify_player_lobby_login.lobby_id)
}

// uint32 uid = 2;
inline void msg_notify_player_lobby_login::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_notify_player_lobby_login::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 msg_notify_player_lobby_login::uid() const {
  // @@protoc_insertion_point(field_get:net.svr.msg_notify_player_lobby_login.uid)
  return _internal_uid();
}
inline void msg_notify_player_lobby_login::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void msg_notify_player_lobby_login::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:net.svr.msg_notify_player_lobby_login.uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace svr
}  // namespace net

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::net::svr::SERVER_MSG_ID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::net::svr::SERVER_MSG_ID>() {
  return ::net::svr::SERVER_MSG_ID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_servers_5fmsg_2eproto
