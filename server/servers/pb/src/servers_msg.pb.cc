// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: servers_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "servers_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {
namespace svr {

namespace {

const ::google::protobuf::Descriptor* server_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  server_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_register_center_svr_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_register_center_svr_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_register_center_svr_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_register_center_svr_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_server_list_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_server_list_rep_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_servers_5fmsg_2eproto() {
  protobuf_AddDesc_servers_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "servers_msg.proto");
  GOOGLE_CHECK(file != NULL);
  server_info_descriptor_ = file->message_type(0);
  static const int server_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, svr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, game_subtype_),
  };
  server_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      server_info_descriptor_,
      server_info::default_instance_,
      server_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(server_info));
  msg_register_center_svr_req_descriptor_ = file->message_type(1);
  static const int msg_register_center_svr_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_center_svr_req, info_),
  };
  msg_register_center_svr_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_register_center_svr_req_descriptor_,
      msg_register_center_svr_req::default_instance_,
      msg_register_center_svr_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_center_svr_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_center_svr_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_register_center_svr_req));
  msg_register_center_svr_rep_descriptor_ = file->message_type(2);
  static const int msg_register_center_svr_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_center_svr_rep, result_),
  };
  msg_register_center_svr_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_register_center_svr_rep_descriptor_,
      msg_register_center_svr_rep::default_instance_,
      msg_register_center_svr_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_center_svr_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_center_svr_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_register_center_svr_rep));
  msg_server_list_rep_descriptor_ = file->message_type(3);
  static const int msg_server_list_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_server_list_rep, server_list_),
  };
  msg_server_list_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_server_list_rep_descriptor_,
      msg_server_list_rep::default_instance_,
      msg_server_list_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_server_list_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_server_list_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_server_list_rep));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_servers_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    server_info_descriptor_, &server_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_register_center_svr_req_descriptor_, &msg_register_center_svr_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_register_center_svr_rep_descriptor_, &msg_register_center_svr_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_server_list_rep_descriptor_, &msg_server_list_rep::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_servers_5fmsg_2eproto() {
  delete server_info::default_instance_;
  delete server_info_reflection_;
  delete msg_register_center_svr_req::default_instance_;
  delete msg_register_center_svr_req_reflection_;
  delete msg_register_center_svr_rep::default_instance_;
  delete msg_register_center_svr_rep_reflection_;
  delete msg_server_list_rep::default_instance_;
  delete msg_server_list_rep_reflection_;
}

void protobuf_AddDesc_servers_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::net::protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021servers_msg.proto\022\007net.svr\032\025base_msg_s"
    "truct.proto\"W\n\013server_info\022\r\n\005svrid\030\001 \001("
    "\r\022\020\n\010svr_type\030\002 \001(\r\022\021\n\tgame_type\030\003 \001(\r\022\024"
    "\n\014game_subtype\030\004 \001(\r\"A\n\033msg_register_cen"
    "ter_svr_req\022\"\n\004info\030\001 \001(\0132\024.net.svr.serv"
    "er_info\"-\n\033msg_register_center_svr_rep\022\016"
    "\n\006result\030\001 \001(\r\"@\n\023msg_server_list_rep\022)\n"
    "\013server_list\030\001 \003(\0132\024.net.svr.server_info", 320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "servers_msg.proto", &protobuf_RegisterTypes);
  server_info::default_instance_ = new server_info();
  msg_register_center_svr_req::default_instance_ = new msg_register_center_svr_req();
  msg_register_center_svr_rep::default_instance_ = new msg_register_center_svr_rep();
  msg_server_list_rep::default_instance_ = new msg_server_list_rep();
  server_info::default_instance_->InitAsDefaultInstance();
  msg_register_center_svr_req::default_instance_->InitAsDefaultInstance();
  msg_register_center_svr_rep::default_instance_->InitAsDefaultInstance();
  msg_server_list_rep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_servers_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_servers_5fmsg_2eproto {
  StaticDescriptorInitializer_servers_5fmsg_2eproto() {
    protobuf_AddDesc_servers_5fmsg_2eproto();
  }
} static_descriptor_initializer_servers_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int server_info::kSvridFieldNumber;
const int server_info::kSvrTypeFieldNumber;
const int server_info::kGameTypeFieldNumber;
const int server_info::kGameSubtypeFieldNumber;
#endif  // !_MSC_VER

server_info::server_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void server_info::InitAsDefaultInstance() {
}

server_info::server_info(const server_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void server_info::SharedCtor() {
  _cached_size_ = 0;
  svrid_ = 0u;
  svr_type_ = 0u;
  game_type_ = 0u;
  game_subtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

server_info::~server_info() {
  SharedDtor();
}

void server_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void server_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* server_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return server_info_descriptor_;
}

const server_info& server_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

server_info* server_info::default_instance_ = NULL;

server_info* server_info::New() const {
  return new server_info;
}

void server_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrid_ = 0u;
    svr_type_ = 0u;
    game_type_ = 0u;
    game_subtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool server_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_svr_type;
        break;
      }

      // optional uint32 svr_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_type_)));
          set_has_svr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_type;
        break;
      }

      // optional uint32 game_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_subtype;
        break;
      }

      // optional uint32 game_subtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_subtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_subtype_)));
          set_has_game_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void server_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrid(), output);
  }

  // optional uint32 svr_type = 2;
  if (has_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svr_type(), output);
  }

  // optional uint32 game_type = 3;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_type(), output);
  }

  // optional uint32 game_subtype = 4;
  if (has_game_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_subtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* server_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrid(), target);
  }

  // optional uint32 svr_type = 2;
  if (has_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svr_type(), target);
  }

  // optional uint32 game_type = 3;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_type(), target);
  }

  // optional uint32 game_subtype = 4;
  if (has_game_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_subtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int server_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrid = 1;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

    // optional uint32 svr_type = 2;
    if (has_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_type());
    }

    // optional uint32 game_type = 3;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

    // optional uint32 game_subtype = 4;
    if (has_game_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_subtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void server_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const server_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const server_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void server_info::MergeFrom(const server_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
    if (from.has_svr_type()) {
      set_svr_type(from.svr_type());
    }
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_game_subtype()) {
      set_game_subtype(from.game_subtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void server_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void server_info::CopyFrom(const server_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool server_info::IsInitialized() const {

  return true;
}

void server_info::Swap(server_info* other) {
  if (other != this) {
    std::swap(svrid_, other->svrid_);
    std::swap(svr_type_, other->svr_type_);
    std::swap(game_type_, other->game_type_);
    std::swap(game_subtype_, other->game_subtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata server_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = server_info_descriptor_;
  metadata.reflection = server_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_register_center_svr_req::kInfoFieldNumber;
#endif  // !_MSC_VER

msg_register_center_svr_req::msg_register_center_svr_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_register_center_svr_req::InitAsDefaultInstance() {
  info_ = const_cast< ::net::svr::server_info*>(&::net::svr::server_info::default_instance());
}

msg_register_center_svr_req::msg_register_center_svr_req(const msg_register_center_svr_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_register_center_svr_req::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_register_center_svr_req::~msg_register_center_svr_req() {
  SharedDtor();
}

void msg_register_center_svr_req::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void msg_register_center_svr_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_register_center_svr_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_register_center_svr_req_descriptor_;
}

const msg_register_center_svr_req& msg_register_center_svr_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_register_center_svr_req* msg_register_center_svr_req::default_instance_ = NULL;

msg_register_center_svr_req* msg_register_center_svr_req::New() const {
  return new msg_register_center_svr_req;
}

void msg_register_center_svr_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::net::svr::server_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_register_center_svr_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .net.svr.server_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_register_center_svr_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .net.svr.server_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_register_center_svr_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .net.svr.server_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_register_center_svr_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .net.svr.server_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_register_center_svr_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_register_center_svr_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_register_center_svr_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_register_center_svr_req::MergeFrom(const msg_register_center_svr_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::net::svr::server_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_register_center_svr_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_register_center_svr_req::CopyFrom(const msg_register_center_svr_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_register_center_svr_req::IsInitialized() const {

  return true;
}

void msg_register_center_svr_req::Swap(msg_register_center_svr_req* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_register_center_svr_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_register_center_svr_req_descriptor_;
  metadata.reflection = msg_register_center_svr_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_register_center_svr_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_register_center_svr_rep::msg_register_center_svr_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_register_center_svr_rep::InitAsDefaultInstance() {
}

msg_register_center_svr_rep::msg_register_center_svr_rep(const msg_register_center_svr_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_register_center_svr_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_register_center_svr_rep::~msg_register_center_svr_rep() {
  SharedDtor();
}

void msg_register_center_svr_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_register_center_svr_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_register_center_svr_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_register_center_svr_rep_descriptor_;
}

const msg_register_center_svr_rep& msg_register_center_svr_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_register_center_svr_rep* msg_register_center_svr_rep::default_instance_ = NULL;

msg_register_center_svr_rep* msg_register_center_svr_rep::New() const {
  return new msg_register_center_svr_rep;
}

void msg_register_center_svr_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_register_center_svr_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_register_center_svr_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_register_center_svr_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_register_center_svr_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_register_center_svr_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_register_center_svr_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_register_center_svr_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_register_center_svr_rep::MergeFrom(const msg_register_center_svr_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_register_center_svr_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_register_center_svr_rep::CopyFrom(const msg_register_center_svr_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_register_center_svr_rep::IsInitialized() const {

  return true;
}

void msg_register_center_svr_rep::Swap(msg_register_center_svr_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_register_center_svr_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_register_center_svr_rep_descriptor_;
  metadata.reflection = msg_register_center_svr_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_server_list_rep::kServerListFieldNumber;
#endif  // !_MSC_VER

msg_server_list_rep::msg_server_list_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_server_list_rep::InitAsDefaultInstance() {
}

msg_server_list_rep::msg_server_list_rep(const msg_server_list_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_server_list_rep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_server_list_rep::~msg_server_list_rep() {
  SharedDtor();
}

void msg_server_list_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_server_list_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_server_list_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_server_list_rep_descriptor_;
}

const msg_server_list_rep& msg_server_list_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_server_list_rep* msg_server_list_rep::default_instance_ = NULL;

msg_server_list_rep* msg_server_list_rep::New() const {
  return new msg_server_list_rep;
}

void msg_server_list_rep::Clear() {
  server_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_server_list_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.svr.server_info server_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_server_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_server_list_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.svr.server_info server_list = 1;
  for (int i = 0; i < this->server_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_server_list_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.svr.server_info server_list = 1;
  for (int i = 0; i < this->server_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_server_list_rep::ByteSize() const {
  int total_size = 0;

  // repeated .net.svr.server_info server_list = 1;
  total_size += 1 * this->server_list_size();
  for (int i = 0; i < this->server_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_server_list_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_server_list_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_server_list_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_server_list_rep::MergeFrom(const msg_server_list_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_list_.MergeFrom(from.server_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_server_list_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_server_list_rep::CopyFrom(const msg_server_list_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_server_list_rep::IsInitialized() const {

  return true;
}

void msg_server_list_rep::Swap(msg_server_list_rep* other) {
  if (other != this) {
    server_list_.Swap(&other->server_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_server_list_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_server_list_rep_descriptor_;
  metadata.reflection = msg_server_list_rep_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace svr
}  // namespace net

// @@protoc_insertion_point(global_scope)
