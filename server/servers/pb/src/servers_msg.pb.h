// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: servers_msg.proto

#ifndef PROTOBUF_servers_5fmsg_2eproto__INCLUDED
#define PROTOBUF_servers_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_msg_struct.pb.h"
// @@protoc_insertion_point(includes)

namespace net {
namespace svr {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_servers_5fmsg_2eproto();
void protobuf_AssignDesc_servers_5fmsg_2eproto();
void protobuf_ShutdownFile_servers_5fmsg_2eproto();

class server_info;
class msg_register_svr_req;
class msg_register_svr_rep;
class msg_server_list_rep;
class msg_async_exec_sql;
class msg_load_player_data;
class msg_load_player_data_rep;
class msg_save_player_data;
class msg_report_svr_info;
class msg_leave_svr;
class msg_notify_net_state;
class msg_enter_into_game_svr;

enum SERVER_MSG_ID {
  S2S_MSG_REGISTER = 201,
  S2S_MSG_REGISTER_REP = 202,
  S2S_MSG_SERVER_LIST_REP = 203,
  S2DBA_MSG_ASYNC_EXEC_SQL = 310,
  S2DBA_LOAD_PLAYER_DATA = 311,
  DBA2S_LOAD_PLAYER_DATA_REP = 312,
  S2DBA_SAVE_PLAYER_DATA = 313,
  GS2L_MSG_REPORT = 503,
  GS2L_MSG_LEAVE_SVR = 504,
  L2GS_MSG_NOTIFY_NET_STATE = 505,
  L2GS_MSG_ENTER_INTO_SVR = 506
};
bool SERVER_MSG_ID_IsValid(int value);
const SERVER_MSG_ID SERVER_MSG_ID_MIN = S2S_MSG_REGISTER;
const SERVER_MSG_ID SERVER_MSG_ID_MAX = L2GS_MSG_ENTER_INTO_SVR;
const int SERVER_MSG_ID_ARRAYSIZE = SERVER_MSG_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SERVER_MSG_ID_descriptor();
inline const ::std::string& SERVER_MSG_ID_Name(SERVER_MSG_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SERVER_MSG_ID_descriptor(), value);
}
inline bool SERVER_MSG_ID_Parse(
    const ::std::string& name, SERVER_MSG_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SERVER_MSG_ID>(
    SERVER_MSG_ID_descriptor(), name, value);
}
// ===================================================================

class server_info : public ::google::protobuf::Message {
 public:
  server_info();
  virtual ~server_info();

  server_info(const server_info& from);

  inline server_info& operator=(const server_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const server_info& default_instance();

  void Swap(server_info* other);

  // implements Message ----------------------------------------------

  server_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const server_info& from);
  void MergeFrom(const server_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrid = 1;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvridFieldNumber = 1;
  inline ::google::protobuf::uint32 svrid() const;
  inline void set_svrid(::google::protobuf::uint32 value);

  // optional uint32 svr_type = 2;
  inline bool has_svr_type() const;
  inline void clear_svr_type();
  static const int kSvrTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 svr_type() const;
  inline void set_svr_type(::google::protobuf::uint32 value);

  // optional uint32 game_type = 3;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 game_type() const;
  inline void set_game_type(::google::protobuf::uint32 value);

  // optional uint32 game_subtype = 4;
  inline bool has_game_subtype() const;
  inline void clear_game_subtype();
  static const int kGameSubtypeFieldNumber = 4;
  inline ::google::protobuf::uint32 game_subtype() const;
  inline void set_game_subtype(::google::protobuf::uint32 value);

  // optional bytes uuid = 5;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 5;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:net.svr.server_info)
 private:
  inline void set_has_svrid();
  inline void clear_has_svrid();
  inline void set_has_svr_type();
  inline void clear_has_svr_type();
  inline void set_has_game_type();
  inline void clear_has_game_type();
  inline void set_has_game_subtype();
  inline void clear_has_game_subtype();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svrid_;
  ::google::protobuf::uint32 svr_type_;
  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 game_subtype_;
  ::std::string* uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static server_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_register_svr_req : public ::google::protobuf::Message {
 public:
  msg_register_svr_req();
  virtual ~msg_register_svr_req();

  msg_register_svr_req(const msg_register_svr_req& from);

  inline msg_register_svr_req& operator=(const msg_register_svr_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_register_svr_req& default_instance();

  void Swap(msg_register_svr_req* other);

  // implements Message ----------------------------------------------

  msg_register_svr_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_register_svr_req& from);
  void MergeFrom(const msg_register_svr_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .net.svr.server_info info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::net::svr::server_info& info() const;
  inline ::net::svr::server_info* mutable_info();
  inline ::net::svr::server_info* release_info();
  inline void set_allocated_info(::net::svr::server_info* info);

  // @@protoc_insertion_point(class_scope:net.svr.msg_register_svr_req)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::net::svr::server_info* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_register_svr_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_register_svr_rep : public ::google::protobuf::Message {
 public:
  msg_register_svr_rep();
  virtual ~msg_register_svr_rep();

  msg_register_svr_rep(const msg_register_svr_rep& from);

  inline msg_register_svr_rep& operator=(const msg_register_svr_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_register_svr_rep& default_instance();

  void Swap(msg_register_svr_rep* other);

  // implements Message ----------------------------------------------

  msg_register_svr_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_register_svr_rep& from);
  void MergeFrom(const msg_register_svr_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.svr.msg_register_svr_rep)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_register_svr_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_server_list_rep : public ::google::protobuf::Message {
 public:
  msg_server_list_rep();
  virtual ~msg_server_list_rep();

  msg_server_list_rep(const msg_server_list_rep& from);

  inline msg_server_list_rep& operator=(const msg_server_list_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_server_list_rep& default_instance();

  void Swap(msg_server_list_rep* other);

  // implements Message ----------------------------------------------

  msg_server_list_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_server_list_rep& from);
  void MergeFrom(const msg_server_list_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .net.svr.server_info server_list = 1;
  inline int server_list_size() const;
  inline void clear_server_list();
  static const int kServerListFieldNumber = 1;
  inline const ::net::svr::server_info& server_list(int index) const;
  inline ::net::svr::server_info* mutable_server_list(int index);
  inline ::net::svr::server_info* add_server_list();
  inline const ::google::protobuf::RepeatedPtrField< ::net::svr::server_info >&
      server_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::svr::server_info >*
      mutable_server_list();

  // @@protoc_insertion_point(class_scope:net.svr.msg_server_list_rep)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::net::svr::server_info > server_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_server_list_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_async_exec_sql : public ::google::protobuf::Message {
 public:
  msg_async_exec_sql();
  virtual ~msg_async_exec_sql();

  msg_async_exec_sql(const msg_async_exec_sql& from);

  inline msg_async_exec_sql& operator=(const msg_async_exec_sql& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_async_exec_sql& default_instance();

  void Swap(msg_async_exec_sql* other);

  // implements Message ----------------------------------------------

  msg_async_exec_sql* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_async_exec_sql& from);
  void MergeFrom(const msg_async_exec_sql& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_type = 1;
  inline bool has_db_type() const;
  inline void clear_db_type();
  static const int kDbTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_type() const;
  inline void set_db_type(::google::protobuf::uint32 value);

  // optional bytes sql_str = 2;
  inline bool has_sql_str() const;
  inline void clear_sql_str();
  static const int kSqlStrFieldNumber = 2;
  inline const ::std::string& sql_str() const;
  inline void set_sql_str(const ::std::string& value);
  inline void set_sql_str(const char* value);
  inline void set_sql_str(const void* value, size_t size);
  inline ::std::string* mutable_sql_str();
  inline ::std::string* release_sql_str();
  inline void set_allocated_sql_str(::std::string* sql_str);

  // optional uint32 is_compress = 3;
  inline bool has_is_compress() const;
  inline void clear_is_compress();
  static const int kIsCompressFieldNumber = 3;
  inline ::google::protobuf::uint32 is_compress() const;
  inline void set_is_compress(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.svr.msg_async_exec_sql)
 private:
  inline void set_has_db_type();
  inline void clear_has_db_type();
  inline void set_has_sql_str();
  inline void clear_has_sql_str();
  inline void set_has_is_compress();
  inline void clear_has_is_compress();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sql_str_;
  ::google::protobuf::uint32 db_type_;
  ::google::protobuf::uint32 is_compress_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_async_exec_sql* default_instance_;
};
// -------------------------------------------------------------------

class msg_load_player_data : public ::google::protobuf::Message {
 public:
  msg_load_player_data();
  virtual ~msg_load_player_data();

  msg_load_player_data(const msg_load_player_data& from);

  inline msg_load_player_data& operator=(const msg_load_player_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_load_player_data& default_instance();

  void Swap(msg_load_player_data* other);

  // implements Message ----------------------------------------------

  msg_load_player_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_load_player_data& from);
  void MergeFrom(const msg_load_player_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 data_type = 2;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 data_type() const;
  inline void set_data_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.svr.msg_load_player_data)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_data_type();
  inline void clear_has_data_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 data_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_load_player_data* default_instance_;
};
// -------------------------------------------------------------------

class msg_load_player_data_rep : public ::google::protobuf::Message {
 public:
  msg_load_player_data_rep();
  virtual ~msg_load_player_data_rep();

  msg_load_player_data_rep(const msg_load_player_data_rep& from);

  inline msg_load_player_data_rep& operator=(const msg_load_player_data_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_load_player_data_rep& default_instance();

  void Swap(msg_load_player_data_rep* other);

  // implements Message ----------------------------------------------

  msg_load_player_data_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_load_player_data_rep& from);
  void MergeFrom(const msg_load_player_data_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 data_type = 2;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 data_type() const;
  inline void set_data_type(::google::protobuf::uint32 value);

  // optional bytes load_data = 3;
  inline bool has_load_data() const;
  inline void clear_load_data();
  static const int kLoadDataFieldNumber = 3;
  inline const ::std::string& load_data() const;
  inline void set_load_data(const ::std::string& value);
  inline void set_load_data(const char* value);
  inline void set_load_data(const void* value, size_t size);
  inline ::std::string* mutable_load_data();
  inline ::std::string* release_load_data();
  inline void set_allocated_load_data(::std::string* load_data);

  // @@protoc_insertion_point(class_scope:net.svr.msg_load_player_data_rep)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_load_data();
  inline void clear_has_load_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 data_type_;
  ::std::string* load_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_load_player_data_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_save_player_data : public ::google::protobuf::Message {
 public:
  msg_save_player_data();
  virtual ~msg_save_player_data();

  msg_save_player_data(const msg_save_player_data& from);

  inline msg_save_player_data& operator=(const msg_save_player_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_save_player_data& default_instance();

  void Swap(msg_save_player_data* other);

  // implements Message ----------------------------------------------

  msg_save_player_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_save_player_data& from);
  void MergeFrom(const msg_save_player_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 data_type = 2;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 data_type() const;
  inline void set_data_type(::google::protobuf::uint32 value);

  // optional bytes save_data = 3;
  inline bool has_save_data() const;
  inline void clear_save_data();
  static const int kSaveDataFieldNumber = 3;
  inline const ::std::string& save_data() const;
  inline void set_save_data(const ::std::string& value);
  inline void set_save_data(const char* value);
  inline void set_save_data(const void* value, size_t size);
  inline ::std::string* mutable_save_data();
  inline ::std::string* release_save_data();
  inline void set_allocated_save_data(::std::string* save_data);

  // @@protoc_insertion_point(class_scope:net.svr.msg_save_player_data)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_save_data();
  inline void clear_has_save_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 data_type_;
  ::std::string* save_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_save_player_data* default_instance_;
};
// -------------------------------------------------------------------

class msg_report_svr_info : public ::google::protobuf::Message {
 public:
  msg_report_svr_info();
  virtual ~msg_report_svr_info();

  msg_report_svr_info(const msg_report_svr_info& from);

  inline msg_report_svr_info& operator=(const msg_report_svr_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_report_svr_info& default_instance();

  void Swap(msg_report_svr_info* other);

  // implements Message ----------------------------------------------

  msg_report_svr_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_report_svr_info& from);
  void MergeFrom(const msg_report_svr_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 onlines = 1;
  inline bool has_onlines() const;
  inline void clear_onlines();
  static const int kOnlinesFieldNumber = 1;
  inline ::google::protobuf::uint32 onlines() const;
  inline void set_onlines(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.svr.msg_report_svr_info)
 private:
  inline void set_has_onlines();
  inline void clear_has_onlines();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 onlines_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_report_svr_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_leave_svr : public ::google::protobuf::Message {
 public:
  msg_leave_svr();
  virtual ~msg_leave_svr();

  msg_leave_svr(const msg_leave_svr& from);

  inline msg_leave_svr& operator=(const msg_leave_svr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_leave_svr& default_instance();

  void Swap(msg_leave_svr* other);

  // implements Message ----------------------------------------------

  msg_leave_svr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_leave_svr& from);
  void MergeFrom(const msg_leave_svr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.svr.msg_leave_svr)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_leave_svr* default_instance_;
};
// -------------------------------------------------------------------

class msg_notify_net_state : public ::google::protobuf::Message {
 public:
  msg_notify_net_state();
  virtual ~msg_notify_net_state();

  msg_notify_net_state(const msg_notify_net_state& from);

  inline msg_notify_net_state& operator=(const msg_notify_net_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_notify_net_state& default_instance();

  void Swap(msg_notify_net_state* other);

  // implements Message ----------------------------------------------

  msg_notify_net_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_notify_net_state& from);
  void MergeFrom(const msg_notify_net_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional uint32 newip = 3;
  inline bool has_newip() const;
  inline void clear_newip();
  static const int kNewipFieldNumber = 3;
  inline ::google::protobuf::uint32 newip() const;
  inline void set_newip(::google::protobuf::uint32 value);

  // optional uint32 no_player = 4;
  inline bool has_no_player() const;
  inline void clear_no_player();
  static const int kNoPlayerFieldNumber = 4;
  inline ::google::protobuf::uint32 no_player() const;
  inline void set_no_player(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.svr.msg_notify_net_state)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_newip();
  inline void clear_has_newip();
  inline void set_has_no_player();
  inline void clear_has_no_player();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 newip_;
  ::google::protobuf::uint32 no_player_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_notify_net_state* default_instance_;
};
// -------------------------------------------------------------------

class msg_enter_into_game_svr : public ::google::protobuf::Message {
 public:
  msg_enter_into_game_svr();
  virtual ~msg_enter_into_game_svr();

  msg_enter_into_game_svr(const msg_enter_into_game_svr& from);

  inline msg_enter_into_game_svr& operator=(const msg_enter_into_game_svr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_enter_into_game_svr& default_instance();

  void Swap(msg_enter_into_game_svr* other);

  // implements Message ----------------------------------------------

  msg_enter_into_game_svr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_enter_into_game_svr& from);
  void MergeFrom(const msg_enter_into_game_svr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 player_type = 1;
  inline bool has_player_type() const;
  inline void clear_player_type();
  static const int kPlayerTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 player_type() const;
  inline void set_player_type(::google::protobuf::uint32 value);

  // optional .net.base_info base_data = 2;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 2;
  inline const ::net::base_info& base_data() const;
  inline ::net::base_info* mutable_base_data();
  inline ::net::base_info* release_base_data();
  inline void set_allocated_base_data(::net::base_info* base_data);

  // optional uint32 play_type = 3;
  inline bool has_play_type() const;
  inline void clear_play_type();
  static const int kPlayTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 play_type() const;
  inline void set_play_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.svr.msg_enter_into_game_svr)
 private:
  inline void set_has_player_type();
  inline void clear_has_player_type();
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_play_type();
  inline void clear_has_play_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::net::base_info* base_data_;
  ::google::protobuf::uint32 player_type_;
  ::google::protobuf::uint32 play_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_enter_into_game_svr* default_instance_;
};
// ===================================================================


// ===================================================================

// server_info

// optional uint32 svrid = 1;
inline bool server_info::has_svrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void server_info::set_has_svrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void server_info::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void server_info::clear_svrid() {
  svrid_ = 0u;
  clear_has_svrid();
}
inline ::google::protobuf::uint32 server_info::svrid() const {
  return svrid_;
}
inline void server_info::set_svrid(::google::protobuf::uint32 value) {
  set_has_svrid();
  svrid_ = value;
}

// optional uint32 svr_type = 2;
inline bool server_info::has_svr_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void server_info::set_has_svr_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void server_info::clear_has_svr_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void server_info::clear_svr_type() {
  svr_type_ = 0u;
  clear_has_svr_type();
}
inline ::google::protobuf::uint32 server_info::svr_type() const {
  return svr_type_;
}
inline void server_info::set_svr_type(::google::protobuf::uint32 value) {
  set_has_svr_type();
  svr_type_ = value;
}

// optional uint32 game_type = 3;
inline bool server_info::has_game_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void server_info::set_has_game_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void server_info::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void server_info::clear_game_type() {
  game_type_ = 0u;
  clear_has_game_type();
}
inline ::google::protobuf::uint32 server_info::game_type() const {
  return game_type_;
}
inline void server_info::set_game_type(::google::protobuf::uint32 value) {
  set_has_game_type();
  game_type_ = value;
}

// optional uint32 game_subtype = 4;
inline bool server_info::has_game_subtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void server_info::set_has_game_subtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void server_info::clear_has_game_subtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void server_info::clear_game_subtype() {
  game_subtype_ = 0u;
  clear_has_game_subtype();
}
inline ::google::protobuf::uint32 server_info::game_subtype() const {
  return game_subtype_;
}
inline void server_info::set_game_subtype(::google::protobuf::uint32 value) {
  set_has_game_subtype();
  game_subtype_ = value;
}

// optional bytes uuid = 5;
inline bool server_info::has_uuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void server_info::set_has_uuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void server_info::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void server_info::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& server_info::uuid() const {
  return *uuid_;
}
inline void server_info::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void server_info::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void server_info::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* server_info::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* server_info::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void server_info::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_register_svr_req

// optional .net.svr.server_info info = 1;
inline bool msg_register_svr_req::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_register_svr_req::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_register_svr_req::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_register_svr_req::clear_info() {
  if (info_ != NULL) info_->::net::svr::server_info::Clear();
  clear_has_info();
}
inline const ::net::svr::server_info& msg_register_svr_req::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::net::svr::server_info* msg_register_svr_req::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::net::svr::server_info;
  return info_;
}
inline ::net::svr::server_info* msg_register_svr_req::release_info() {
  clear_has_info();
  ::net::svr::server_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void msg_register_svr_req::set_allocated_info(::net::svr::server_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// msg_register_svr_rep

// optional uint32 result = 1;
inline bool msg_register_svr_rep::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_register_svr_rep::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_register_svr_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_register_svr_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_register_svr_rep::result() const {
  return result_;
}
inline void msg_register_svr_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// msg_server_list_rep

// repeated .net.svr.server_info server_list = 1;
inline int msg_server_list_rep::server_list_size() const {
  return server_list_.size();
}
inline void msg_server_list_rep::clear_server_list() {
  server_list_.Clear();
}
inline const ::net::svr::server_info& msg_server_list_rep::server_list(int index) const {
  return server_list_.Get(index);
}
inline ::net::svr::server_info* msg_server_list_rep::mutable_server_list(int index) {
  return server_list_.Mutable(index);
}
inline ::net::svr::server_info* msg_server_list_rep::add_server_list() {
  return server_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::svr::server_info >&
msg_server_list_rep::server_list() const {
  return server_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::svr::server_info >*
msg_server_list_rep::mutable_server_list() {
  return &server_list_;
}

// -------------------------------------------------------------------

// msg_async_exec_sql

// optional uint32 db_type = 1;
inline bool msg_async_exec_sql::has_db_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_async_exec_sql::set_has_db_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_async_exec_sql::clear_has_db_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_async_exec_sql::clear_db_type() {
  db_type_ = 0u;
  clear_has_db_type();
}
inline ::google::protobuf::uint32 msg_async_exec_sql::db_type() const {
  return db_type_;
}
inline void msg_async_exec_sql::set_db_type(::google::protobuf::uint32 value) {
  set_has_db_type();
  db_type_ = value;
}

// optional bytes sql_str = 2;
inline bool msg_async_exec_sql::has_sql_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_async_exec_sql::set_has_sql_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_async_exec_sql::clear_has_sql_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_async_exec_sql::clear_sql_str() {
  if (sql_str_ != &::google::protobuf::internal::kEmptyString) {
    sql_str_->clear();
  }
  clear_has_sql_str();
}
inline const ::std::string& msg_async_exec_sql::sql_str() const {
  return *sql_str_;
}
inline void msg_async_exec_sql::set_sql_str(const ::std::string& value) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::kEmptyString) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(value);
}
inline void msg_async_exec_sql::set_sql_str(const char* value) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::kEmptyString) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(value);
}
inline void msg_async_exec_sql::set_sql_str(const void* value, size_t size) {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::kEmptyString) {
    sql_str_ = new ::std::string;
  }
  sql_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_async_exec_sql::mutable_sql_str() {
  set_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::kEmptyString) {
    sql_str_ = new ::std::string;
  }
  return sql_str_;
}
inline ::std::string* msg_async_exec_sql::release_sql_str() {
  clear_has_sql_str();
  if (sql_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sql_str_;
    sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_async_exec_sql::set_allocated_sql_str(::std::string* sql_str) {
  if (sql_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sql_str_;
  }
  if (sql_str) {
    set_has_sql_str();
    sql_str_ = sql_str;
  } else {
    clear_has_sql_str();
    sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_compress = 3;
inline bool msg_async_exec_sql::has_is_compress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_async_exec_sql::set_has_is_compress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_async_exec_sql::clear_has_is_compress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_async_exec_sql::clear_is_compress() {
  is_compress_ = 0u;
  clear_has_is_compress();
}
inline ::google::protobuf::uint32 msg_async_exec_sql::is_compress() const {
  return is_compress_;
}
inline void msg_async_exec_sql::set_is_compress(::google::protobuf::uint32 value) {
  set_has_is_compress();
  is_compress_ = value;
}

// -------------------------------------------------------------------

// msg_load_player_data

// optional uint32 uid = 1;
inline bool msg_load_player_data::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_load_player_data::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_load_player_data::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_load_player_data::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_load_player_data::uid() const {
  return uid_;
}
inline void msg_load_player_data::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 data_type = 2;
inline bool msg_load_player_data::has_data_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_load_player_data::set_has_data_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_load_player_data::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_load_player_data::clear_data_type() {
  data_type_ = 0u;
  clear_has_data_type();
}
inline ::google::protobuf::uint32 msg_load_player_data::data_type() const {
  return data_type_;
}
inline void msg_load_player_data::set_data_type(::google::protobuf::uint32 value) {
  set_has_data_type();
  data_type_ = value;
}

// -------------------------------------------------------------------

// msg_load_player_data_rep

// optional uint32 uid = 1;
inline bool msg_load_player_data_rep::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_load_player_data_rep::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_load_player_data_rep::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_load_player_data_rep::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_load_player_data_rep::uid() const {
  return uid_;
}
inline void msg_load_player_data_rep::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 data_type = 2;
inline bool msg_load_player_data_rep::has_data_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_load_player_data_rep::set_has_data_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_load_player_data_rep::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_load_player_data_rep::clear_data_type() {
  data_type_ = 0u;
  clear_has_data_type();
}
inline ::google::protobuf::uint32 msg_load_player_data_rep::data_type() const {
  return data_type_;
}
inline void msg_load_player_data_rep::set_data_type(::google::protobuf::uint32 value) {
  set_has_data_type();
  data_type_ = value;
}

// optional bytes load_data = 3;
inline bool msg_load_player_data_rep::has_load_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_load_player_data_rep::set_has_load_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_load_player_data_rep::clear_has_load_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_load_player_data_rep::clear_load_data() {
  if (load_data_ != &::google::protobuf::internal::kEmptyString) {
    load_data_->clear();
  }
  clear_has_load_data();
}
inline const ::std::string& msg_load_player_data_rep::load_data() const {
  return *load_data_;
}
inline void msg_load_player_data_rep::set_load_data(const ::std::string& value) {
  set_has_load_data();
  if (load_data_ == &::google::protobuf::internal::kEmptyString) {
    load_data_ = new ::std::string;
  }
  load_data_->assign(value);
}
inline void msg_load_player_data_rep::set_load_data(const char* value) {
  set_has_load_data();
  if (load_data_ == &::google::protobuf::internal::kEmptyString) {
    load_data_ = new ::std::string;
  }
  load_data_->assign(value);
}
inline void msg_load_player_data_rep::set_load_data(const void* value, size_t size) {
  set_has_load_data();
  if (load_data_ == &::google::protobuf::internal::kEmptyString) {
    load_data_ = new ::std::string;
  }
  load_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_load_player_data_rep::mutable_load_data() {
  set_has_load_data();
  if (load_data_ == &::google::protobuf::internal::kEmptyString) {
    load_data_ = new ::std::string;
  }
  return load_data_;
}
inline ::std::string* msg_load_player_data_rep::release_load_data() {
  clear_has_load_data();
  if (load_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = load_data_;
    load_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_load_player_data_rep::set_allocated_load_data(::std::string* load_data) {
  if (load_data_ != &::google::protobuf::internal::kEmptyString) {
    delete load_data_;
  }
  if (load_data) {
    set_has_load_data();
    load_data_ = load_data;
  } else {
    clear_has_load_data();
    load_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_save_player_data

// optional uint32 uid = 1;
inline bool msg_save_player_data::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_save_player_data::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_save_player_data::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_save_player_data::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_save_player_data::uid() const {
  return uid_;
}
inline void msg_save_player_data::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 data_type = 2;
inline bool msg_save_player_data::has_data_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_save_player_data::set_has_data_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_save_player_data::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_save_player_data::clear_data_type() {
  data_type_ = 0u;
  clear_has_data_type();
}
inline ::google::protobuf::uint32 msg_save_player_data::data_type() const {
  return data_type_;
}
inline void msg_save_player_data::set_data_type(::google::protobuf::uint32 value) {
  set_has_data_type();
  data_type_ = value;
}

// optional bytes save_data = 3;
inline bool msg_save_player_data::has_save_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_save_player_data::set_has_save_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_save_player_data::clear_has_save_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_save_player_data::clear_save_data() {
  if (save_data_ != &::google::protobuf::internal::kEmptyString) {
    save_data_->clear();
  }
  clear_has_save_data();
}
inline const ::std::string& msg_save_player_data::save_data() const {
  return *save_data_;
}
inline void msg_save_player_data::set_save_data(const ::std::string& value) {
  set_has_save_data();
  if (save_data_ == &::google::protobuf::internal::kEmptyString) {
    save_data_ = new ::std::string;
  }
  save_data_->assign(value);
}
inline void msg_save_player_data::set_save_data(const char* value) {
  set_has_save_data();
  if (save_data_ == &::google::protobuf::internal::kEmptyString) {
    save_data_ = new ::std::string;
  }
  save_data_->assign(value);
}
inline void msg_save_player_data::set_save_data(const void* value, size_t size) {
  set_has_save_data();
  if (save_data_ == &::google::protobuf::internal::kEmptyString) {
    save_data_ = new ::std::string;
  }
  save_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_save_player_data::mutable_save_data() {
  set_has_save_data();
  if (save_data_ == &::google::protobuf::internal::kEmptyString) {
    save_data_ = new ::std::string;
  }
  return save_data_;
}
inline ::std::string* msg_save_player_data::release_save_data() {
  clear_has_save_data();
  if (save_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = save_data_;
    save_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_save_player_data::set_allocated_save_data(::std::string* save_data) {
  if (save_data_ != &::google::protobuf::internal::kEmptyString) {
    delete save_data_;
  }
  if (save_data) {
    set_has_save_data();
    save_data_ = save_data;
  } else {
    clear_has_save_data();
    save_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_report_svr_info

// optional uint32 onlines = 1;
inline bool msg_report_svr_info::has_onlines() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_report_svr_info::set_has_onlines() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_report_svr_info::clear_has_onlines() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_report_svr_info::clear_onlines() {
  onlines_ = 0u;
  clear_has_onlines();
}
inline ::google::protobuf::uint32 msg_report_svr_info::onlines() const {
  return onlines_;
}
inline void msg_report_svr_info::set_onlines(::google::protobuf::uint32 value) {
  set_has_onlines();
  onlines_ = value;
}

// -------------------------------------------------------------------

// msg_leave_svr

// optional uint32 uid = 1;
inline bool msg_leave_svr::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_leave_svr::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_leave_svr::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_leave_svr::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_leave_svr::uid() const {
  return uid_;
}
inline void msg_leave_svr::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// msg_notify_net_state

// optional uint32 uid = 1;
inline bool msg_notify_net_state::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_notify_net_state::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_notify_net_state::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_notify_net_state::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_notify_net_state::uid() const {
  return uid_;
}
inline void msg_notify_net_state::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 state = 2;
inline bool msg_notify_net_state::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_notify_net_state::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_notify_net_state::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_notify_net_state::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 msg_notify_net_state::state() const {
  return state_;
}
inline void msg_notify_net_state::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional uint32 newip = 3;
inline bool msg_notify_net_state::has_newip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_notify_net_state::set_has_newip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_notify_net_state::clear_has_newip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_notify_net_state::clear_newip() {
  newip_ = 0u;
  clear_has_newip();
}
inline ::google::protobuf::uint32 msg_notify_net_state::newip() const {
  return newip_;
}
inline void msg_notify_net_state::set_newip(::google::protobuf::uint32 value) {
  set_has_newip();
  newip_ = value;
}

// optional uint32 no_player = 4;
inline bool msg_notify_net_state::has_no_player() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_notify_net_state::set_has_no_player() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_notify_net_state::clear_has_no_player() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_notify_net_state::clear_no_player() {
  no_player_ = 0u;
  clear_has_no_player();
}
inline ::google::protobuf::uint32 msg_notify_net_state::no_player() const {
  return no_player_;
}
inline void msg_notify_net_state::set_no_player(::google::protobuf::uint32 value) {
  set_has_no_player();
  no_player_ = value;
}

// -------------------------------------------------------------------

// msg_enter_into_game_svr

// optional uint32 player_type = 1;
inline bool msg_enter_into_game_svr::has_player_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_enter_into_game_svr::set_has_player_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_enter_into_game_svr::clear_has_player_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_enter_into_game_svr::clear_player_type() {
  player_type_ = 0u;
  clear_has_player_type();
}
inline ::google::protobuf::uint32 msg_enter_into_game_svr::player_type() const {
  return player_type_;
}
inline void msg_enter_into_game_svr::set_player_type(::google::protobuf::uint32 value) {
  set_has_player_type();
  player_type_ = value;
}

// optional .net.base_info base_data = 2;
inline bool msg_enter_into_game_svr::has_base_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_enter_into_game_svr::set_has_base_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_enter_into_game_svr::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_enter_into_game_svr::clear_base_data() {
  if (base_data_ != NULL) base_data_->::net::base_info::Clear();
  clear_has_base_data();
}
inline const ::net::base_info& msg_enter_into_game_svr::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::net::base_info* msg_enter_into_game_svr::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::net::base_info;
  return base_data_;
}
inline ::net::base_info* msg_enter_into_game_svr::release_base_data() {
  clear_has_base_data();
  ::net::base_info* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void msg_enter_into_game_svr::set_allocated_base_data(::net::base_info* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional uint32 play_type = 3;
inline bool msg_enter_into_game_svr::has_play_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_enter_into_game_svr::set_has_play_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_enter_into_game_svr::clear_has_play_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_enter_into_game_svr::clear_play_type() {
  play_type_ = 0u;
  clear_has_play_type();
}
inline ::google::protobuf::uint32 msg_enter_into_game_svr::play_type() const {
  return play_type_;
}
inline void msg_enter_into_game_svr::set_play_type(::google::protobuf::uint32 value) {
  set_has_play_type();
  play_type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace svr
}  // namespace net

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::net::svr::SERVER_MSG_ID>() {
  return ::net::svr::SERVER_MSG_ID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_servers_5fmsg_2eproto__INCLUDED
