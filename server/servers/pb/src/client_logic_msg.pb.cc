// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_logic_msg.proto

#include "client_logic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_base_5fmsg_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_base_info_base_5fmsg_5fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fmsg_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_svr_info_base_5fmsg_5fstruct_2eproto;
namespace net {
namespace cli {
class msg_heart_testDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_heart_test> _instance;
} _msg_heart_test_default_instance_;
class msg_login_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_login_req> _instance;
} _msg_login_req_default_instance_;
class msg_login_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_login_rep> _instance;
} _msg_login_rep_default_instance_;
class msg_loginout_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_loginout_rep> _instance;
} _msg_loginout_rep_default_instance_;
class msg_version_info_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_version_info_rep> _instance;
} _msg_version_info_rep_default_instance_;
class msg_enter_game_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_enter_game_rep> _instance;
} _msg_enter_game_rep_default_instance_;
class msg_player_data_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_player_data_rep> _instance;
} _msg_player_data_rep_default_instance_;
class msg_svrs_info_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_svrs_info_req> _instance;
} _msg_svrs_info_req_default_instance_;
class msg_svrs_info_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_svrs_info_rep> _instance;
} _msg_svrs_info_rep_default_instance_;
class msg_enter_gamesvr_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_enter_gamesvr_req> _instance;
} _msg_enter_gamesvr_req_default_instance_;
class msg_enter_gamesvr_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_enter_gamesvr_rep> _instance;
} _msg_enter_gamesvr_rep_default_instance_;
class msg_back_lobby_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_back_lobby_req> _instance;
} _msg_back_lobby_req_default_instance_;
class msg_back_lobby_repDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_back_lobby_rep> _instance;
} _msg_back_lobby_rep_default_instance_;
}  // namespace cli
}  // namespace net
static void InitDefaultsscc_info_msg_back_lobby_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_back_lobby_rep_default_instance_;
    new (ptr) ::net::cli::msg_back_lobby_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_back_lobby_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_back_lobby_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_back_lobby_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_back_lobby_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_back_lobby_req_default_instance_;
    new (ptr) ::net::cli::msg_back_lobby_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_back_lobby_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_back_lobby_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_back_lobby_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_enter_game_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_enter_game_rep_default_instance_;
    new (ptr) ::net::cli::msg_enter_game_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_enter_game_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_enter_game_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_enter_game_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_enter_gamesvr_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_enter_gamesvr_rep_default_instance_;
    new (ptr) ::net::cli::msg_enter_gamesvr_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_enter_gamesvr_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_enter_gamesvr_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_enter_gamesvr_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_enter_gamesvr_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_enter_gamesvr_req_default_instance_;
    new (ptr) ::net::cli::msg_enter_gamesvr_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_enter_gamesvr_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_enter_gamesvr_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_enter_gamesvr_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_heart_test_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_heart_test_default_instance_;
    new (ptr) ::net::cli::msg_heart_test();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_heart_test::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_heart_test_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_heart_test_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_login_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_login_rep_default_instance_;
    new (ptr) ::net::cli::msg_login_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_login_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_login_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_login_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_login_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_login_req_default_instance_;
    new (ptr) ::net::cli::msg_login_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_login_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_login_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_login_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_loginout_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_loginout_rep_default_instance_;
    new (ptr) ::net::cli::msg_loginout_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_loginout_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_loginout_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_loginout_rep_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_player_data_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_player_data_rep_default_instance_;
    new (ptr) ::net::cli::msg_player_data_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_player_data_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_player_data_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_player_data_rep_client_5flogic_5fmsg_2eproto}, {
      &scc_info_base_info_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_svrs_info_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_svrs_info_rep_default_instance_;
    new (ptr) ::net::cli::msg_svrs_info_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_svrs_info_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_svrs_info_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_svrs_info_rep_client_5flogic_5fmsg_2eproto}, {
      &scc_info_svr_info_base_5fmsg_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_msg_svrs_info_req_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_svrs_info_req_default_instance_;
    new (ptr) ::net::cli::msg_svrs_info_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_svrs_info_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_svrs_info_req_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_svrs_info_req_client_5flogic_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_version_info_rep_client_5flogic_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::net::cli::_msg_version_info_rep_default_instance_;
    new (ptr) ::net::cli::msg_version_info_rep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::net::cli::msg_version_info_rep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_version_info_rep_client_5flogic_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_version_info_rep_client_5flogic_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_client_5flogic_5fmsg_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_client_5flogic_5fmsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_client_5flogic_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_client_5flogic_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_heart_test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_heart_test, svr_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_req, uid_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_req, key_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_req, deviceid_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_req, versionid_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_req, check_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_rep, result_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_login_rep, server_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_loginout_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_loginout_rep, reason_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_loginout_rep, deviceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_version_info_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_version_info_rep, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_game_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_game_rep, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_player_data_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_player_data_rep, base_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_svrs_info_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_svrs_info_req, game_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_svrs_info_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_svrs_info_rep, svrs_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_svrs_info_rep, cur_svrid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_gamesvr_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_gamesvr_req, svrid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_gamesvr_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_gamesvr_rep, result_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_enter_gamesvr_rep, svrid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_back_lobby_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_back_lobby_req, uid_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_back_lobby_req, is_action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_back_lobby_rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_back_lobby_rep, result_),
  PROTOBUF_FIELD_OFFSET(::net::cli::msg_back_lobby_rep, reason_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::net::cli::msg_heart_test)},
  { 6, -1, sizeof(::net::cli::msg_login_req)},
  { 16, -1, sizeof(::net::cli::msg_login_rep)},
  { 23, -1, sizeof(::net::cli::msg_loginout_rep)},
  { 30, -1, sizeof(::net::cli::msg_version_info_rep)},
  { 36, -1, sizeof(::net::cli::msg_enter_game_rep)},
  { 42, -1, sizeof(::net::cli::msg_player_data_rep)},
  { 48, -1, sizeof(::net::cli::msg_svrs_info_req)},
  { 54, -1, sizeof(::net::cli::msg_svrs_info_rep)},
  { 61, -1, sizeof(::net::cli::msg_enter_gamesvr_req)},
  { 67, -1, sizeof(::net::cli::msg_enter_gamesvr_rep)},
  { 74, -1, sizeof(::net::cli::msg_back_lobby_req)},
  { 81, -1, sizeof(::net::cli::msg_back_lobby_rep)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_heart_test_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_login_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_login_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_loginout_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_version_info_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_enter_game_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_player_data_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_svrs_info_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_svrs_info_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_enter_gamesvr_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_enter_gamesvr_rep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_back_lobby_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::net::cli::_msg_back_lobby_rep_default_instance_),
};

const char descriptor_table_protodef_client_5flogic_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026client_logic_msg.proto\022\007net.cli\032\025base_"
  "msg_struct.proto\"\"\n\016msg_heart_test\022\020\n\010sv"
  "r_time\030\001 \001(\r\"b\n\rmsg_login_req\022\013\n\003uid\030\001 \001"
  "(\r\022\013\n\003key\030\002 \001(\014\022\020\n\010deviceid\030\003 \001(\014\022\021\n\tver"
  "sionid\030\004 \001(\014\022\022\n\ncheck_time\030\005 \001(\r\"4\n\rmsg_"
  "login_rep\022\016\n\006result\030\001 \001(\r\022\023\n\013server_time"
  "\030\002 \001(\r\"4\n\020msg_loginout_rep\022\016\n\006reason\030\001 \001"
  "(\r\022\020\n\010deviceid\030\002 \001(\014\"\'\n\024msg_version_info"
  "_rep\022\017\n\007version\030\001 \001(\014\"$\n\022msg_enter_game_"
  "rep\022\016\n\006result\030\001 \001(\r\"8\n\023msg_player_data_r"
  "ep\022!\n\tbase_data\030\001 \001(\0132\016.net.base_info\"&\n"
  "\021msg_svrs_info_req\022\021\n\tgame_type\030\001 \001(\r\"C\n"
  "\021msg_svrs_info_rep\022\033\n\004svrs\030\001 \003(\0132\r.net.s"
  "vr_info\022\021\n\tcur_svrid\030\002 \001(\r\"&\n\025msg_enter_"
  "gamesvr_req\022\r\n\005svrid\030\001 \001(\r\"6\n\025msg_enter_"
  "gamesvr_rep\022\016\n\006result\030\001 \001(\r\022\r\n\005svrid\030\002 \001"
  "(\r\"4\n\022msg_back_lobby_req\022\013\n\003uid\030\001 \001(\r\022\021\n"
  "\tis_action\030\002 \001(\r\"4\n\022msg_back_lobby_rep\022\016"
  "\n\006result\030\001 \001(\r\022\016\n\006reason\030\002 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_client_5flogic_5fmsg_2eproto_deps[1] = {
  &::descriptor_table_base_5fmsg_5fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_client_5flogic_5fmsg_2eproto_sccs[13] = {
  &scc_info_msg_back_lobby_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_back_lobby_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_enter_game_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_enter_gamesvr_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_enter_gamesvr_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_heart_test_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_login_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_login_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_loginout_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_player_data_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_svrs_info_rep_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_svrs_info_req_client_5flogic_5fmsg_2eproto.base,
  &scc_info_msg_version_info_rep_client_5flogic_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_client_5flogic_5fmsg_2eproto_once;
static bool descriptor_table_client_5flogic_5fmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5flogic_5fmsg_2eproto = {
  &descriptor_table_client_5flogic_5fmsg_2eproto_initialized, descriptor_table_protodef_client_5flogic_5fmsg_2eproto, "client_logic_msg.proto", 758,
  &descriptor_table_client_5flogic_5fmsg_2eproto_once, descriptor_table_client_5flogic_5fmsg_2eproto_sccs, descriptor_table_client_5flogic_5fmsg_2eproto_deps, 13, 1,
  schemas, file_default_instances, TableStruct_client_5flogic_5fmsg_2eproto::offsets,
  file_level_metadata_client_5flogic_5fmsg_2eproto, 13, file_level_enum_descriptors_client_5flogic_5fmsg_2eproto, file_level_service_descriptors_client_5flogic_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_client_5flogic_5fmsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_client_5flogic_5fmsg_2eproto), true);
namespace net {
namespace cli {

// ===================================================================

void msg_heart_test::InitAsDefaultInstance() {
}
class msg_heart_test::_Internal {
 public:
};

msg_heart_test::msg_heart_test()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_heart_test)
}
msg_heart_test::msg_heart_test(const msg_heart_test& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  svr_time_ = from.svr_time_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_heart_test)
}

void msg_heart_test::SharedCtor() {
  svr_time_ = 0u;
}

msg_heart_test::~msg_heart_test() {
  // @@protoc_insertion_point(destructor:net.cli.msg_heart_test)
  SharedDtor();
}

void msg_heart_test::SharedDtor() {
}

void msg_heart_test::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_heart_test& msg_heart_test::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_heart_test_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_heart_test::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_heart_test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  svr_time_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_heart_test::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 svr_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          svr_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_heart_test::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_heart_test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 svr_time = 1;
  if (this->svr_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_svr_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_heart_test)
  return target;
}

size_t msg_heart_test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_heart_test)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 svr_time = 1;
  if (this->svr_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_svr_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_heart_test::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_heart_test)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_heart_test* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_heart_test>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_heart_test)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_heart_test)
    MergeFrom(*source);
  }
}

void msg_heart_test::MergeFrom(const msg_heart_test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_heart_test)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.svr_time() != 0) {
    _internal_set_svr_time(from._internal_svr_time());
  }
}

void msg_heart_test::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_heart_test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_heart_test::CopyFrom(const msg_heart_test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_heart_test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_heart_test::IsInitialized() const {
  return true;
}

void msg_heart_test::InternalSwap(msg_heart_test* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(svr_time_, other->svr_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_heart_test::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_login_req::InitAsDefaultInstance() {
}
class msg_login_req::_Internal {
 public:
};

msg_login_req::msg_login_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_login_req)
}
msg_login_req::msg_login_req(const msg_login_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  versionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_versionid().empty()) {
    versionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.versionid_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&check_time_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(check_time_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_login_req)
}

void msg_login_req::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_login_req_client_5flogic_5fmsg_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  versionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_time_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(check_time_));
}

msg_login_req::~msg_login_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_login_req)
  SharedDtor();
}

void msg_login_req::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  versionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msg_login_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_login_req& msg_login_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_login_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_login_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_login_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  versionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_time_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(check_time_));
  _internal_metadata_.Clear();
}

const char* msg_login_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes deviceid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_deviceid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes versionid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_versionid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 check_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          check_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_login_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_login_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // bytes deviceid = 3;
  if (this->deviceid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_deviceid(), target);
  }

  // bytes versionid = 4;
  if (this->versionid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_versionid(), target);
  }

  // uint32 check_time = 5;
  if (this->check_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_check_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_login_req)
  return target;
}

size_t msg_login_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_login_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes deviceid = 3;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deviceid());
  }

  // bytes versionid = 4;
  if (this->versionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_versionid());
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 check_time = 5;
  if (this->check_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_check_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_login_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_login_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_login_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_login_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_login_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_login_req)
    MergeFrom(*source);
  }
}

void msg_login_req::MergeFrom(const msg_login_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_login_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.versionid().size() > 0) {

    versionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.versionid_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.check_time() != 0) {
    _internal_set_check_time(from._internal_check_time());
  }
}

void msg_login_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_login_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_login_req::CopyFrom(const msg_login_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_login_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_login_req::IsInitialized() const {
  return true;
}

void msg_login_req::InternalSwap(msg_login_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  versionid_.Swap(&other->versionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(check_time_, other->check_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_login_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_login_rep::InitAsDefaultInstance() {
}
class msg_login_rep::_Internal {
 public:
};

msg_login_rep::msg_login_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_login_rep)
}
msg_login_rep::msg_login_rep(const msg_login_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_time_) -
    reinterpret_cast<char*>(&result_)) + sizeof(server_time_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_login_rep)
}

void msg_login_rep::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_time_) -
      reinterpret_cast<char*>(&result_)) + sizeof(server_time_));
}

msg_login_rep::~msg_login_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_login_rep)
  SharedDtor();
}

void msg_login_rep::SharedDtor() {
}

void msg_login_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_login_rep& msg_login_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_login_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_login_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_login_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_time_) -
      reinterpret_cast<char*>(&result_)) + sizeof(server_time_));
  _internal_metadata_.Clear();
}

const char* msg_login_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 server_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_login_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_login_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // uint32 server_time = 2;
  if (this->server_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_login_rep)
  return target;
}

size_t msg_login_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_login_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  // uint32 server_time = 2;
  if (this->server_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_login_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_login_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_login_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_login_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_login_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_login_rep)
    MergeFrom(*source);
  }
}

void msg_login_rep::MergeFrom(const msg_login_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_login_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.server_time() != 0) {
    _internal_set_server_time(from._internal_server_time());
  }
}

void msg_login_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_login_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_login_rep::CopyFrom(const msg_login_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_login_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_login_rep::IsInitialized() const {
  return true;
}

void msg_login_rep::InternalSwap(msg_login_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(server_time_, other->server_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_login_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_loginout_rep::InitAsDefaultInstance() {
}
class msg_loginout_rep::_Internal {
 public:
};

msg_loginout_rep::msg_loginout_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_loginout_rep)
}
msg_loginout_rep::msg_loginout_rep(const msg_loginout_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_loginout_rep)
}

void msg_loginout_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_loginout_rep_client_5flogic_5fmsg_2eproto.base);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_ = 0u;
}

msg_loginout_rep::~msg_loginout_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_loginout_rep)
  SharedDtor();
}

void msg_loginout_rep::SharedDtor() {
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msg_loginout_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_loginout_rep& msg_loginout_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_loginout_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_loginout_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_loginout_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_loginout_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes deviceid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_deviceid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_loginout_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_loginout_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reason = 1;
  if (this->reason() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reason(), target);
  }

  // bytes deviceid = 2;
  if (this->deviceid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_loginout_rep)
  return target;
}

size_t msg_loginout_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_loginout_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes deviceid = 2;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deviceid());
  }

  // uint32 reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_loginout_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_loginout_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_loginout_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_loginout_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_loginout_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_loginout_rep)
    MergeFrom(*source);
  }
}

void msg_loginout_rep::MergeFrom(const msg_loginout_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_loginout_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void msg_loginout_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_loginout_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_loginout_rep::CopyFrom(const msg_loginout_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_loginout_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_loginout_rep::IsInitialized() const {
  return true;
}

void msg_loginout_rep::InternalSwap(msg_loginout_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_loginout_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_version_info_rep::InitAsDefaultInstance() {
}
class msg_version_info_rep::_Internal {
 public:
};

msg_version_info_rep::msg_version_info_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_version_info_rep)
}
msg_version_info_rep::msg_version_info_rep(const msg_version_info_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_version_info_rep)
}

void msg_version_info_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_version_info_rep_client_5flogic_5fmsg_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

msg_version_info_rep::~msg_version_info_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_version_info_rep)
  SharedDtor();
}

void msg_version_info_rep::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msg_version_info_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_version_info_rep& msg_version_info_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_version_info_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_version_info_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_version_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* msg_version_info_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_version_info_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_version_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes version = 1;
  if (this->version().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_version_info_rep)
  return target;
}

size_t msg_version_info_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_version_info_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_version_info_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_version_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_version_info_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_version_info_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_version_info_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_version_info_rep)
    MergeFrom(*source);
  }
}

void msg_version_info_rep::MergeFrom(const msg_version_info_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_version_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void msg_version_info_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_version_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_version_info_rep::CopyFrom(const msg_version_info_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_version_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_version_info_rep::IsInitialized() const {
  return true;
}

void msg_version_info_rep::InternalSwap(msg_version_info_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_version_info_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_enter_game_rep::InitAsDefaultInstance() {
}
class msg_enter_game_rep::_Internal {
 public:
};

msg_enter_game_rep::msg_enter_game_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_enter_game_rep)
}
msg_enter_game_rep::msg_enter_game_rep(const msg_enter_game_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_enter_game_rep)
}

void msg_enter_game_rep::SharedCtor() {
  result_ = 0u;
}

msg_enter_game_rep::~msg_enter_game_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_enter_game_rep)
  SharedDtor();
}

void msg_enter_game_rep::SharedDtor() {
}

void msg_enter_game_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_enter_game_rep& msg_enter_game_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_enter_game_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_enter_game_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_enter_game_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_enter_game_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_enter_game_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_enter_game_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_enter_game_rep)
  return target;
}

size_t msg_enter_game_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_enter_game_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_enter_game_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_enter_game_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_enter_game_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_enter_game_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_enter_game_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_enter_game_rep)
    MergeFrom(*source);
  }
}

void msg_enter_game_rep::MergeFrom(const msg_enter_game_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_enter_game_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void msg_enter_game_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_enter_game_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_game_rep::CopyFrom(const msg_enter_game_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_enter_game_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_game_rep::IsInitialized() const {
  return true;
}

void msg_enter_game_rep::InternalSwap(msg_enter_game_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_enter_game_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_player_data_rep::InitAsDefaultInstance() {
  ::net::cli::_msg_player_data_rep_default_instance_._instance.get_mutable()->base_data_ = const_cast< ::net::base_info*>(
      ::net::base_info::internal_default_instance());
}
class msg_player_data_rep::_Internal {
 public:
  static const ::net::base_info& base_data(const msg_player_data_rep* msg);
};

const ::net::base_info&
msg_player_data_rep::_Internal::base_data(const msg_player_data_rep* msg) {
  return *msg->base_data_;
}
void msg_player_data_rep::clear_base_data() {
  if (GetArenaNoVirtual() == nullptr && base_data_ != nullptr) {
    delete base_data_;
  }
  base_data_ = nullptr;
}
msg_player_data_rep::msg_player_data_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_player_data_rep)
}
msg_player_data_rep::msg_player_data_rep(const msg_player_data_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_base_data()) {
    base_data_ = new ::net::base_info(*from.base_data_);
  } else {
    base_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_player_data_rep)
}

void msg_player_data_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_player_data_rep_client_5flogic_5fmsg_2eproto.base);
  base_data_ = nullptr;
}

msg_player_data_rep::~msg_player_data_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_player_data_rep)
  SharedDtor();
}

void msg_player_data_rep::SharedDtor() {
  if (this != internal_default_instance()) delete base_data_;
}

void msg_player_data_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_player_data_rep& msg_player_data_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_player_data_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_player_data_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_player_data_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && base_data_ != nullptr) {
    delete base_data_;
  }
  base_data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* msg_player_data_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .net.base_info base_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_player_data_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_player_data_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .net.base_info base_data = 1;
  if (this->has_base_data()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_player_data_rep)
  return target;
}

size_t msg_player_data_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_player_data_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .net.base_info base_data = 1;
  if (this->has_base_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_player_data_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_player_data_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_player_data_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_player_data_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_player_data_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_player_data_rep)
    MergeFrom(*source);
  }
}

void msg_player_data_rep::MergeFrom(const msg_player_data_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_player_data_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base_data()) {
    _internal_mutable_base_data()->::net::base_info::MergeFrom(from._internal_base_data());
  }
}

void msg_player_data_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_player_data_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_data_rep::CopyFrom(const msg_player_data_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_player_data_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_data_rep::IsInitialized() const {
  return true;
}

void msg_player_data_rep::InternalSwap(msg_player_data_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(base_data_, other->base_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_player_data_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_svrs_info_req::InitAsDefaultInstance() {
}
class msg_svrs_info_req::_Internal {
 public:
};

msg_svrs_info_req::msg_svrs_info_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_svrs_info_req)
}
msg_svrs_info_req::msg_svrs_info_req(const msg_svrs_info_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_type_ = from.game_type_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_svrs_info_req)
}

void msg_svrs_info_req::SharedCtor() {
  game_type_ = 0u;
}

msg_svrs_info_req::~msg_svrs_info_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_svrs_info_req)
  SharedDtor();
}

void msg_svrs_info_req::SharedDtor() {
}

void msg_svrs_info_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_svrs_info_req& msg_svrs_info_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_svrs_info_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_svrs_info_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_svrs_info_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_type_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_svrs_info_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 game_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_svrs_info_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_svrs_info_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_type = 1;
  if (this->game_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_svrs_info_req)
  return target;
}

size_t msg_svrs_info_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_svrs_info_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 game_type = 1;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_game_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_svrs_info_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_svrs_info_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_svrs_info_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_svrs_info_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_svrs_info_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_svrs_info_req)
    MergeFrom(*source);
  }
}

void msg_svrs_info_req::MergeFrom(const msg_svrs_info_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_svrs_info_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_type() != 0) {
    _internal_set_game_type(from._internal_game_type());
  }
}

void msg_svrs_info_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_svrs_info_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_svrs_info_req::CopyFrom(const msg_svrs_info_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_svrs_info_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_svrs_info_req::IsInitialized() const {
  return true;
}

void msg_svrs_info_req::InternalSwap(msg_svrs_info_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(game_type_, other->game_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_svrs_info_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_svrs_info_rep::InitAsDefaultInstance() {
}
class msg_svrs_info_rep::_Internal {
 public:
};

void msg_svrs_info_rep::clear_svrs() {
  svrs_.Clear();
}
msg_svrs_info_rep::msg_svrs_info_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_svrs_info_rep)
}
msg_svrs_info_rep::msg_svrs_info_rep(const msg_svrs_info_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      svrs_(from.svrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cur_svrid_ = from.cur_svrid_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_svrs_info_rep)
}

void msg_svrs_info_rep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_svrs_info_rep_client_5flogic_5fmsg_2eproto.base);
  cur_svrid_ = 0u;
}

msg_svrs_info_rep::~msg_svrs_info_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_svrs_info_rep)
  SharedDtor();
}

void msg_svrs_info_rep::SharedDtor() {
}

void msg_svrs_info_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_svrs_info_rep& msg_svrs_info_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_svrs_info_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_svrs_info_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_svrs_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  svrs_.Clear();
  cur_svrid_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_svrs_info_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .net.svr_info svrs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_svrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 cur_svrid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_svrs_info_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_svrs_info_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .net.svr_info svrs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_svrs_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_svrs(i), target, stream);
  }

  // uint32 cur_svrid = 2;
  if (this->cur_svrid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cur_svrid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_svrs_info_rep)
  return target;
}

size_t msg_svrs_info_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_svrs_info_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .net.svr_info svrs = 1;
  total_size += 1UL * this->_internal_svrs_size();
  for (const auto& msg : this->svrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 cur_svrid = 2;
  if (this->cur_svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_svrid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_svrs_info_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_svrs_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_svrs_info_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_svrs_info_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_svrs_info_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_svrs_info_rep)
    MergeFrom(*source);
  }
}

void msg_svrs_info_rep::MergeFrom(const msg_svrs_info_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_svrs_info_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  svrs_.MergeFrom(from.svrs_);
  if (from.cur_svrid() != 0) {
    _internal_set_cur_svrid(from._internal_cur_svrid());
  }
}

void msg_svrs_info_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_svrs_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_svrs_info_rep::CopyFrom(const msg_svrs_info_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_svrs_info_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_svrs_info_rep::IsInitialized() const {
  return true;
}

void msg_svrs_info_rep::InternalSwap(msg_svrs_info_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  svrs_.InternalSwap(&other->svrs_);
  swap(cur_svrid_, other->cur_svrid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_svrs_info_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_enter_gamesvr_req::InitAsDefaultInstance() {
}
class msg_enter_gamesvr_req::_Internal {
 public:
};

msg_enter_gamesvr_req::msg_enter_gamesvr_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_enter_gamesvr_req)
}
msg_enter_gamesvr_req::msg_enter_gamesvr_req(const msg_enter_gamesvr_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  svrid_ = from.svrid_;
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_enter_gamesvr_req)
}

void msg_enter_gamesvr_req::SharedCtor() {
  svrid_ = 0u;
}

msg_enter_gamesvr_req::~msg_enter_gamesvr_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_enter_gamesvr_req)
  SharedDtor();
}

void msg_enter_gamesvr_req::SharedDtor() {
}

void msg_enter_gamesvr_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_enter_gamesvr_req& msg_enter_gamesvr_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_enter_gamesvr_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_enter_gamesvr_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_enter_gamesvr_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  svrid_ = 0u;
  _internal_metadata_.Clear();
}

const char* msg_enter_gamesvr_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 svrid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_enter_gamesvr_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_enter_gamesvr_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 svrid = 1;
  if (this->svrid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_svrid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_enter_gamesvr_req)
  return target;
}

size_t msg_enter_gamesvr_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_enter_gamesvr_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 svrid = 1;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_svrid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_enter_gamesvr_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_enter_gamesvr_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_enter_gamesvr_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_enter_gamesvr_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_enter_gamesvr_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_enter_gamesvr_req)
    MergeFrom(*source);
  }
}

void msg_enter_gamesvr_req::MergeFrom(const msg_enter_gamesvr_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_enter_gamesvr_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
}

void msg_enter_gamesvr_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_enter_gamesvr_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_gamesvr_req::CopyFrom(const msg_enter_gamesvr_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_enter_gamesvr_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_gamesvr_req::IsInitialized() const {
  return true;
}

void msg_enter_gamesvr_req::InternalSwap(msg_enter_gamesvr_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(svrid_, other->svrid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_enter_gamesvr_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_enter_gamesvr_rep::InitAsDefaultInstance() {
}
class msg_enter_gamesvr_rep::_Internal {
 public:
};

msg_enter_gamesvr_rep::msg_enter_gamesvr_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_enter_gamesvr_rep)
}
msg_enter_gamesvr_rep::msg_enter_gamesvr_rep(const msg_enter_gamesvr_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&svrid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(svrid_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_enter_gamesvr_rep)
}

void msg_enter_gamesvr_rep::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&svrid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(svrid_));
}

msg_enter_gamesvr_rep::~msg_enter_gamesvr_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_enter_gamesvr_rep)
  SharedDtor();
}

void msg_enter_gamesvr_rep::SharedDtor() {
}

void msg_enter_gamesvr_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_enter_gamesvr_rep& msg_enter_gamesvr_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_enter_gamesvr_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_enter_gamesvr_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_enter_gamesvr_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&svrid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(svrid_));
  _internal_metadata_.Clear();
}

const char* msg_enter_gamesvr_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 svrid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_enter_gamesvr_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_enter_gamesvr_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // uint32 svrid = 2;
  if (this->svrid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_svrid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_enter_gamesvr_rep)
  return target;
}

size_t msg_enter_gamesvr_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_enter_gamesvr_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  // uint32 svrid = 2;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_svrid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_enter_gamesvr_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_enter_gamesvr_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_enter_gamesvr_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_enter_gamesvr_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_enter_gamesvr_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_enter_gamesvr_rep)
    MergeFrom(*source);
  }
}

void msg_enter_gamesvr_rep::MergeFrom(const msg_enter_gamesvr_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_enter_gamesvr_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
}

void msg_enter_gamesvr_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_enter_gamesvr_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_gamesvr_rep::CopyFrom(const msg_enter_gamesvr_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_enter_gamesvr_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_gamesvr_rep::IsInitialized() const {
  return true;
}

void msg_enter_gamesvr_rep::InternalSwap(msg_enter_gamesvr_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(svrid_, other->svrid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_enter_gamesvr_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_back_lobby_req::InitAsDefaultInstance() {
}
class msg_back_lobby_req::_Internal {
 public:
};

msg_back_lobby_req::msg_back_lobby_req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_back_lobby_req)
}
msg_back_lobby_req::msg_back_lobby_req(const msg_back_lobby_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_action_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(is_action_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_back_lobby_req)
}

void msg_back_lobby_req::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_action_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(is_action_));
}

msg_back_lobby_req::~msg_back_lobby_req() {
  // @@protoc_insertion_point(destructor:net.cli.msg_back_lobby_req)
  SharedDtor();
}

void msg_back_lobby_req::SharedDtor() {
}

void msg_back_lobby_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_back_lobby_req& msg_back_lobby_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_back_lobby_req_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_back_lobby_req::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_back_lobby_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_action_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(is_action_));
  _internal_metadata_.Clear();
}

const char* msg_back_lobby_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 is_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_back_lobby_req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_back_lobby_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // uint32 is_action = 2;
  if (this->is_action() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_is_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_back_lobby_req)
  return target;
}

size_t msg_back_lobby_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_back_lobby_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 is_action = 2;
  if (this->is_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_is_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_back_lobby_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_back_lobby_req)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_back_lobby_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_back_lobby_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_back_lobby_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_back_lobby_req)
    MergeFrom(*source);
  }
}

void msg_back_lobby_req::MergeFrom(const msg_back_lobby_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_back_lobby_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.is_action() != 0) {
    _internal_set_is_action(from._internal_is_action());
  }
}

void msg_back_lobby_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_back_lobby_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_back_lobby_req::CopyFrom(const msg_back_lobby_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_back_lobby_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_back_lobby_req::IsInitialized() const {
  return true;
}

void msg_back_lobby_req::InternalSwap(msg_back_lobby_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(is_action_, other->is_action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_back_lobby_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_back_lobby_rep::InitAsDefaultInstance() {
}
class msg_back_lobby_rep::_Internal {
 public:
};

msg_back_lobby_rep::msg_back_lobby_rep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.cli.msg_back_lobby_rep)
}
msg_back_lobby_rep::msg_back_lobby_rep(const msg_back_lobby_rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&result_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:net.cli.msg_back_lobby_rep)
}

void msg_back_lobby_rep::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&result_)) + sizeof(reason_));
}

msg_back_lobby_rep::~msg_back_lobby_rep() {
  // @@protoc_insertion_point(destructor:net.cli.msg_back_lobby_rep)
  SharedDtor();
}

void msg_back_lobby_rep::SharedDtor() {
}

void msg_back_lobby_rep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_back_lobby_rep& msg_back_lobby_rep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_back_lobby_rep_client_5flogic_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_back_lobby_rep::Clear() {
// @@protoc_insertion_point(message_clear_start:net.cli.msg_back_lobby_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&result_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

const char* msg_back_lobby_rep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_back_lobby_rep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:net.cli.msg_back_lobby_rep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // uint32 reason = 2;
  if (this->reason() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:net.cli.msg_back_lobby_rep)
  return target;
}

size_t msg_back_lobby_rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.cli.msg_back_lobby_rep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  // uint32 reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_back_lobby_rep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:net.cli.msg_back_lobby_rep)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_back_lobby_rep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_back_lobby_rep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:net.cli.msg_back_lobby_rep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:net.cli.msg_back_lobby_rep)
    MergeFrom(*source);
  }
}

void msg_back_lobby_rep::MergeFrom(const msg_back_lobby_rep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.cli.msg_back_lobby_rep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void msg_back_lobby_rep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:net.cli.msg_back_lobby_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_back_lobby_rep::CopyFrom(const msg_back_lobby_rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.cli.msg_back_lobby_rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_back_lobby_rep::IsInitialized() const {
  return true;
}

void msg_back_lobby_rep::InternalSwap(msg_back_lobby_rep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_back_lobby_rep::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace cli
}  // namespace net
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::net::cli::msg_heart_test* Arena::CreateMaybeMessage< ::net::cli::msg_heart_test >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_heart_test >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_login_req* Arena::CreateMaybeMessage< ::net::cli::msg_login_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_login_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_login_rep* Arena::CreateMaybeMessage< ::net::cli::msg_login_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_login_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_loginout_rep* Arena::CreateMaybeMessage< ::net::cli::msg_loginout_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_loginout_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_version_info_rep* Arena::CreateMaybeMessage< ::net::cli::msg_version_info_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_version_info_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_enter_game_rep* Arena::CreateMaybeMessage< ::net::cli::msg_enter_game_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_enter_game_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_player_data_rep* Arena::CreateMaybeMessage< ::net::cli::msg_player_data_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_player_data_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_svrs_info_req* Arena::CreateMaybeMessage< ::net::cli::msg_svrs_info_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_svrs_info_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_svrs_info_rep* Arena::CreateMaybeMessage< ::net::cli::msg_svrs_info_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_svrs_info_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_enter_gamesvr_req* Arena::CreateMaybeMessage< ::net::cli::msg_enter_gamesvr_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_enter_gamesvr_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_enter_gamesvr_rep* Arena::CreateMaybeMessage< ::net::cli::msg_enter_gamesvr_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_enter_gamesvr_rep >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_back_lobby_req* Arena::CreateMaybeMessage< ::net::cli::msg_back_lobby_req >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_back_lobby_req >(arena);
}
template<> PROTOBUF_NOINLINE ::net::cli::msg_back_lobby_rep* Arena::CreateMaybeMessage< ::net::cli::msg_back_lobby_rep >(Arena* arena) {
  return Arena::CreateInternal< ::net::cli::msg_back_lobby_rep >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
